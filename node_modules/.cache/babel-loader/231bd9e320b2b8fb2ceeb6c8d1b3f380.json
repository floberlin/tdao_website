{"ast":null,"code":"/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport SimpleToken from './SimpleToken';\n\nvar BinaryShiftToken = function (_super) {\n  __extends(BinaryShiftToken, _super);\n\n  function BinaryShiftToken(previous, binaryShiftStart, binaryShiftByteCount) {\n    var _this = _super.call(this, previous, 0, 0) || this;\n\n    _this.binaryShiftStart = binaryShiftStart;\n    _this.binaryShiftByteCount = binaryShiftByteCount;\n    return _this;\n  }\n  /**\n   * @Override\n   */\n\n\n  BinaryShiftToken.prototype.appendTo = function (bitArray, text) {\n    for (var i = 0; i < this.binaryShiftByteCount; i++) {\n      if (i === 0 || i === 31 && this.binaryShiftByteCount <= 62) {\n        // We need a header before the first character, and before\n        // character 31 when the total byte code is <= 62\n        bitArray.appendBits(31, 5); // BINARY_SHIFT\n\n        if (this.binaryShiftByteCount > 62) {\n          bitArray.appendBits(this.binaryShiftByteCount - 31, 16);\n        } else if (i === 0) {\n          // 1 <= binaryShiftByteCode <= 62\n          bitArray.appendBits(Math.min(this.binaryShiftByteCount, 31), 5);\n        } else {\n          // 32 <= binaryShiftCount <= 62 and i == 31\n          bitArray.appendBits(this.binaryShiftByteCount - 31, 5);\n        }\n      }\n\n      bitArray.appendBits(text[this.binaryShiftStart + i], 8);\n    }\n  };\n\n  BinaryShiftToken.prototype.addBinaryShift = function (start, byteCount) {\n    // int bitCount = (byteCount * 8) + (byteCount <= 31 ? 10 : byteCount <= 62 ? 20 : 21);\n    return new BinaryShiftToken(this, start, byteCount);\n  };\n  /**\n   * @Override\n   */\n\n\n  BinaryShiftToken.prototype.toString = function () {\n    return '<' + this.binaryShiftStart + '::' + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + '>';\n  };\n\n  return BinaryShiftToken;\n}(SimpleToken);\n\nexport default BinaryShiftToken;","map":{"version":3,"sources":["../../../../../src/core/aztec/encoder/BinaryShiftToken.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcE;;;;;;;;;;;;;;;;;;;;;;;;;AAQF,OAAO,WAAP,MAAwB,eAAxB;;AAIA,IAAA,gBAAA,GAAA,UAAA,MAAA,EAAA;AAAwD,EAAA,SAAA,CAAA,gBAAA,EAAA,MAAA,CAAA;;AAKtD,WAAA,gBAAA,CACE,QADF,EAEE,gBAFF,EAGE,oBAHF,EAG2B;AAH3B,QAAA,KAAA,GAKE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAN,EAAgB,CAAhB,EAAmB,CAAnB,KAAqB,IALvB;;AAME,IAAA,KAAI,CAAC,gBAAL,GAA+B,gBAA/B;AACA,IAAA,KAAI,CAAC,oBAAL,GAAmC,oBAAnC;;AACD;AAED;;AAEG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,UAAgB,QAAhB,EAAoC,IAApC,EAA+D;AAC7D,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,oBAAzB,EAA+C,CAAC,EAAhD,EAAoD;AAClD,UAAI,CAAC,KAAK,CAAN,IAAY,CAAC,KAAK,EAAN,IAAY,KAAK,oBAAL,IAA6B,EAAzD,EAA8D;AAC5D;AACA;AACA,QAAA,QAAQ,CAAC,UAAT,CAAoB,EAApB,EAAwB,CAAxB,EAH4D,CAG/B;;AAC7B,YAAI,KAAK,oBAAL,GAA4B,EAAhC,EAAoC;AAClC,UAAA,QAAQ,CAAC,UAAT,CAAoB,KAAK,oBAAL,GAA4B,EAAhD,EAAoD,EAApD;AACD,SAFD,MAEO,IAAI,CAAC,KAAK,CAAV,EAAa;AAClB;AACA,UAAA,QAAQ,CAAC,UAAT,CAAoB,IAAI,CAAC,GAAL,CAAS,KAAK,oBAAd,EAAoC,EAApC,CAApB,EAA6D,CAA7D;AACD,SAHM,MAGA;AACL;AACA,UAAA,QAAQ,CAAC,UAAT,CAAoB,KAAK,oBAAL,GAA4B,EAAhD,EAAoD,CAApD;AACD;AACF;;AACD,MAAA,QAAQ,CAAC,UAAT,CAAoB,IAAI,CAAC,KAAK,gBAAL,GAAwB,CAAzB,CAAxB,EAAqD,CAArD;AACD;AACF,GAlBM;;AAoBU,EAAA,gBAAA,CAAA,SAAA,CAAA,cAAA,GAAjB,UAAgC,KAAhC,EAA4C,SAA5C,EAA0D;AACxD;AACA,WAAO,IAAI,gBAAJ,CAAqB,IAArB,EAA2B,KAA3B,EAAkC,SAAlC,CAAP;AACD,GAHgB;AAKjB;;AAEG;;;AACI,EAAA,gBAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,WAAO,MAAM,KAAK,gBAAX,GAA8B,IAA9B,IAAsC,KAAK,gBAAL,GAAwB,KAAK,oBAA7B,GAAoD,CAA1F,IAA+F,GAAtG;AACD,GAFM;;AAIT,SAAA,gBAAA;AAAC,CAlDD,CAAwD,WAAxD,CAAA","sourceRoot":"","sourcesContent":["/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport SimpleToken from './SimpleToken';\nvar BinaryShiftToken = /** @class */ (function (_super) {\n    __extends(BinaryShiftToken, _super);\n    function BinaryShiftToken(previous, binaryShiftStart, binaryShiftByteCount) {\n        var _this = _super.call(this, previous, 0, 0) || this;\n        _this.binaryShiftStart = binaryShiftStart;\n        _this.binaryShiftByteCount = binaryShiftByteCount;\n        return _this;\n    }\n    /**\n     * @Override\n     */\n    BinaryShiftToken.prototype.appendTo = function (bitArray, text) {\n        for (var i = 0; i < this.binaryShiftByteCount; i++) {\n            if (i === 0 || (i === 31 && this.binaryShiftByteCount <= 62)) {\n                // We need a header before the first character, and before\n                // character 31 when the total byte code is <= 62\n                bitArray.appendBits(31, 5); // BINARY_SHIFT\n                if (this.binaryShiftByteCount > 62) {\n                    bitArray.appendBits(this.binaryShiftByteCount - 31, 16);\n                }\n                else if (i === 0) {\n                    // 1 <= binaryShiftByteCode <= 62\n                    bitArray.appendBits(Math.min(this.binaryShiftByteCount, 31), 5);\n                }\n                else {\n                    // 32 <= binaryShiftCount <= 62 and i == 31\n                    bitArray.appendBits(this.binaryShiftByteCount - 31, 5);\n                }\n            }\n            bitArray.appendBits(text[this.binaryShiftStart + i], 8);\n        }\n    };\n    BinaryShiftToken.prototype.addBinaryShift = function (start, byteCount) {\n        // int bitCount = (byteCount * 8) + (byteCount <= 31 ? 10 : byteCount <= 62 ? 20 : 21);\n        return new BinaryShiftToken(this, start, byteCount);\n    };\n    /**\n     * @Override\n     */\n    BinaryShiftToken.prototype.toString = function () {\n        return '<' + this.binaryShiftStart + '::' + (this.binaryShiftStart + this.binaryShiftByteCount - 1) + '>';\n    };\n    return BinaryShiftToken;\n}(SimpleToken));\nexport default BinaryShiftToken;\n//# sourceMappingURL=BinaryShiftToken.js.map"]},"metadata":{},"sourceType":"module"}