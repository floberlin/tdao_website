{"ast":null,"code":"import _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { getCurrentRange, attachMediaHandler, detachMediaHandler } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useState, useEffect } from 'react';\n\nvar useViewportRange = function useViewportRange() {\n  var _useState = useState(getCurrentRange().name),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentRange = _useState2[0],\n      setCurrentRange = _useState2[1];\n\n  useEffect(function () {\n    var isMounted = true;\n\n    var handler = function handler(_ref) {\n      var range = _ref.name;\n\n      if (isMounted === true) {\n        setCurrentRange(range);\n      }\n    };\n\n    attachMediaHandler(handler);\n    return function () {\n      isMounted = false;\n      detachMediaHandler(handler);\n    };\n  }, [setCurrentRange]);\n  return currentRange;\n};\n\nexport { useViewportRange };","map":{"version":3,"sources":["../src/hooks/useViewportRange.ts"],"names":["useViewportRange","currentRange","setCurrentRange","useState","getCurrentRange","useEffect","isMounted","handler","name","range","attachMediaHandler","detachMediaHandler"],"mappings":";;;;IAGaA,gBAAgB,GAAG,SAAnBA,gBAAmB,GAAM;AACpC,MAAA,SAAA,GAAwCG,QAAQ,CAACC,eAAe,GAAhE,IAAgD,CAAhD;AAAA,MAAA,UAAA,GAAA,cAAA,CAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAAOH,YAAP,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAAqBC,eAArB,GAAA,UAAA,CAAA,CAAA,CAAA;;AAEAG,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIC,SAAS,GAAb,IAAA;;AACA,QAAMC,OAAO,GAAG,SAAVA,OAAU,CAAA,IAAA,EAAqB;AAAA,UAAZE,KAAY,GAAA,IAAA,CAAlBD,IAAkB;;AACnC,UAAIF,SAAS,KAAb,IAAA,EAAwB;AACtBJ,QAAAA,eAAe,CAAfA,KAAe,CAAfA;AACD;AAHH,KAAA;;AAKAQ,IAAAA,kBAAkB,CAAlBA,OAAkB,CAAlBA;AACA,WAAO,YAAM;AACXJ,MAAAA,SAAS,GAATA,KAAAA;AACAK,MAAAA,kBAAkB,CAAlBA,OAAkB,CAAlBA;AAFF,KAAA;AARO,GAAA,EAYN,CAZHN,eAYG,CAZM,CAATA;AAcA,SAAA,YAAA;AACD,C","sourcesContent":["import { getCurrentRange, attachMediaHandler, detachMediaHandler } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useEffect, useState } from 'react';\n\nexport const useViewportRange = () => {\n  const [currentRange, setCurrentRange] = useState(getCurrentRange().name);\n\n  useEffect(() => {\n    let isMounted = true;\n    const handler = ({ name: range }) => {\n      if (isMounted === true) {\n        setCurrentRange(range);\n      }\n    };\n    attachMediaHandler(handler);\n    return () => {\n      isMounted = false;\n      detachMediaHandler(handler);\n    };\n  }, [setCurrentRange]);\n\n  return currentRange;\n};\n"]},"metadata":{},"sourceType":"module"}