{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport '@ui5/webcomponents-icons/dist/alert.js';\nimport '@ui5/webcomponents-icons/dist/error.js';\nimport '@ui5/webcomponents-icons/dist/information.js';\nimport '@ui5/webcomponents-icons/dist/slim-arrow-left.js';\nimport '@ui5/webcomponents-icons/dist/sys-enter-2.js';\nimport { useSyncRef, useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { ALL } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { Bar } from '@ui5/webcomponents-react/dist/Bar';\nimport { Button } from '@ui5/webcomponents-react/dist/Button';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';\nimport { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';\nimport { GroupHeaderListItem } from '@ui5/webcomponents-react/dist/GroupHeaderListItem';\nimport { Icon } from '@ui5/webcomponents-react/dist/Icon';\nimport { List } from '@ui5/webcomponents-react/dist/List';\nimport { MessageViewContext } from '@ui5/webcomponents-react/dist/MessageViewContext';\nimport { SegmentedButton } from '@ui5/webcomponents-react/dist/SegmentedButton';\nimport { SegmentedButtonItem } from '@ui5/webcomponents-react/dist/SegmentedButtonItem';\nimport { Title } from '@ui5/webcomponents-react/dist/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';\nimport { ValueState as ValueState$1 } from '@ui5/webcomponents-react/dist/ValueState';\nimport clsx from 'clsx';\nimport React, { useEffect, forwardRef, useState, Children, useCallback, Fragment } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\n\nvar useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {\n  useEffect(function () {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n\nvar ValueState;\n\n(function (ValueState) {\n  ValueState[\"Error\"] = \"Error\";\n  ValueState[\"None\"] = \"None\";\n  ValueState[\"Success\"] = \"Success\";\n  ValueState[\"Warning\"] = \"Warning\";\n  ValueState[\"Information\"] = \"Information\";\n})(ValueState || (ValueState = {}));\n\nvar getIconNameForType = function getIconNameForType(type) {\n  switch (type) {\n    case ValueState.Error:\n    case 'Error':\n      return 'error';\n\n    case ValueState.Success:\n    case 'Success':\n      return 'sys-enter-2';\n\n    case ValueState.Warning:\n    case 'Warning':\n      return 'alert';\n\n    default:\n      return 'information';\n  }\n};\n\nvar _excluded = [\"children\", \"groupItems\", \"showDetailsPageHeader\", \"className\", \"onItemSelect\", \"tooltip\"];\n\nvar resolveMessageTypes = function resolveMessageTypes(children) {\n  var _map$reduce;\n\n  return (children !== null && children !== void 0 ? children : []).map(function (message) {\n    var _message$props;\n\n    return message === null || message === void 0 ? void 0 : (_message$props = message.props) === null || _message$props === void 0 ? void 0 : _message$props.type;\n  }).reduce(function (acc, type) {\n    var finalType = type === ValueState$1.None ? ValueState$1.Information : type;\n\n    if (acc.hasOwnProperty(finalType)) {\n      acc[finalType]++;\n    }\n\n    return acc;\n  }, (_map$reduce = {}, _defineProperty(_map$reduce, ValueState$1.Error, 0), _defineProperty(_map$reduce, ValueState$1.Warning, 0), _defineProperty(_map$reduce, ValueState$1.Success, 0), _defineProperty(_map$reduce, ValueState$1.Information, 0), _map$reduce));\n};\n\nvar resolveMessageGroups = function resolveMessageGroups(children) {\n  var groups = (children !== null && children !== void 0 ? children : []).reduce(function (acc, val) {\n    var _val$props$groupName, _val$props;\n\n    var groupName = (_val$props$groupName = val === null || val === void 0 ? void 0 : (_val$props = val.props) === null || _val$props === void 0 ? void 0 : _val$props.groupName) !== null && _val$props$groupName !== void 0 ? _val$props$groupName : '';\n\n    if (acc.hasOwnProperty(groupName)) {\n      acc[groupName].push(val);\n    } else {\n      acc[groupName] = [val];\n    }\n\n    return acc;\n  }, {});\n  return Object.entries(groups).sort(function (a, b) {\n    return a[0].localeCompare(b[0]);\n  });\n};\n\nvar useStyles = createUseStyles({\n  container: {\n    width: '100%',\n    overflow: 'hidden',\n    display: 'flex',\n    height: 500,\n    '& > *': {\n      width: '100%',\n      flexShrink: 0,\n      transition: 'transform 200ms ease-in-out'\n    }\n  },\n  showDetails: {\n    '& > *': {\n      transform: 'translateX(-100%)'\n    }\n  },\n  button: {\n    '&[data-key=\"Error\"]:not([pressed])': {\n      color: ThemingParameters.sapNegativeElementColor\n    },\n    '&[data-key=\"Warning\"]:not([pressed])': {\n      color: ThemingParameters.sapCriticalElementColor\n    },\n    '&[data-key=\"Success\"]:not([pressed])': {\n      color: ThemingParameters.sapPositiveElementColor\n    },\n    '&[data-key=\"Information\"]:not([pressed])': {\n      color: ThemingParameters.sapNeutralElementColor\n    }\n  },\n  detailsContainer: {\n    padding: '1rem'\n  },\n  detailsIcon: {\n    flexShrink: 0,\n    margin: '0 1rem 0 0.5rem',\n    '&[data-type=\"Error\"]': {\n      color: ThemingParameters.sapNegativeElementColor\n    },\n    '&[data-type=\"Warning\"]': {\n      color: ThemingParameters.sapCriticalElementColor\n    },\n    '&[data-type=\"Success\"]': {\n      color: ThemingParameters.sapPositiveElementColor\n    },\n    '&[data-type=\"Information\"]': {\n      color: ThemingParameters.sapNeutralElementColor\n    }\n  },\n  detailsTitle: {\n    marginBottom: '1rem'\n  },\n  detailsText: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    lineHeight: 1.4,\n    color: ThemingParameters.sapTextColor,\n    marginBottom: '1rem'\n  }\n}, {\n  name: 'MessageView'\n});\nvar MessageView = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      groupItems = props.groupItems,\n      showDetailsPageHeader = props.showDetailsPageHeader,\n      className = props.className,\n      onItemSelect = props.onItemSelect,\n      tooltip = props.tooltip,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  useDeprecationNoticeForTooltip('MessageView', props.tooltip);\n\n  var _useSyncRef = useSyncRef(ref),\n      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),\n      componentRef = _useSyncRef2[0],\n      internalRef = _useSyncRef2[1];\n\n  var classes = useStyles();\n  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  var _useState = useState('All'),\n      _useState2 = _slicedToArray(_useState, 2),\n      listFilter = _useState2[0],\n      setListFilter = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedMessage = _useState4[0],\n      setSelectedMessage = _useState4[1];\n\n  var childrenArray = Children.toArray(children);\n  var messageTypes = resolveMessageTypes(childrenArray);\n  var filledTypes = Object.values(messageTypes).filter(function (count) {\n    return count > 0;\n  }).length;\n  var filteredChildren = listFilter === 'All' ? childrenArray : childrenArray.filter(function (message) {\n    var _message$props4;\n\n    if (listFilter === ValueState$1.Information) {\n      var _message$props2, _message$props3;\n\n      return (message === null || message === void 0 ? void 0 : (_message$props2 = message.props) === null || _message$props2 === void 0 ? void 0 : _message$props2.type) === ValueState$1.Information || (message === null || message === void 0 ? void 0 : (_message$props3 = message.props) === null || _message$props3 === void 0 ? void 0 : _message$props3.type) === ValueState$1.None;\n    }\n\n    return (message === null || message === void 0 ? void 0 : (_message$props4 = message.props) === null || _message$props4 === void 0 ? void 0 : _message$props4.type) === listFilter;\n  });\n  var groupedMessages = resolveMessageGroups(filteredChildren);\n  var navigateBack = useCallback(function () {\n    setSelectedMessage(null);\n  }, [setSelectedMessage]);\n  useEffect(function () {\n    if (internalRef.current) {\n      internalRef.current.navigateBack = navigateBack;\n    }\n  }, [internalRef.current, navigateBack]);\n\n  var handleListFilterChange = function handleListFilterChange(e) {\n    setListFilter(e.detail.selectedItem.dataset.key);\n  };\n\n  var outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: componentRef,\n    title: tooltip\n  }, rest, {\n    className: outerClasses\n  }), /*#__PURE__*/React.createElement(MessageViewContext.Provider, {\n    value: {\n      selectMessage: setSelectedMessage\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", null, filledTypes > 1 && /*#__PURE__*/React.createElement(Bar, {\n    startContent: /*#__PURE__*/React.createElement(SegmentedButton, {\n      onSelectionChange: handleListFilterChange\n    }, /*#__PURE__*/React.createElement(SegmentedButtonItem, {\n      \"data-key\": \"All\",\n      pressed: listFilter === 'All'\n    }, i18nBundle.getText(ALL)), Object.entries(messageTypes).map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 2),\n          valueState = _ref2[0],\n          count = _ref2[1];\n\n      if (count === 0) {\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(SegmentedButtonItem, {\n        key: valueState,\n        \"data-key\": valueState,\n        pressed: listFilter === valueState,\n        icon: getIconNameForType(valueState),\n        className: classes.button\n      }, count);\n    }))\n  }), /*#__PURE__*/React.createElement(List, {\n    onItemClick: onItemSelect\n  }, groupItems ? groupedMessages.map(function (_ref3) {\n    var _ref4 = _slicedToArray(_ref3, 2),\n        groupName = _ref4[0],\n        items = _ref4[1];\n\n    return /*#__PURE__*/React.createElement(Fragment, {\n      key: groupName\n    }, groupName && /*#__PURE__*/React.createElement(GroupHeaderListItem, null, groupName), items);\n  }) : filteredChildren)), /*#__PURE__*/React.createElement(\"div\", null, showDetailsPageHeader && /*#__PURE__*/React.createElement(Bar, {\n    startContent: /*#__PURE__*/React.createElement(Button, {\n      design: ButtonDesign.Transparent,\n      icon: \"slim-arrow-left\",\n      onClick: navigateBack\n    })\n  }), selectedMessage && /*#__PURE__*/React.createElement(FlexBox, {\n    className: classes.detailsContainer\n  }, /*#__PURE__*/React.createElement(Icon, {\n    \"data-type\": selectedMessage.type,\n    name: getIconNameForType(selectedMessage.type),\n    className: classes.detailsIcon\n  }), /*#__PURE__*/React.createElement(FlexBox, {\n    direction: FlexBoxDirection.Column\n  }, /*#__PURE__*/React.createElement(Title, {\n    level: TitleLevel.H5,\n    className: classes.detailsTitle\n  }, selectedMessage.titleText), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.detailsText\n  }, selectedMessage.children))))));\n});\nMessageView.displayName = 'MessageView';\nMessageView.defaultProps = {\n  showDetailsPageHeader: false,\n  groupItems: false\n};\nexport { MessageView, resolveMessageGroups, resolveMessageTypes };","map":{"version":3,"sources":["../src/internal/useDeprecationNotiveForTooltip.ts","../src/enums/ValueState.ts","../src/components/MessageView/utils.ts","../src/components/MessageView/index.tsx"],"names":["useDeprecationNoticeForTooltip","useEffect","deprecationNotice","ValueState","getIconNameForType","resolveMessageTypes","children","message","finalType","type","acc","resolveMessageGroups","groups","groupName","val","a","b","useStyles","createUseStyles","container","width","overflow","display","height","flexShrink","transition","showDetails","transform","button","color","ThemingParameters","sapNegativeElementColor","sapCriticalElementColor","sapPositiveElementColor","sapNeutralElementColor","detailsContainer","padding","detailsIcon","margin","detailsTitle","marginBottom","detailsText","fontFamily","fontSize","lineHeight","name","MessageView","forwardRef","groupItems","showDetailsPageHeader","className","onItemSelect","tooltip","rest","props","componentRef","internalRef","useSyncRef","classes","i18nBundle","useI18nBundle","listFilter","setListFilter","useState","selectedMessage","setSelectedMessage","childrenArray","Children","messageTypes","filledTypes","count","filteredChildren","groupedMessages","navigateBack","useCallback","handleListFilterChange","e","outerClasses","clsx","selectMessage","valueState","items","ButtonDesign","FlexBoxDirection","Column","TitleLevel"],"mappings":"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","sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { useEffect } from 'react';\n\nexport const useDeprecationNoticeForTooltip = (component, tooltip) => {\n  useEffect(() => {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n","export enum ValueState {\n  Error = 'Error',\n  None = 'None',\n  Success = 'Success',\n  Warning = 'Warning',\n  Information = 'Information'\n}\n","import { ValueState } from '../../enums/ValueState';\n\nexport const getIconNameForType = (type: ValueState | keyof typeof ValueState): string => {\n  switch (type) {\n    case ValueState.Error:\n    case 'Error':\n      return 'error';\n    case ValueState.Success:\n    case 'Success':\n      return 'sys-enter-2';\n    case ValueState.Warning:\n    case 'Warning':\n      return 'alert';\n    default:\n      return 'information';\n  }\n};\n","import '@ui5/webcomponents-icons/dist/alert.js';\nimport '@ui5/webcomponents-icons/dist/error.js';\nimport '@ui5/webcomponents-icons/dist/information.js';\nimport '@ui5/webcomponents-icons/dist/slim-arrow-left.js';\nimport '@ui5/webcomponents-icons/dist/sys-enter-2.js';\nimport { useI18nBundle, useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { ALL } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { Bar } from '@ui5/webcomponents-react/dist/Bar';\nimport { Button } from '@ui5/webcomponents-react/dist/Button';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { FlexBox } from '@ui5/webcomponents-react/dist/FlexBox';\nimport { FlexBoxDirection } from '@ui5/webcomponents-react/dist/FlexBoxDirection';\nimport { GroupHeaderListItem } from '@ui5/webcomponents-react/dist/GroupHeaderListItem';\nimport { Icon } from '@ui5/webcomponents-react/dist/Icon';\nimport { List } from '@ui5/webcomponents-react/dist/List';\nimport { MessageViewContext } from '@ui5/webcomponents-react/dist/MessageViewContext';\nimport { SegmentedButton } from '@ui5/webcomponents-react/dist/SegmentedButton';\nimport { SegmentedButtonItem } from '@ui5/webcomponents-react/dist/SegmentedButtonItem';\nimport { Title } from '@ui5/webcomponents-react/dist/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';\nimport { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport clsx from 'clsx';\nimport React, {\n  Children,\n  forwardRef,\n  Fragment,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useCallback,\n  useEffect,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { useDeprecationNoticeForTooltip } from '../../internal/useDeprecationNotiveForTooltip';\nimport type { MessageItemPropTypes } from './MessageItem';\nimport { getIconNameForType } from './utils';\n\nexport interface MessageViewDomRef extends HTMLDivElement {\n  /**\n   * Navigates back to the list page\n   */\n  navigateBack: () => void;\n}\n\nexport interface MessageViewPropTypes extends CommonProps {\n  /**\n   * Defines whether the messages are grouped or not.\n   */\n  groupItems?: boolean;\n\n  /**\n   * Defines whether the header of details page will be shown.\n   */\n  showDetailsPageHeader?: boolean;\n\n  /**\n   * A list with message items. If only one item is provided, the initial page will be the details page for the item.\n   *\n   * * __Note:__ Although this prop accepts all HTML Elements, it is strongly recommended that you only use `Message` in order to preserve the intended design.\n   */\n  children: ReactNode | ReactNode[];\n\n  /**\n   * Event is fired when the details of a message are shown\n   */\n  onItemSelect?: (event: Ui5CustomEvent<HTMLElement, { item: ReactNode }>) => void;\n}\n\nexport const resolveMessageTypes = (children: ReactElement<MessageItemPropTypes>[]) => {\n  return (children ?? [])\n    .map((message) => message?.props?.type)\n    .reduce(\n      (acc, type) => {\n        const finalType = type === ValueState.None ? ValueState.Information : type;\n        if (acc.hasOwnProperty(finalType)) {\n          acc[finalType]++;\n        }\n        return acc;\n      },\n      {\n        [ValueState.Error]: 0,\n        [ValueState.Warning]: 0,\n        [ValueState.Success]: 0,\n        [ValueState.Information]: 0\n      }\n    );\n};\n\nexport const resolveMessageGroups = (children: ReactElement<MessageItemPropTypes>[]) => {\n  const groups = (children ?? []).reduce((acc, val) => {\n    const groupName = val?.props?.groupName ?? '';\n    if (acc.hasOwnProperty(groupName)) {\n      acc[groupName].push(val);\n    } else {\n      acc[groupName] = [val];\n    }\n    return acc;\n  }, {});\n\n  return Object.entries<ReactElement<MessageItemPropTypes>[]>(groups).sort((a, b) => {\n    return a[0].localeCompare(b[0]);\n  });\n};\n\nconst useStyles = createUseStyles(\n  {\n    container: {\n      width: '100%',\n      overflow: 'hidden',\n      display: 'flex',\n      height: 500,\n      '& > *': {\n        width: '100%',\n        flexShrink: 0,\n        transition: 'transform 200ms ease-in-out'\n      }\n    },\n    showDetails: {\n      '& > *': {\n        transform: 'translateX(-100%)'\n      }\n    },\n    button: {\n      '&[data-key=\"Error\"]:not([pressed])': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-key=\"Warning\"]:not([pressed])': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-key=\"Success\"]:not([pressed])': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-key=\"Information\"]:not([pressed])': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsContainer: {\n      padding: '1rem'\n    },\n    detailsIcon: {\n      flexShrink: 0,\n      margin: '0 1rem 0 0.5rem',\n      '&[data-type=\"Error\"]': { color: ThemingParameters.sapNegativeElementColor },\n      '&[data-type=\"Warning\"]': { color: ThemingParameters.sapCriticalElementColor },\n      '&[data-type=\"Success\"]': { color: ThemingParameters.sapPositiveElementColor },\n      '&[data-type=\"Information\"]': { color: ThemingParameters.sapNeutralElementColor }\n    },\n    detailsTitle: {\n      marginBottom: '1rem'\n    },\n    detailsText: {\n      fontFamily: ThemingParameters.sapFontFamily,\n      fontSize: ThemingParameters.sapFontSize,\n      lineHeight: 1.4,\n      color: ThemingParameters.sapTextColor,\n      marginBottom: '1rem'\n    }\n  },\n  { name: 'MessageView' }\n);\n\nconst MessageView = forwardRef((props: MessageViewPropTypes, ref: Ref<MessageViewDomRef>) => {\n  const { children, groupItems, showDetailsPageHeader, className, onItemSelect, tooltip, ...rest } = props;\n\n  useDeprecationNoticeForTooltip('MessageView', props.tooltip);\n\n  const [componentRef, internalRef] = useSyncRef<MessageViewDomRef>(ref);\n\n  const classes = useStyles();\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  const [listFilter, setListFilter] = useState('All');\n  const [selectedMessage, setSelectedMessage] = useState<MessageItemPropTypes>(null);\n\n  const childrenArray = Children.toArray(children);\n  const messageTypes = resolveMessageTypes(childrenArray as ReactElement<MessageItemPropTypes>[]);\n  const filledTypes = Object.values(messageTypes).filter((count) => count > 0).length;\n\n  const filteredChildren =\n    listFilter === 'All'\n      ? childrenArray\n      : childrenArray.filter((message: ReactElement<MessageItemPropTypes>) => {\n          if (listFilter === ValueState.Information) {\n            return message?.props?.type === ValueState.Information || message?.props?.type === ValueState.None;\n          }\n          return message?.props?.type === listFilter;\n        });\n\n  const groupedMessages = resolveMessageGroups(filteredChildren as ReactElement<MessageItemPropTypes>[]);\n\n  const navigateBack = useCallback(() => {\n    setSelectedMessage(null);\n  }, [setSelectedMessage]);\n\n  useEffect(() => {\n    if (internalRef.current) {\n      internalRef.current.navigateBack = navigateBack;\n    }\n  }, [internalRef.current, navigateBack]);\n\n  const handleListFilterChange = (e) => {\n    setListFilter(e.detail.selectedItem.dataset.key);\n  };\n\n  const outerClasses = clsx(classes.container, className, selectedMessage && classes.showDetails);\n\n  return (\n    <div ref={componentRef} title={tooltip} {...rest} className={outerClasses}>\n      <MessageViewContext.Provider\n        value={{\n          selectMessage: setSelectedMessage\n        }}\n      >\n        <div>\n          {filledTypes > 1 && (\n            <Bar\n              startContent={\n                <SegmentedButton onSelectionChange={handleListFilterChange}>\n                  <SegmentedButtonItem data-key=\"All\" pressed={listFilter === 'All'}>\n                    {i18nBundle.getText(ALL)}\n                  </SegmentedButtonItem>\n                  {Object.entries(messageTypes).map(([valueState, count]: [ValueState, number]) => {\n                    if (count === 0) {\n                      return null;\n                    }\n                    return (\n                      <SegmentedButtonItem\n                        key={valueState}\n                        data-key={valueState}\n                        pressed={listFilter === valueState}\n                        icon={getIconNameForType(valueState)}\n                        className={classes.button}\n                      >\n                        {count}\n                      </SegmentedButtonItem>\n                    );\n                  })}\n                </SegmentedButton>\n              }\n            />\n          )}\n          <List onItemClick={onItemSelect}>\n            {groupItems\n              ? groupedMessages.map(([groupName, items]) => {\n                  return (\n                    <Fragment key={groupName}>\n                      {groupName && <GroupHeaderListItem>{groupName}</GroupHeaderListItem>}\n                      {items}\n                    </Fragment>\n                  );\n                })\n              : filteredChildren}\n          </List>\n        </div>\n        <div>\n          {showDetailsPageHeader && (\n            <Bar\n              startContent={<Button design={ButtonDesign.Transparent} icon=\"slim-arrow-left\" onClick={navigateBack} />}\n            />\n          )}\n          {selectedMessage && (\n            <FlexBox className={classes.detailsContainer}>\n              <Icon\n                data-type={selectedMessage.type}\n                name={getIconNameForType(selectedMessage.type)}\n                className={classes.detailsIcon}\n              />\n              <FlexBox direction={FlexBoxDirection.Column}>\n                <Title level={TitleLevel.H5} className={classes.detailsTitle}>\n                  {selectedMessage.titleText}\n                </Title>\n                <div className={classes.detailsText}>{selectedMessage.children}</div>\n              </FlexBox>\n            </FlexBox>\n          )}\n        </div>\n      </MessageViewContext.Provider>\n    </div>\n  );\n});\n\nMessageView.displayName = 'MessageView';\n\nMessageView.defaultProps = {\n  showDetailsPageHeader: false,\n  groupItems: false\n};\n\nexport { MessageView };\n"]},"metadata":{},"sourceType":"module"}