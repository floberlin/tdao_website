{"ast":null,"code":"import _slicedToArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { noChange as t } from \"../lit-html.js\";\nimport { directive as e, Directive as r, PartType as s } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nvar i = e( /*#__PURE__*/function (_r) {\n  _inherits(_class, _r);\n\n  var _super = _createSuper(_class);\n\n  function _class(t) {\n    var _this;\n\n    _classCallCheck(this, _class);\n\n    var e;\n    if (_this = _super.call(this, t), t.type !== s.ATTRIBUTE || \"style\" !== t.name || (null === (e = t.strings) || void 0 === e ? void 0 : e.length) > 2) throw Error(\"The `styleMap` directive must be used in the `style` attribute and must be the only part in the attribute.\");\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(_class, [{\n    key: \"render\",\n    value: function render(t) {\n      return Object.keys(t).reduce(function (e, r) {\n        var s = t[r];\n        return null == s ? e : e + \"\".concat(r = r.replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, \"-$&\").toLowerCase(), \":\").concat(s, \";\");\n      }, \"\");\n    }\n  }, {\n    key: \"update\",\n    value: function update(e, _ref) {\n      var _this2 = this;\n\n      var _ref2 = _slicedToArray(_ref, 1),\n          r = _ref2[0];\n\n      var s = e.element.style;\n\n      if (void 0 === this.St) {\n        this.St = new Set();\n\n        for (var _t in r) {\n          this.St.add(_t);\n        }\n\n        return this.render(r);\n      }\n\n      this.St.forEach(function (t) {\n        null == r[t] && (_this2.St.delete(t), t.includes(\"-\") ? s.removeProperty(t) : s[t] = \"\");\n      });\n\n      for (var _t2 in r) {\n        var _e = r[_t2];\n        null != _e && (this.St.add(_t2), _t2.includes(\"-\") ? s.setProperty(_t2, _e) : s[_t2] = _e);\n      }\n\n      return t;\n    }\n  }]);\n\n  return _class;\n}(r));\nexport { i as styleMap };","map":{"version":3,"sources":["../src/directives/style-map.ts"],"names":["Directive","[object Object]","partInfo","super","type","PartType","ATTRIBUTE","name","strings","length","Error","styleInfo","Object","keys","reduce","style","prop","value","replace","toLowerCase","part","element","this","_previousStyleProperties","undefined","Set","add","render","forEach","delete","includes","removeProperty","setProperty","noChange","styleMap","directive"],"mappings":";;;;;;;;;;;;;;IA8HakC,CAAAA,GAAWC,CApGxB;AAAA;;AAAA;;AAGElC,kBAAYC,CAAZD,EAAYC;AAAAA;;AAAAA;;AAAAA,QAAAA,CAAAA;AAEV,QADAC,0BAAMD,CAANC,GAEED,CAAAA,CAASE,IAATF,KAAkBG,CAAAA,CAASC,SAA3BJ,IACkB,YAAlBA,CAAAA,CAASK,IADTL,IACSK,CAAAA,UAAAA,CAAAA,GACRL,CAAAA,CAASM,OADDD,KACCC,KAAAA,CAAAA,KAAAA,CADDD,GACCC,KAAAA,CADDD,GACCC,CAAAA,CAASC,MADVF,IAC8B,CAHzC,EAKE,MAAUG,KAAAA,CACR,4GADQA,CAAV;AAPQR;AAcZD;;AAjBF;AAAA;AAAA,WAiBEA,gBAAOU,CAAPV,EAAOU;AACL,aAAOC,MAAAA,CAAOC,IAAPD,CAAYD,CAAZC,EAAuBE,MAAvBF,CAA8B,UAACG,CAAD,EAAQC,CAAR,EAAQA;AAC3C,YAAMC,CAAAA,GAAQN,CAAAA,CAAUK,CAAVL,CAAd;AACA,eAAa,QAATM,CAAS,GACJF,CADI,GAaNA,CAAAA,aAHPC,CAAAA,GAAOA,CAAAA,CACJE,OADIF,CACI,mCADJA,EACyC,KADzCA,EAEJG,WAFIH,EAGAD,cAAmBE,CAAnBF,MAbP;AAa0BE,OAfrBL,EAgBJ,EAhBIA,CAAP;AAmBFX;AArCF;AAAA;AAAA,WAqCEA,gBAAOmB,CAAPnB,QAA6BU;AAAAA;;AAAAA;AAAAA,UAAAA,CAAAA;;AAC3B,UAAOI,CAAP,GAAgBK,CAAAA,CAAKC,OAArB,CAAMN,KAAN;;AAEA,UAAA,KAAsCS,CAAtC,KAAIF,KAAKC,EAAT,EAAiD;AAC/CD,aAAKC,EAALD,GAAgC,IAAIG,GAAJ,EAAhCH;;AACA,aAAK,IAAMf,EAAX,IAAmBI,CAAnB;AACEW,eAAKC,EAALD,CAA8BI,GAA9BJ,CAAkCf,EAAlCe;AADF;;AAGA,eAAOA,KAAKK,MAALL,CAAYX,CAAZW,CAAP;AAMFA;;AAAAA,WAAKC,EAALD,CAA+BM,OAA/BN,CAAwCf,UAAAA,CAAAA,EAAAA;AAEf,gBAAnBI,CAAAA,CAAUJ,CAAVI,CAAmB,KACrBW,MAAAA,CAAKC,EAALD,CAA+BO,MAA/BP,CAAsCf,CAAtCe,GACIf,CAAAA,CAAKuB,QAALvB,CAAc,GAAdA,IACFQ,CAAAA,CAAMgB,cAANhB,CAAqBR,CAArBQ,CADER,GAMDQ,CAAAA,CAAcR,CAAdQ,CAAAA,GAAsB,EARJ;AAQI,OAV7BO;;AAgBA,WAAK,IAAMf,GAAX,IAAmBI,CAAnB,EAA8B;AAC5B,YAAMM,EAAAA,GAAQN,CAAAA,CAAUJ,GAAVI,CAAd;AACa,gBAATM,EAAS,KACXK,KAAKC,EAALD,CAA8BI,GAA9BJ,CAAkCf,GAAlCe,GACIf,GAAAA,CAAKuB,QAALvB,CAAc,GAAdA,IACFQ,CAAAA,CAAMiB,WAANjB,CAAkBR,GAAlBQ,EAAwBE,EAAxBF,CADER,GAIDQ,CAAAA,CAAcR,GAAdQ,CAAAA,GAAsBE,EANd;AAUf;;AAAA,aAAOgB,CAAP;AAAOA;AA/EX;;AAAA;AAAA,EAAgCjC,CAAhC,E;AA+EWiC,SAAAA,CAAAA,IAAAA,QAAAA","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of CSS properties and values.\n *\n * The key should be either a valid CSS property name string, like\n * `'background-color'`, or a valid JavaScript camel case property name\n * for CSSStyleDeclaration like `backgroundColor`.\n */\nexport interface StyleInfo {\n  readonly [name: string]: string | undefined | null;\n}\n\nclass StyleMapDirective extends Directive {\n  _previousStyleProperties?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'style' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        'The `styleMap` directive must be used in the `style` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(styleInfo: StyleInfo) {\n    return Object.keys(styleInfo).reduce((style, prop) => {\n      const value = styleInfo[prop];\n      if (value == null) {\n        return style;\n      }\n      // Convert property names from camel-case to dash-case, i.e.:\n      //  `backgroundColor` -> `background-color`\n      // Vendor-prefixed names need an extra `-` appended to front:\n      //  `webkitAppearance` -> `-webkit-appearance`\n      // Exception is any property name containing a dash, including\n      // custom properties; we assume these are already dash-cased i.e.:\n      //  `--my-button-color` --> `--my-button-color`\n      prop = prop\n        .replace(/(?:^(webkit|moz|ms|o)|)(?=[A-Z])/g, '-$&')\n        .toLowerCase();\n      return style + `${prop}:${value};`;\n    }, '');\n  }\n\n  update(part: AttributePart, [styleInfo]: DirectiveParameters<this>) {\n    const {style} = part.element as HTMLElement;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      }\n      return this.render(styleInfo);\n    }\n\n    // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n    this._previousStyleProperties!.forEach((name) => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties!.delete(name);\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = '';\n        }\n      }\n    });\n\n    // Add or update properties\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n        if (name.includes('-')) {\n          style.setProperty(name, value);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          (style as any)[name] = value;\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies CSS properties to an element.\n *\n * `styleMap` can only be used in the `style` attribute and must be the only\n * expression in the attribute. It takes the property names in the `styleInfo`\n * object and adds the property values as CSS properties. Property names with\n * dashes (`-`) are assumed to be valid CSS property names and set on the\n * element's style object using `setProperty()`. Names without dashes are\n * assumed to be camelCased JavaScript property names and set on the element's\n * style object using property assignment, allowing the style object to\n * translate JavaScript-style names to CSS property names.\n *\n * For example `styleMap({backgroundColor: 'red', 'border-top': '5px', '--size':\n * '0'})` sets the `background-color`, `border-top` and `--size` properties.\n *\n * @param styleInfo\n */\nexport const styleMap = directive(StyleMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {StyleMapDirective};\n"]},"metadata":{},"sourceType":"module"}