{"ast":null,"code":"import { registerI18nLoader, fetchI18nBundle, getI18nBundleData } from \"./asset-registries/i18n.js\";\nimport formatMessage from \"./util/formatMessage.js\";\nconst I18nBundleInstances = new Map();\n/**\n * @class\n * @public\n */\n\nclass I18nBundle {\n  constructor(packageName) {\n    this.packageName = packageName;\n  }\n  /**\n   * Returns a text in the currently loaded language\n   *\n   * @param {Object|String} textObj key/defaultText pair or just the key\n   * @param params Values for the placeholders\n   * @returns {*}\n   */\n\n\n  getText(textObj, ...params) {\n    if (typeof textObj === \"string\") {\n      textObj = {\n        key: textObj,\n        defaultText: textObj\n      };\n    }\n\n    if (!textObj || !textObj.key) {\n      return \"\";\n    }\n\n    const bundle = getI18nBundleData(this.packageName);\n\n    if (bundle && !bundle[textObj.key]) {\n      console.warn(`Key ${textObj.key} not found in the i18n bundle, the default text will be used`); // eslint-disable-line\n    }\n\n    const messageText = bundle && bundle[textObj.key] ? bundle[textObj.key] : textObj.defaultText || textObj.key;\n    return formatMessage(messageText, params);\n  }\n\n}\n\nconst getI18nBundle = packageName => {\n  if (I18nBundleInstances.has(packageName)) {\n    return I18nBundleInstances.get(packageName);\n  }\n\n  const i18nBundle = new I18nBundle(packageName);\n  I18nBundleInstances.set(packageName, i18nBundle);\n  return i18nBundle;\n};\n\nexport { registerI18nLoader, fetchI18nBundle, getI18nBundle };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/i18nBundle.js"],"names":["registerI18nLoader","fetchI18nBundle","getI18nBundleData","formatMessage","I18nBundleInstances","Map","I18nBundle","constructor","packageName","getText","textObj","params","key","defaultText","bundle","console","warn","messageText","getI18nBundle","has","get","i18nBundle","set"],"mappings":"AAAA,SAASA,kBAAT,EAA6BC,eAA7B,EAA8CC,iBAA9C,QAAuE,4BAAvE;AACA,OAAOC,aAAP,MAA0B,yBAA1B;AAEA,MAAMC,mBAAmB,GAAG,IAAIC,GAAJ,EAA5B;AAEA;AACA;AACA;AACA;;AACA,MAAMC,UAAN,CAAiB;AAChBC,EAAAA,WAAW,CAACC,WAAD,EAAc;AACxB,SAAKA,WAAL,GAAmBA,WAAnB;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,OAAO,CAACC,OAAD,EAAU,GAAGC,MAAb,EAAqB;AAC3B,QAAI,OAAOD,OAAP,KAAmB,QAAvB,EAAiC;AAChCA,MAAAA,OAAO,GAAG;AAAEE,QAAAA,GAAG,EAAEF,OAAP;AAAgBG,QAAAA,WAAW,EAAEH;AAA7B,OAAV;AACA;;AAED,QAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACE,GAAzB,EAA8B;AAC7B,aAAO,EAAP;AACA;;AAED,UAAME,MAAM,GAAGZ,iBAAiB,CAAC,KAAKM,WAAN,CAAhC;;AACA,QAAIM,MAAM,IAAI,CAACA,MAAM,CAACJ,OAAO,CAACE,GAAT,CAArB,EAAoC;AACnCG,MAAAA,OAAO,CAACC,IAAR,CAAc,OAAMN,OAAO,CAACE,GAAI,8DAAhC,EADmC,CAC6D;AAChG;;AACD,UAAMK,WAAW,GAAGH,MAAM,IAAIA,MAAM,CAACJ,OAAO,CAACE,GAAT,CAAhB,GAAgCE,MAAM,CAACJ,OAAO,CAACE,GAAT,CAAtC,GAAuDF,OAAO,CAACG,WAAR,IAAuBH,OAAO,CAACE,GAA1G;AAEA,WAAOT,aAAa,CAACc,WAAD,EAAcN,MAAd,CAApB;AACA;;AA5Be;;AA+BjB,MAAMO,aAAa,GAAGV,WAAW,IAAI;AACpC,MAAIJ,mBAAmB,CAACe,GAApB,CAAwBX,WAAxB,CAAJ,EAA0C;AACzC,WAAOJ,mBAAmB,CAACgB,GAApB,CAAwBZ,WAAxB,CAAP;AACA;;AAED,QAAMa,UAAU,GAAG,IAAIf,UAAJ,CAAeE,WAAf,CAAnB;AACAJ,EAAAA,mBAAmB,CAACkB,GAApB,CAAwBd,WAAxB,EAAqCa,UAArC;AACA,SAAOA,UAAP;AACA,CARD;;AAUA,SACCrB,kBADD,EAECC,eAFD,EAGCiB,aAHD","sourcesContent":["import { registerI18nLoader, fetchI18nBundle, getI18nBundleData } from \"./asset-registries/i18n.js\";\nimport formatMessage from \"./util/formatMessage.js\";\n\nconst I18nBundleInstances = new Map();\n\n/**\n * @class\n * @public\n */\nclass I18nBundle {\n\tconstructor(packageName) {\n\t\tthis.packageName = packageName;\n\t}\n\n\t/**\n\t * Returns a text in the currently loaded language\n\t *\n\t * @param {Object|String} textObj key/defaultText pair or just the key\n\t * @param params Values for the placeholders\n\t * @returns {*}\n\t */\n\tgetText(textObj, ...params) {\n\t\tif (typeof textObj === \"string\") {\n\t\t\ttextObj = { key: textObj, defaultText: textObj };\n\t\t}\n\n\t\tif (!textObj || !textObj.key) {\n\t\t\treturn \"\";\n\t\t}\n\n\t\tconst bundle = getI18nBundleData(this.packageName);\n\t\tif (bundle && !bundle[textObj.key]) {\n\t\t\tconsole.warn(`Key ${textObj.key} not found in the i18n bundle, the default text will be used`); // eslint-disable-line\n\t\t}\n\t\tconst messageText = bundle && bundle[textObj.key] ? bundle[textObj.key] : (textObj.defaultText || textObj.key);\n\n\t\treturn formatMessage(messageText, params);\n\t}\n}\n\nconst getI18nBundle = packageName => {\n\tif (I18nBundleInstances.has(packageName)) {\n\t\treturn I18nBundleInstances.get(packageName);\n\t}\n\n\tconst i18nBundle = new I18nBundle(packageName);\n\tI18nBundleInstances.set(packageName, i18nBundle);\n\treturn i18nBundle;\n};\n\nexport {\n\tregisterI18nLoader,\n\tfetchI18nBundle,\n\tgetI18nBundle,\n};\n"]},"metadata":{},"sourceType":"module"}