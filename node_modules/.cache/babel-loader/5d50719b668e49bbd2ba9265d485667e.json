{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport Result from '../Result';\nimport OneDReader from './OneDReader';\nimport EAN13Reader from './EAN13Reader';\nimport EAN8Reader from './EAN8Reader';\nimport UPCAReader from './UPCAReader';\nimport NotFoundException from '../NotFoundException';\nimport UPCEReader from './UPCEReader';\n/**\n * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\n * read all such formats, it is most efficient to use this implementation rather than invoke\n * individual readers.</p>\n *\n * @author Sean Owen\n */\n\nvar MultiFormatUPCEANReader = function (_super) {\n  __extends(MultiFormatUPCEANReader, _super);\n\n  function MultiFormatUPCEANReader(hints) {\n    var _this = _super.call(this) || this;\n\n    var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n    var readers = [];\n\n    if (possibleFormats != null) {\n      if (possibleFormats.indexOf(BarcodeFormat.EAN_13) > -1) {\n        readers.push(new EAN13Reader());\n      } else if (possibleFormats.indexOf(BarcodeFormat.UPC_A) > -1) {\n        readers.push(new UPCAReader());\n      }\n\n      if (possibleFormats.indexOf(BarcodeFormat.EAN_8) > -1) {\n        readers.push(new EAN8Reader());\n      }\n\n      if (possibleFormats.indexOf(BarcodeFormat.UPC_E) > -1) {\n        readers.push(new UPCEReader());\n      }\n    }\n\n    if (readers.length === 0) {\n      readers.push(new EAN13Reader()); // UPC-A is covered by EAN-13\n\n      readers.push(new EAN8Reader());\n      readers.push(new UPCEReader());\n    }\n\n    _this.readers = readers;\n    return _this;\n  }\n\n  MultiFormatUPCEANReader.prototype.decodeRow = function (rowNumber, row, hints) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n\n        try {\n          // const result: Result = reader.decodeRow(rowNumber, row, startGuardPattern, hints);\n          var result = reader.decodeRow(rowNumber, row, hints); // Special case: a 12-digit code encoded in UPC-A is identical to a \"0\"\n          // followed by those 12 digits encoded as EAN-13. Each will recognize such a code,\n          // UPC-A as a 12-digit string and EAN-13 as a 13-digit string starting with \"0\".\n          // Individually these are correct and their readers will both read such a code\n          // and correctly call it EAN-13, or UPC-A, respectively.\n          //\n          // In this case, if we've been looking for both types, we'd like to call it\n          // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read\n          // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A\n          // result if appropriate.\n          //\n          // But, don't return UPC-A if UPC-A was not a requested format!\n\n          var ean13MayBeUPCA = result.getBarcodeFormat() === BarcodeFormat.EAN_13 && result.getText().charAt(0) === '0'; // @SuppressWarnings(\"unchecked\")\n\n          var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n          var canReturnUPCA = possibleFormats == null || possibleFormats.includes(BarcodeFormat.UPC_A);\n\n          if (ean13MayBeUPCA && canReturnUPCA) {\n            var rawBytes = result.getRawBytes(); // Transfer the metadata across\n\n            var resultUPCA = new Result(result.getText().substring(1), rawBytes, rawBytes.length, result.getResultPoints(), BarcodeFormat.UPC_A);\n            resultUPCA.putAllMetadata(result.getResultMetadata());\n            return resultUPCA;\n          }\n\n          return result;\n        } catch (err) {// continue;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    throw new NotFoundException();\n  };\n\n  MultiFormatUPCEANReader.prototype.reset = function () {\n    var e_2, _a;\n\n    try {\n      for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var reader = _c.value;\n        reader.reset();\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n  };\n\n  return MultiFormatUPCEANReader;\n}(OneDReader);\n\nexport default MultiFormatUPCEANReader;","map":{"version":3,"sources":["../../../../src/core/oned/MultiFormatUPCEANReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport Result from '../Result';\nimport OneDReader from './OneDReader';\nimport EAN13Reader from './EAN13Reader';\nimport EAN8Reader from './EAN8Reader';\nimport UPCAReader from './UPCAReader';\nimport NotFoundException from '../NotFoundException';\nimport UPCEReader from './UPCEReader';\n/**\n * <p>A reader that can read all available UPC/EAN formats. If a caller wants to try to\n * read all such formats, it is most efficient to use this implementation rather than invoke\n * individual readers.</p>\n *\n * @author Sean Owen\n */\nvar MultiFormatUPCEANReader = /** @class */ (function (_super) {\n    __extends(MultiFormatUPCEANReader, _super);\n    function MultiFormatUPCEANReader(hints) {\n        var _this = _super.call(this) || this;\n        var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n        var readers = [];\n        if (possibleFormats != null) {\n            if (possibleFormats.indexOf(BarcodeFormat.EAN_13) > -1) {\n                readers.push(new EAN13Reader());\n            }\n            else if (possibleFormats.indexOf(BarcodeFormat.UPC_A) > -1) {\n                readers.push(new UPCAReader());\n            }\n            if (possibleFormats.indexOf(BarcodeFormat.EAN_8) > -1) {\n                readers.push(new EAN8Reader());\n            }\n            if (possibleFormats.indexOf(BarcodeFormat.UPC_E) > -1) {\n                readers.push(new UPCEReader());\n            }\n        }\n        if (readers.length === 0) {\n            readers.push(new EAN13Reader());\n            // UPC-A is covered by EAN-13\n            readers.push(new EAN8Reader());\n            readers.push(new UPCEReader());\n        }\n        _this.readers = readers;\n        return _this;\n    }\n    MultiFormatUPCEANReader.prototype.decodeRow = function (rowNumber, row, hints) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var reader = _c.value;\n                try {\n                    // const result: Result = reader.decodeRow(rowNumber, row, startGuardPattern, hints);\n                    var result = reader.decodeRow(rowNumber, row, hints);\n                    // Special case: a 12-digit code encoded in UPC-A is identical to a \"0\"\n                    // followed by those 12 digits encoded as EAN-13. Each will recognize such a code,\n                    // UPC-A as a 12-digit string and EAN-13 as a 13-digit string starting with \"0\".\n                    // Individually these are correct and their readers will both read such a code\n                    // and correctly call it EAN-13, or UPC-A, respectively.\n                    //\n                    // In this case, if we've been looking for both types, we'd like to call it\n                    // a UPC-A code. But for efficiency we only run the EAN-13 decoder to also read\n                    // UPC-A. So we special case it here, and convert an EAN-13 result to a UPC-A\n                    // result if appropriate.\n                    //\n                    // But, don't return UPC-A if UPC-A was not a requested format!\n                    var ean13MayBeUPCA = result.getBarcodeFormat() === BarcodeFormat.EAN_13 &&\n                        result.getText().charAt(0) === '0';\n                    // @SuppressWarnings(\"unchecked\")\n                    var possibleFormats = hints == null ? null : hints.get(DecodeHintType.POSSIBLE_FORMATS);\n                    var canReturnUPCA = possibleFormats == null || possibleFormats.includes(BarcodeFormat.UPC_A);\n                    if (ean13MayBeUPCA && canReturnUPCA) {\n                        var rawBytes = result.getRawBytes();\n                        // Transfer the metadata across\n                        var resultUPCA = new Result(result.getText().substring(1), rawBytes, rawBytes.length, result.getResultPoints(), BarcodeFormat.UPC_A);\n                        resultUPCA.putAllMetadata(result.getResultMetadata());\n                        return resultUPCA;\n                    }\n                    return result;\n                }\n                catch (err) {\n                    // continue;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        throw new NotFoundException();\n    };\n    MultiFormatUPCEANReader.prototype.reset = function () {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this.readers), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var reader = _c.value;\n                reader.reset();\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    return MultiFormatUPCEANReader;\n}(OneDReader));\nexport default MultiFormatUPCEANReader;\n//# sourceMappingURL=MultiFormatUPCEANReader.js.map"]},"metadata":{},"sourceType":"module"}