{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as i, Directive as s, PartType as r } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst o = i(class extends s {\n  constructor(t) {\n    var i;\n    if (super(t), t.type !== r.ATTRIBUTE || \"class\" !== t.name || (null === (i = t.strings) || void 0 === i ? void 0 : i.length) > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n  }\n\n  render(t) {\n    return \" \" + Object.keys(t).filter(i => t[i]).join(\" \") + \" \";\n  }\n\n  update(i, [s]) {\n    var r, o;\n\n    if (void 0 === this.st) {\n      this.st = new Set(), void 0 !== i.strings && (this.et = new Set(i.strings.join(\" \").split(/\\s/).filter(t => \"\" !== t)));\n\n      for (const t in s) s[t] && !(null === (r = this.et) || void 0 === r ? void 0 : r.has(t)) && this.st.add(t);\n\n      return this.render(s);\n    }\n\n    const e = i.element.classList;\n    this.st.forEach(t => {\n      t in s || (e.remove(t), this.st.delete(t));\n    });\n\n    for (const t in s) {\n      const i = !!s[t];\n      i === this.st.has(t) || (null === (o = this.et) || void 0 === o ? void 0 : o.has(t)) || (i ? (e.add(t), this.st.add(t)) : (e.remove(t), this.st.delete(t)));\n    }\n\n    return t;\n  }\n\n});\nexport { o as classMap };","map":{"version":3,"sources":["../src/directives/class-map.ts"],"names":["Directive","constructor","partInfo","super","type","PartType","ATTRIBUTE","name","strings","length","Error","render","classInfo","Object","keys","filter","key","join","update","part","this","_previousClasses","undefined","Set","_staticClasses","split","s","has","add","classList","element","forEach","remove","delete","value","noChange","classMap","directive"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n  private _staticClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    // Add spaces to ensure separation from static classes\n    return (\n      ' ' +\n      Object.keys(classInfo)\n        .filter((key) => classInfo[key])\n        .join(' ') +\n      ' '\n    );\n  }\n\n  override update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      if (part.strings !== undefined) {\n        this._staticClasses = new Set(\n          part.strings\n            .join(' ')\n            .split(/\\s/)\n            .filter((s) => s !== '')\n        );\n      }\n      for (const name in classInfo) {\n        if (classInfo[name] && !this._staticClasses?.has(name)) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (\n        value !== this._previousClasses.has(name) &&\n        !this._staticClasses?.has(name)\n      ) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"]},"metadata":{},"sourceType":"module"}