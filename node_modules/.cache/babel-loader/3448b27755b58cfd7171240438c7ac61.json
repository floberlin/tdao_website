{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport { getEffectiveScopingSuffixForTag } from '@ui5/webcomponents-base/dist/CustomElementsScope';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/dist/useConsolidatedRef';\nimport React, { forwardRef, useRef, useEffect, Children, cloneElement } from 'react';\nvar _excluded = [\"className\", \"tooltip\", \"children\"];\n\nvar capitalizeFirstLetter = function capitalizeFirstLetter(s) {\n  return s.charAt(0).toUpperCase() + s.slice(1);\n};\n\nvar camelToKebabCase = function camelToKebabCase(s) {\n  return s.replace(/([A-Z])/g, function (a, b) {\n    return \"-\".concat(b.toLowerCase());\n  });\n};\n\nvar kebabToCamelCase = function kebabToCamelCase(str) {\n  return str.replace(/([-_]\\w)/g, function (g) {\n    return g[1].toUpperCase();\n  });\n};\n\nvar createEventPropName = function createEventPropName(eventName) {\n  return \"on\".concat(capitalizeFirstLetter(kebabToCamelCase(eventName)));\n};\n\nvar withWebComponent = function withWebComponent(tagName, regularProperties, booleanProperties, slotProperties, eventProperties) {\n  var WithWebComponent = /*#__PURE__*/forwardRef(function (props, wcRef) {\n    var className = props.className,\n        tooltip = props.tooltip,\n        children = props.children,\n        rest = _objectWithoutProperties(props, _excluded);\n\n    var ref = useConsolidatedRef(wcRef);\n    var eventRegistry = useRef({}); // regular props (no booleans, no slots and no events)\n\n    var regularProps = regularProperties.reduce(function (acc, name) {\n      if (rest.hasOwnProperty(name)) {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), rest[name]));\n      }\n\n      return acc;\n    }, {}); // boolean properties - only attach if they are truthy\n\n    var booleanProps = booleanProperties.reduce(function (acc, name) {\n      if (rest[name] === true || rest[name] === 'true') {\n        return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, camelToKebabCase(name), true));\n      }\n\n      return acc;\n    }, {});\n    var slots = slotProperties.reduce(function (acc, name) {\n      var slotValue = rest[name];\n      if (!slotValue) return acc;\n      var slottedChildren = [];\n      var index = 0;\n\n      var removeFragments = function removeFragments(element) {\n        if (!element) return;\n\n        if (element.type === React.Fragment) {\n          var _element$props;\n\n          Children.toArray((_element$props = element.props) === null || _element$props === void 0 ? void 0 : _element$props.children).filter(Boolean).forEach(function (item) {\n            removeFragments(item);\n          });\n        } else {\n          slottedChildren.push( /*#__PURE__*/cloneElement(element, {\n            key: \"\".concat(name, \"-\").concat(index),\n            slot: name\n          }));\n          index++;\n        }\n      };\n\n      if (Array.isArray(slotValue)) {\n        slotValue.forEach(function (item) {\n          removeFragments(item);\n        });\n      } else {\n        removeFragments(slotValue);\n      }\n\n      return [].concat(_toConsumableArray(acc), slottedChildren);\n    }, []); // event binding\n\n    useEffect(function () {\n      eventProperties.forEach(function (eventName) {\n        var eventHandler = rest[createEventPropName(eventName)];\n\n        if (typeof eventHandler === 'function') {\n          eventRegistry.current[eventName] = eventHandler;\n          ref.current.addEventListener(eventName, eventRegistry.current[eventName]);\n        }\n      });\n      return function () {\n        // eslint-disable-next-line guard-for-in\n        for (var eventName in eventRegistry.current) {\n          var _ref$current;\n\n          (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.removeEventListener(eventName, eventRegistry.current[eventName]);\n        }\n      };\n    }, eventProperties.map(function (eventName) {\n      return rest[createEventPropName(eventName)];\n    })); // non web component related props, just pass them\n\n    var nonWebComponentRelatedProps = Object.entries(rest).filter(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          key = _ref2[0];\n\n      return !regularProperties.includes(key);\n    }).filter(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 1),\n          key = _ref4[0];\n\n      return !slotProperties.includes(key);\n    }).filter(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 1),\n          key = _ref6[0];\n\n      return !booleanProperties.includes(key);\n    }).filter(function (_ref7) {\n      var _ref8 = _slicedToArray(_ref7, 1),\n          key = _ref8[0];\n\n      return !eventProperties.map(function (eventName) {\n        return createEventPropName(eventName);\n      }).includes(key);\n    }).reduce(function (acc, _ref9) {\n      var _ref10 = _slicedToArray(_ref9, 2),\n          key = _ref10[0],\n          val = _ref10[1];\n\n      return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, key, val));\n    }, {});\n    var tagNameSuffix = getEffectiveScopingSuffixForTag(tagName);\n    var Component = tagNameSuffix ? \"\".concat(tagName, \"-\").concat(tagNameSuffix) : tagName;\n    return /*#__PURE__*/React.createElement(Component, _extends({\n      ref: ref\n    }, booleanProps, regularProps, nonWebComponentRelatedProps, {\n      class: className,\n      title: tooltip\n    }), slots, children);\n  });\n  WithWebComponent.displayName = \"WithWebComponent(\".concat(tagName, \")\");\n  return WithWebComponent;\n};\n\nexport { withWebComponent };","map":{"version":3,"sources":["../src/internal/withWebComponent.tsx"],"names":["capitalizeFirstLetter","s","camelToKebabCase","b","kebabToCamelCase","g","createEventPropName","withWebComponent","WithWebComponent","forwardRef","className","tooltip","children","rest","props","ref","useConsolidatedRef","eventRegistry","useRef","regularProps","booleanProps","slots","slotValue","slottedChildren","index","removeFragments","element","React","Children","cloneElement","key","slot","name","Array","useEffect","eventProperties","eventHandler","nonWebComponentRelatedProps","regularProperties","slotProperties","booleanProperties","val","tagNameSuffix","getEffectiveScopingSuffixForTag","Component"],"mappings":";;;;;;;;;;;AAeA,IAAMA,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAA,CAAA,EAAA;AAAA,SAAeC,CAAC,CAADA,MAAAA,CAAAA,CAAAA,EAAAA,WAAAA,KAA4BA,CAAC,CAADA,KAAAA,CAA3C,CAA2CA,CAA3C;AAA9B,CAAA;;AAEA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,CAAA,EAAA;AAAA,SAAe,CAAC,CAAD,OAAA,CAAA,UAAA,EAAsB,UAAA,CAAA,EAAA,CAAA,EAAA;AAAA,WAAA,IAAA,MAAA,CAAsBC,CAAC,CAAvB,WAAsBA,EAAtB,CAAA;AAArC,GAAe,CAAf;AAAzB,CAAA;;AACA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,GAAA,EAAA;AAAA,SAAiB,GAAG,CAAH,OAAA,CAAA,WAAA,EAAyB,UAAA,CAAA,EAAA;AAAA,WAAOC,CAAC,CAADA,CAAC,CAADA,CAAP,WAAOA,EAAP;AAA1C,GAAiB,CAAjB;AAAzB,CAAA;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAA,SAAA,EAAA;AAAA,SAAA,KAAA,MAAA,CAAoBN,qBAAqB,CAACI,gBAAgB,CAA1D,SAA0D,CAAjB,CAAzC,CAAA;AAA5B,CAAA;;IAIaG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAA,OAAA,EAAA,iBAAA,EAAA,iBAAA,EAAA,cAAA,EAAA,eAAA,EAM3B;AACH,MAAMC,gBAAgB,GAAA,aAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,KAAA,EAA6C;AAC/E,QAAQC,SAAR,GAAkDI,KAAlD,CAAA,SAAA;AAAA,QAAmBH,OAAnB,GAAkDG,KAAlD,CAAA,OAAA;AAAA,QAA4BF,QAA5B,GAAkDE,KAAlD,CAAA,QAAA;AAAA,QAAyCD,IAAzC,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA,QAAME,GAAG,GAAGC,kBAAkB,CAA9B,KAA8B,CAA9B;AACA,QAAMC,aAAa,GAAGC,MAAM,CAJmD,EAInD,CAA5B,CAJ+E,CAAA;;AAO/E,QAAMC,YAAY,GAAG,iBAAiB,CAAjB,MAAA,CAAyB,UAAA,GAAA,EAAA,IAAA,EAAe;AAC3D,UAAIN,IAAI,CAAJA,cAAAA,CAAJ,IAAIA,CAAJ,EAA+B;AAC7B,eAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,eAAA,CAAA,EAAA,EAAkBX,gBAAgB,CAAlC,IAAkC,CAAlC,EAA2CW,IAAI,CAA/C,IAA+C,CAA/C,CAAA,CAAA;AACD;;AACD,aAAA,GAAA;AAJmB,KAAA,EAP0D,EAO1D,CAArB,CAP+E,CAAA;;AAe/E,QAAMO,YAAY,GAAG,iBAAiB,CAAjB,MAAA,CAAyB,UAAA,GAAA,EAAA,IAAA,EAAe;AAC3D,UAAIP,IAAI,CAAJA,IAAI,CAAJA,KAAAA,IAAAA,IAAuBA,IAAI,CAAJA,IAAI,CAAJA,KAA3B,MAAA,EAAkD;AAChD,eAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,eAAA,CAAA,EAAA,EAAkBX,gBAAgB,CAAlC,IAAkC,CAAlC,EAAA,IAAA,CAAA,CAAA;AACD;;AACD,aAAA,GAAA;AAJmB,KAAA,EAArB,EAAqB,CAArB;AAOA,QAAMmB,KAAK,GAAG,cAAc,CAAd,MAAA,CAAsB,UAAA,GAAA,EAAA,IAAA,EAAe;AACjD,UAAMC,SAAS,GAAGT,IAAI,CAAtB,IAAsB,CAAtB;AAEA,UAAI,CAAJ,SAAA,EAAgB,OAAA,GAAA;AAEhB,UAAMU,eAAe,GAArB,EAAA;AACA,UAAIC,KAAK,GAAT,CAAA;;AACA,UAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAA,OAAA,EAAa;AACnC,YAAI,CAAJ,OAAA,EAAc;;AACd,YAAIC,OAAO,CAAPA,IAAAA,KAAiBC,KAAK,CAA1B,QAAA,EAAqC;AAAA,cAAA,cAAA;;AACnCC,UAAAA,QAAQ,CAARA,OAAAA,CAAAA,CAAAA,cAAAA,GAAiBF,OAAO,CAAxBE,KAAAA,MAAAA,IAAAA,IAAAA,cAAAA,KAAAA,KAAAA,CAAAA,GAAAA,KAAAA,CAAAA,GAAiBF,cAAAA,CAAjBE,QAAAA,EAAAA,MAAAA,CAAAA,OAAAA,EAAAA,OAAAA,CAEW,UAAA,IAAA,EAAU;AACjBH,YAAAA,eAAe,CAAfA,IAAe,CAAfA;AAHJG,WAAAA;AADF,SAAA,MAMO;AACLL,UAAAA,eAAe,CAAfA,IAAAA,EAAAA,aACEM,YAAY,CAAA,OAAA,EAAU;AACpBC,YAAAA,GAAG,EAAA,GAAA,MAAA,CAAA,IAAA,EAAA,GAAA,EAAA,MAAA,CADiB,KACjB,CADiB;AAEpBC,YAAAA,IAAI,EAAEC;AAFc,WAAV,CADdT;AAMAC,UAAAA,KAAK;AACN;AAhBH,OAAA;;AAmBA,UAAIS,KAAK,CAALA,OAAAA,CAAJ,SAAIA,CAAJ,EAA8B;AAC5BX,QAAAA,SAAS,CAATA,OAAAA,CAAkB,UAAA,IAAA,EAAU;AAC1BG,UAAAA,eAAe,CAAfA,IAAe,CAAfA;AADFH,SAAAA;AADF,OAAA,MAIO;AACLG,QAAAA,eAAe,CAAfA,SAAe,CAAfA;AACD;;AACD,aAAA,GAAA,MAAA,CAAA,kBAAA,CAAA,GAAA,CAAA,EAAA,eAAA,CAAA;AAjCY,KAAA,EAtBiE,EAsBjE,CAAd,CAtB+E,CAAA;;AA0D/ES,IAAAA,SAAS,CACP,YAAM;AACJC,MAAAA,eAAe,CAAfA,OAAAA,CAAwB,UAAA,SAAA,EAAe;AACrC,YAAMC,YAAY,GAAGvB,IAAI,CAACP,mBAAmB,CAA7C,SAA6C,CAApB,CAAzB;;AACA,YAAI,OAAA,YAAA,KAAJ,UAAA,EAAwC;AACtCW,UAAAA,aAAa,CAAbA,OAAAA,CAAAA,SAAAA,IAAAA,YAAAA;AACAF,UAAAA,GAAG,CAAHA,OAAAA,CAAAA,gBAAAA,CAAAA,SAAAA,EAAwCE,aAAa,CAAbA,OAAAA,CAAxCF,SAAwCE,CAAxCF;AACD;AALHoB,OAAAA;AAQA,aAAO,YAAM;AACX;AACA,aAAK,IAAL,SAAA,IAAwBlB,aAAa,CAArC,OAAA,EAA+C;AAAA,cAAA,YAAA;;AAC7C,WAAA,YAAA,GAAA,GAAG,CAAH,OAAA,MAAA,IAAA,IAAA,YAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,YAAA,CAAA,mBAAA,CAAA,SAAA,EAA4CA,aAAa,CAAbA,OAAAA,CAA5C,SAA4CA,CAA5C,CAAA;AACD;AAJH,OAAA;AAVK,KAAA,EAiBP,eAAe,CAAf,GAAA,CAAoB,UAAA,SAAA,EAAA;AAAA,aAAeJ,IAAI,CAACP,mBAAmB,CAAvC,SAAuC,CAApB,CAAnB;AA3EyD,KA2E7E,CAjBO,CAAT4B,CA1D+E,CAAA;;AA+E/E,QAAMG,2BAA2B,GAAG,MAAM,CAAN,OAAA,CAAA,IAAA,EAAA,MAAA,CAC1B,UAAA,IAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,IAAA,EAAA,CAAA,CAAA;AAAA,UAAEP,GAAF,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAW,CAACQ,iBAAiB,CAAjBA,QAAAA,CAAZ,GAAYA,CAAZ;AAD0B,KAAA,EAAA,MAAA,CAE1B,UAAA,KAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,UAAER,GAAF,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAW,CAACS,cAAc,CAAdA,QAAAA,CAAZ,GAAYA,CAAZ;AAF0B,KAAA,EAAA,MAAA,CAG1B,UAAA,KAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,UAAET,GAAF,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAW,CAACU,iBAAiB,CAAjBA,QAAAA,CAAZ,GAAYA,CAAZ;AAH0B,KAAA,EAAA,MAAA,CAI1B,UAAA,KAAA,EAAA;AAAA,UAAA,KAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,UAAEV,GAAF,GAAA,KAAA,CAAA,CAAA,CAAA;;AAAA,aAAW,CAAC,eAAe,CAAf,GAAA,CAAoB,UAAA,SAAA,EAAA;AAAA,eAAexB,mBAAmB,CAAlC,SAAkC,CAAlC;AAApB,OAAA,EAAA,QAAA,CAAZ,GAAY,CAAZ;AAJ0B,KAAA,EAAA,MAAA,CAK1B,UAAA,GAAA,EAAA,KAAA,EAAA;AAAA,UAAA,MAAA,GAAA,cAAA,CAAA,KAAA,EAAA,CAAA,CAAA;AAAA,UAAOwB,GAAP,GAAA,MAAA,CAAA,CAAA,CAAA;AAAA,UAAYW,GAAZ,GAAA,MAAA,CAAA,CAAA,CAAA;;AAAA,aAAA,aAAA,CAAA,aAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,EAAA,EAAA,eAAA,CAAA,EAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AAL0B,KAAA,EAApC,EAAoC,CAApC;AAOA,QAAMC,aAAqB,GAAGC,+BAA+B,CAA7D,OAA6D,CAA7D;AACA,QAAMC,SAAS,GAAIF,aAAa,GAAA,GAAA,MAAA,CAAA,OAAA,EAAA,GAAA,EAAA,MAAA,CAAA,aAAA,CAAA,GAAhC,OAAA;AAIA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,SAAA,EAAA,QAAA,CAAA;AACE,MAAA,GAAG,EAAE3B;AADP,KAAA,EAAA,YAAA,EAAA,YAAA,EAAA,2BAAA,EAAA;AAKE,MAAA,KAAK,EALP,SAAA;AAME,MAAA,KAAK,EAAEJ;AANT,KAAA,CAAA,EAAA,KAAA,EADF,QACE,CADF;AA3FF,GAAmC,CAAnC;AA0GAH,EAAAA,gBAAgB,CAAhBA,WAAAA,GAAAA,oBAAAA,MAAAA,CAAAA,OAAAA,EAAAA,GAAAA,CAAAA;AAEA,SAAA,gBAAA;AACD,C","sourcesContent":["import { getEffectiveScopingSuffixForTag } from '@ui5/webcomponents-base/dist/CustomElementsScope';\nimport { useConsolidatedRef } from '@ui5/webcomponents-react-base/dist/useConsolidatedRef';\nimport React, {\n  Children,\n  cloneElement,\n  ComponentType,\n  forwardRef,\n  ReactElement,\n  RefObject,\n  useEffect,\n  useRef\n} from 'react';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\n\nconst capitalizeFirstLetter = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\n\nconst camelToKebabCase = (s: string) => s.replace(/([A-Z])/g, (a, b: string) => `-${b.toLowerCase()}`);\nconst kebabToCamelCase = (str: string) => str.replace(/([-_]\\w)/g, (g) => g[1].toUpperCase());\n\nconst createEventPropName = (eventName) => `on${capitalizeFirstLetter(kebabToCamelCase(eventName))}`;\n\ntype EventHandler = (event: CustomEvent<unknown>) => void;\n\nexport const withWebComponent = <Props extends Record<string, any>, RefType = Ui5DomRef>(\n  tagName: string,\n  regularProperties: string[],\n  booleanProperties: string[],\n  slotProperties: string[],\n  eventProperties: string[]\n) => {\n  const WithWebComponent = forwardRef((props: Props, wcRef: RefObject<RefType>) => {\n    const { className, tooltip, children, ...rest } = props;\n\n    const ref = useConsolidatedRef<HTMLElement>(wcRef);\n    const eventRegistry = useRef<Record<string, EventHandler>>({});\n\n    // regular props (no booleans, no slots and no events)\n    const regularProps = regularProperties.reduce((acc, name) => {\n      if (rest.hasOwnProperty(name)) {\n        return { ...acc, [camelToKebabCase(name)]: rest[name] };\n      }\n      return acc;\n    }, {});\n\n    // boolean properties - only attach if they are truthy\n    const booleanProps = booleanProperties.reduce((acc, name) => {\n      if (rest[name] === true || rest[name] === 'true') {\n        return { ...acc, [camelToKebabCase(name)]: true };\n      }\n      return acc;\n    }, {});\n\n    const slots = slotProperties.reduce((acc, name) => {\n      const slotValue = rest[name] as ReactElement;\n\n      if (!slotValue) return acc;\n\n      const slottedChildren = [];\n      let index = 0;\n      const removeFragments = (element) => {\n        if (!element) return;\n        if (element.type === React.Fragment) {\n          Children.toArray(element.props?.children)\n            .filter(Boolean)\n            .forEach((item) => {\n              removeFragments(item);\n            });\n        } else {\n          slottedChildren.push(\n            cloneElement(element, {\n              key: `${name}-${index}`,\n              slot: name\n            })\n          );\n          index++;\n        }\n      };\n\n      if (Array.isArray(slotValue)) {\n        slotValue.forEach((item) => {\n          removeFragments(item);\n        });\n      } else {\n        removeFragments(slotValue);\n      }\n      return [...acc, ...slottedChildren];\n    }, []);\n    // event binding\n    useEffect(\n      () => {\n        eventProperties.forEach((eventName) => {\n          const eventHandler = rest[createEventPropName(eventName)] as EventHandler;\n          if (typeof eventHandler === 'function') {\n            eventRegistry.current[eventName] = eventHandler;\n            ref.current.addEventListener(eventName, eventRegistry.current[eventName]);\n          }\n        });\n\n        return () => {\n          // eslint-disable-next-line guard-for-in\n          for (const eventName in eventRegistry.current) {\n            ref.current?.removeEventListener(eventName, eventRegistry.current[eventName]);\n          }\n        };\n      },\n      eventProperties.map((eventName) => rest[createEventPropName(eventName)])\n    );\n\n    // non web component related props, just pass them\n    const nonWebComponentRelatedProps = Object.entries(rest)\n      .filter(([key]) => !regularProperties.includes(key))\n      .filter(([key]) => !slotProperties.includes(key))\n      .filter(([key]) => !booleanProperties.includes(key))\n      .filter(([key]) => !eventProperties.map((eventName) => createEventPropName(eventName)).includes(key))\n      .reduce((acc, [key, val]) => ({ ...acc, [key]: val }), {});\n\n    const tagNameSuffix: string = getEffectiveScopingSuffixForTag(tagName);\n    const Component = (tagNameSuffix ? `${tagName}-${tagNameSuffix}` : tagName) as unknown as ComponentType<\n      CommonProps & { class: string }\n    >;\n\n    return (\n      <Component\n        ref={ref}\n        {...booleanProps}\n        {...regularProps}\n        {...nonWebComponentRelatedProps}\n        class={className}\n        title={tooltip}\n      >\n        {slots}\n        {children}\n      </Component>\n    );\n  });\n\n  WithWebComponent.displayName = `WithWebComponent(${tagName})`;\n\n  return WithWebComponent;\n};\n"]},"metadata":{},"sourceType":"module"}