{"ast":null,"code":"import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isEnter, isSpace } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport { AVATAR_GROUP_DISPLAYED_HIDDEN_LABEL, AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL, AVATAR_GROUP_ARIA_LABEL_INDIVIDUAL, AVATAR_GROUP_ARIA_LABEL_GROUP, AVATAR_GROUP_MOVE } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport AvatarGroupTemplate from \"./generated/templates/AvatarGroupTemplate.lit.js\"; // Styles\n\nimport AvatarGroupCss from \"./generated/themes/AvatarGroup.css.js\";\nimport Button from \"./Button.js\";\nimport AvatarSize from \"./types/AvatarSize.js\";\nimport AvatarGroupType from \"./types/AvatarGroupType.js\";\nimport AvatarColorScheme from \"./types/AvatarColorScheme.js\";\nconst OVERFLOW_BTN_CLASS = \"ui5-avatar-group-overflow-btn\";\nconst AVATAR_GROUP_OVERFLOW_BTN_SELECTOR = `.${OVERFLOW_BTN_CLASS}`; // based on RTL/LTR a margin-left/right is set respectfully\n\nconst offsets = {\n  [AvatarSize.XS]: {\n    [AvatarGroupType.Individual]: \"0.0625rem\",\n    [AvatarGroupType.Group]: \"-0.75rem\"\n  },\n  [AvatarSize.S]: {\n    [AvatarGroupType.Individual]: \"0.125rem\",\n    [AvatarGroupType.Group]: \"-1.25rem\"\n  },\n  [AvatarSize.M]: {\n    [AvatarGroupType.Individual]: \"0.125rem\",\n    [AvatarGroupType.Group]: \"-1.625rem\"\n  },\n  [AvatarSize.L]: {\n    [AvatarGroupType.Individual]: \"0.125rem\",\n    [AvatarGroupType.Group]: \" -2rem\"\n  },\n  [AvatarSize.XL]: {\n    [AvatarGroupType.Individual]: \"0.25rem\",\n    [AvatarGroupType.Group]: \"-2.75rem\"\n  }\n};\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-avatar-group\",\n  managedSlots: true,\n  properties:\n  /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */\n  {\n    /**\n    \t * Defines the mode of the <code>AvatarGroup</code>.\n     * <br><br>\n     * Available options are:\n     * <ul>\n     * <li><code>Group</code></li>\n     * <li><code>Individual</code></li>\n     * </ul>\n     * @type {AvatarGroupType}\n     * @defaultValue \"Group\"\n     * @public\n     */\n    type: {\n      type: String,\n      defaultValue: AvatarGroupType.Group\n    },\n\n    /**\n     * Defines the aria-haspopup value of the component on:\n     * <br><br>\n     * <ul>\n     * <li> the whole container when <code>type</code> property is <code>Group</code></li>\n     * <li> the default \"More\" overflow button when <code>type</code> is <code>Individual</code></li>\n     * </ul>\n     * <br><br>\n     * @type String\n     * @since 1.0.0-rc.15\n     * @protected\n     */\n    ariaHaspopup: {\n      type: String\n    },\n\n    /**\n     * @private\n     */\n    _overflowButtonText: {\n      type: String,\n      noAttribute: true\n    }\n  },\n  slots:\n  /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */\n  {\n    /**\n     * Defines the items of the component. Use the <code>ui5-avatar</code> component as an item.\n     * <br><br>\n     * <b>Note:</b> The UX guidelines recommends using avatars with \"Circle\" shape.\n     * Moreover, if you use avatars with \"Square\" shape, there will be visual inconsistency\n     * as the built-in overflow action has \"Circle\" shape.\n     * @type {sap.ui.webcomponents.main.IAvatar[]}\n     * @slot items\n     * @public\n     */\n    \"default\": {\n      type: HTMLElement,\n      propertyName: \"items\"\n    },\n\n    /**\n     * Defines the overflow button of the component.\n     * <b>Note:</b> We recommend using the <code>ui5-button</code> component.\n     * <br><br>\n     * <b>Note:</b> If this slot is not used, the component will\n     * display the built-in overflow button.\n     * @type {HTMLElement}\n     * @slot overflowButton\n     * @public\n     * @since 1.0.0-rc.13\n     */\n    overflowButton: {\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */\n  {\n    /**\n    * Fired when the component is activated either with a\n    * click/tap or by using the Enter or Space key.\n    * @param {HTMLElement} targetRef The DOM ref of the clicked item.\n    * @param {boolean} overflowButtonClicked indicates if the overflow button is clicked\n    * @event\n    * @public\n    * @since 1.0.0-rc.11\n    */\n    click: {\n      detail: {\n        targetRef: {\n          type: HTMLElement\n        },\n        overflowButtonClicked: {\n          type: Boolean\n        }\n      }\n    },\n\n    /**\n    * Fired when the count of visible <code>ui5-avatar</code> elements in the\n    * component has changed\n    * @event\n    * @public\n    * @since 1.0.0-rc.13\n    */\n    overflow: {}\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * Displays a group of avatars arranged horizontally. It is useful to visually\n * showcase a group of related avatars, such as, project team members or employees.\n *\n * The component allows you to display the avatars in different sizes,\n * depending on your use case.\n *\n * The <code>AvatarGroup</code> component has two group types:\n * <ul>\n * <li><code>Group</code> type: The avatars are displayed as partially overlapped on\n * top of each other and the entire group has one click/tap area.</li>\n * <li><code>Individual</code> type: The avatars are displayed side-by-side and each\n * avatar has its own click/tap area.</li>\n * </ul>\n *\n * <h3>Responsive Behavior</h3>\n *\n * When the available space is less than the width required to display all avatars,\n * an overflow visualization appears as a button placed at the end with the same shape\n * and size as the avatars. The visualization displays the number of avatars that have overflowed\n * and are not currently visible.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>AvatarGroup</code> if:\n * <ul>\n * <li>You want to display a group of avatars.</li>\n * <li>You want to display several avatars which have something in common.</li>\n * </ul>\n *\n * Do not use the <code>AvatarGroup</code> if:\n * <ul>\n * <li>You want to display a single avatar.</li>\n * <li>You want to display a gallery for simple images.</li>\n * <li>You want to use it for other visual content than avatars.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n * The component provides advanced keyboard handling.\n * When focused, the user can use the following keyboard\n * shortcuts in order to perform a navigation:\n * <br>\n * - <code>type</code> Individual:\n * <br>\n * <ul>\n * <li>[TAB] - Move focus to the overflow button</li>\n * <li>[LEFT] - Navigate one avatar to the left</li>\n * <li>[RIGHT] - Navigate one avatar to the right</li>\n * <li>[HOME] - Navigate to the first avatar</li>\n * <li>[END] - Navigate to the last avatar</li>\n * <li>[SPACE],[ENTER],[RETURN] - Trigger <code>ui5-click</code> event</li>\n * </ul>\n * <br>\n * - <code>type</code> Group:\n * <br>\n * <ul>\n * <li>[TAB] - Move focus to the next interactive element after the component</li>\n * <li>[SPACE],[ENTER],[RETURN] - Trigger <code>ui5-click</code> event</li>\n * </ul>\n * <br>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.AvatarGroup\n * @extends UI5Element\n * @tagname ui5-avatar-group\n * @since 1.0.0-rc.11\n * @public\n */\n\nclass AvatarGroup extends UI5Element {\n  constructor() {\n    super();\n    this._itemNavigation = new ItemNavigation(this, {\n      getItemsCallback: () => {\n        return this._isGroup ? [] : this.items.slice(0, this._hiddenStartIndex);\n      }\n    });\n    this._colorIndex = 0;\n    this._hiddenItems = 0;\n    this._onResizeHandler = this._onResize.bind(this);\n    this.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n  }\n\n  static get metadata() {\n    return metadata;\n  }\n\n  static get render() {\n    return litRender;\n  }\n\n  static get template() {\n    return AvatarGroupTemplate;\n  }\n\n  static get styles() {\n    return AvatarGroupCss;\n  }\n\n  static get dependencies() {\n    return [Button];\n  }\n\n  static async onDefine() {\n    await fetchI18nBundle(\"@ui5/webcomponents\");\n  }\n  /**\n   * Returns an array containing the <code>ui5-avatar</code> instances that are currently not displayed due to lack of space.\n   * @readonly\n   * @type { Array }\n   * @defaultValue []\n   * @public\n   */\n\n\n  get hiddenItems() {\n    return this.items.slice(this._hiddenStartIndex);\n  }\n  /**\n   * Returns an array containing the <code>AvatarColorScheme</code> values that correspond to the avatars in the component.\n   * @readonly\n   * @type { Array }\n   * @defaultValue []\n   * @public\n   */\n\n\n  get colorScheme() {\n    return this.items.map(avatar => avatar._effectiveBackgroundColor);\n  }\n\n  get _customOverflowButton() {\n    return this.overflowButton.length ? this.overflowButton[0] : undefined;\n  }\n\n  get _ariaLabelText() {\n    const hiddenItemsCount = this.hiddenItems.length;\n    const typeLabelKey = this._isGroup ? AVATAR_GROUP_ARIA_LABEL_GROUP : AVATAR_GROUP_ARIA_LABEL_INDIVIDUAL; // avatar type label\n\n    let text = this.i18nBundle.getText(typeLabelKey); // add displayed-hidden avatars label\n\n    text += ` ${this.i18nBundle.getText(AVATAR_GROUP_DISPLAYED_HIDDEN_LABEL, [this._itemsCount - hiddenItemsCount], [hiddenItemsCount])}`;\n\n    if (this._isGroup) {\n      // the container role is \"button\", add the message for complete list activation\n      text += ` ${this.i18nBundle.getText(AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL)}`;\n    } else {\n      // the container role is \"group\", add the \"how to navigate\" message\n      text += ` ${this.i18nBundle.getText(AVATAR_GROUP_MOVE)}`;\n    }\n\n    return text;\n  }\n\n  get _overflowButtonAriaLabelText() {\n    return this._isGroup ? undefined : this.i18nBundle.getText(AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL);\n  }\n\n  get _containerAriaHasPopup() {\n    return this._isGroup ? this._getAriaHasPopup() : undefined;\n  }\n\n  get _overflowButtonAccInfo() {\n    return {\n      ariaHaspopup: this._isGroup ? undefined : this._getAriaHasPopup()\n    };\n  }\n\n  get _role() {\n    return this._isGroup ? \"button\" : \"group\";\n  }\n\n  get _hiddenStartIndex() {\n    return this._itemsCount - this._hiddenItems;\n  }\n\n  get _overflowBtnHidden() {\n    return this._hiddenItems === 0;\n  }\n\n  get _isGroup() {\n    return this.type === AvatarGroupType.Group;\n  }\n\n  get _itemsCount() {\n    return this.items.length;\n  }\n\n  get _groupTabIndex() {\n    return this._isGroup ? \"0\" : \"-1\";\n  }\n\n  get _overflowButton() {\n    return this.shadowRoot.querySelector(AVATAR_GROUP_OVERFLOW_BTN_SELECTOR);\n  }\n  /**\n   * Return the effective overflow button width\n   * Differences are that when in \"Group\" type the button is offset and overlaps the avatars\n   *\n   * 1) In case of \"Group\", (LTR/RTL aware) button width is qual to second item offset left/right\n   * 2) In case of \"Individual\" group type width is directly taken from button element\n   * @private\n   */\n\n\n  get _overflowButtonEffectiveWidth() {\n    const button = this._customOverflowButton ? this._customOverflowButton : this._overflowButton; // if in \"Group\" mode overflow button size is equal to the offset from second item\n\n    if (this._isGroup) {\n      let item = this.items[1]; // in some cases when second avatar is overflowed the offset of the button is the right one\n\n      if (!item || item.hidden) {\n        item = button;\n      }\n\n      return this.effectiveDir === \"rtl\" ? this._getWidthToItem(item) : item.offsetLeft;\n    }\n\n    return button.offsetWidth;\n  }\n\n  get firstAvatarSize() {\n    return this.items[0].size;\n  }\n\n  get classes() {\n    return {\n      overflowButton: {\n        \"ui5-avatar-group-overflow-btn\": true,\n        \"ui5-avatar-group-overflow-btn-xs\": this.firstAvatarSize === \"XS\",\n        \"ui5-avatar-group-overflow-btn-s\": this.firstAvatarSize === \"S\",\n        \"ui5-avatar-group-overflow-btn-m\": this.firstAvatarSize === \"M\",\n        \"ui5-avatar-group-overflow-btn-l\": this.firstAvatarSize === \"L\",\n        \"ui5-avatar-group-overflow-btn-xl\": this.firstAvatarSize === \"XL\"\n      }\n    };\n  }\n\n  onAfterRendering() {\n    this._overflowItems();\n  }\n\n  onBeforeRendering() {\n    if (this._customOverflowButton) {\n      this._customOverflowButton.nonInteractive = this._isGroup;\n    }\n\n    this._prepareAvatars();\n  }\n\n  onEnterDOM() {\n    ResizeHandler.register(this, this._onResizeHandler);\n  }\n\n  onExitDOM() {\n    ResizeHandler.deregister(this, this._onResizeHandler);\n  }\n\n  _onResize() {\n    this._overflowItems();\n  }\n\n  _onkeydown(event) {\n    // when type is \"Individual\" the ui5-avatar and ui5-button both\n    // fire \"click\" event when SPACE or ENTER are pressed and\n    // AvatarGroup \"click\" is fired in their handlers (_onClick, _onUI5Click).\n    if (this._isGroup) {\n      if (isEnter(event)) {\n        this._fireGroupEvent(event.target);\n      } else if (isSpace(event)) {\n        // prevent scrolling\n        event.preventDefault();\n      }\n    }\n  }\n\n  _onkeyup(event) {\n    if (!event.shiftKey && isSpace(event) && this._isGroup) {\n      this._fireGroupEvent(event.target);\n\n      event.preventDefault();\n    }\n  }\n\n  _fireGroupEvent(targetRef) {\n    const isOverflowButtonClicked = targetRef.classList.contains(OVERFLOW_BTN_CLASS) || targetRef === this._customOverflowButton;\n\n    this.fireEvent(\"click\", {\n      targetRef,\n      overflowButtonClicked: isOverflowButtonClicked\n    });\n  }\n\n  _onClick(event) {\n    // no matter the value of noConflict, the ui5-button and the group container (div) always fire a native click event\n    const isButton = event.target.hasAttribute(\"ui5-button\");\n    event.stopPropagation();\n\n    if (this._isGroup || isButton) {\n      this._fireGroupEvent(event.target);\n    }\n  }\n\n  _onUI5Click(event) {\n    // when noConflict=true only ui5-avatar will fire ui5-click event\n    const isAvatar = event.target.hasAttribute(\"ui5-avatar\");\n    event.stopPropagation();\n\n    if (isAvatar) {\n      this._fireGroupEvent(event.target);\n    }\n  }\n  /**\n   * Modifies avatars to the needs of avatar group properties. Respects already set size and background color.\n   * Set the margins (offsets) based on RTL/LTR.\n   * @private\n   */\n\n\n  _prepareAvatars() {\n    const RTL = this.effectiveDir === \"rtl\";\n    this._colorIndex = 0;\n    this.items.forEach((avatar, index) => {\n      const colorIndex = this._getNextBackgroundColor();\n\n      avatar.interactive = !this._isGroup;\n\n      if (!avatar.getAttribute(\"_color-scheme\")) {\n        // AvatarGroup respects colors set to ui5-avatar\n        avatar.setAttribute(\"_color-scheme\", AvatarColorScheme[`Accent${colorIndex}`]);\n      } // last avatar should not be offset as it breaks the container width and focus styles are no set correctly\n\n\n      if (index !== this._itemsCount - 1 || this._customOverflowButton) {\n        // based on RTL margin left or right is set to avatars\n        avatar.style[`margin-${RTL ? \"left\" : \"right\"}`] = offsets[avatar._effectiveSize][this.type];\n      }\n    });\n  }\n\n  _onfocusin(event) {\n    const target = event.target;\n\n    this._itemNavigation.setCurrentItem(target);\n  }\n  /**\n   * Returns the total width to item excluding the item width\n   * RTL/LTR aware\n   * @private\n   * @param {HTMLElement} item\n   */\n\n\n  _getWidthToItem(item) {\n    const isRTL = this.effectiveDir === \"rtl\";\n\n    if (isRTL) {\n      // in RTL the total width is equal to difference of the parent container width and\n      // how much is the item offset to the left minus its offsetWidth\n      return item.offsetParent.offsetWidth - item.offsetLeft - item.offsetWidth;\n    } // in LTR the width is equal to item.offsetLeft\n\n\n    return item.offsetLeft;\n  }\n  /**\n   * Overflows items that were not able to fit the container\n   * @private\n   */\n\n\n  _overflowItems() {\n    if (this.items.length < 2) {\n      // no need to overflow avatars\n      return;\n    }\n\n    let hiddenItems = 0;\n\n    for (let index = 0; index < this._itemsCount; index++) {\n      const item = this.items[index]; // show item to determine if it will fit the new container size\n\n      item.hidden = false; // container width to current item + item width (avatar)\n      // used to determine whether the following items will fit the container or not\n\n      let totalWidth = this._getWidthToItem(item) + item.offsetWidth;\n\n      if (index !== this._itemsCount - 1 || this._customOverflowButton) {\n        totalWidth += this._overflowButtonEffectiveWidth;\n      }\n\n      if (totalWidth > this.offsetWidth) {\n        hiddenItems = this._itemsCount - index;\n        break;\n      }\n    } // hide the items that did not fit the container size\n\n\n    this._setHiddenItems(hiddenItems);\n  }\n\n  _getNextBackgroundColor() {\n    // counter is to automatically assign background colors to avatars, `Accent10` is the highest color value\n    if (++this._colorIndex > 10) {\n      this._colorIndex = 1;\n    }\n\n    return this._colorIndex;\n  }\n\n  _setHiddenItems(hiddenItems) {\n    const shouldFireEvent = this._hiddenItems !== hiddenItems;\n    this._hiddenItems = hiddenItems;\n    this.items.forEach((item, index) => {\n      item.hidden = index >= this._hiddenStartIndex;\n    });\n    this._overflowButtonText = `+${hiddenItems > 99 ? 99 : hiddenItems}`;\n\n    if (shouldFireEvent) {\n      this.fireEvent(\"overflow\");\n    }\n  }\n\n  _getAriaHasPopup() {\n    if (this.ariaHaspopup === \"\") {\n      return;\n    }\n\n    return this.ariaHaspopup;\n  }\n\n}\n\nAvatarGroup.define();\nexport default AvatarGroup;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/AvatarGroup.js"],"names":["UI5Element","litRender","ResizeHandler","ItemNavigation","fetchI18nBundle","getI18nBundle","isEnter","isSpace","AVATAR_GROUP_DISPLAYED_HIDDEN_LABEL","AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL","AVATAR_GROUP_ARIA_LABEL_INDIVIDUAL","AVATAR_GROUP_ARIA_LABEL_GROUP","AVATAR_GROUP_MOVE","AvatarGroupTemplate","AvatarGroupCss","Button","AvatarSize","AvatarGroupType","AvatarColorScheme","OVERFLOW_BTN_CLASS","AVATAR_GROUP_OVERFLOW_BTN_SELECTOR","offsets","XS","Individual","Group","S","M","L","XL","metadata","tag","managedSlots","properties","type","String","defaultValue","ariaHaspopup","_overflowButtonText","noAttribute","slots","HTMLElement","propertyName","overflowButton","events","click","detail","targetRef","overflowButtonClicked","Boolean","overflow","AvatarGroup","constructor","_itemNavigation","getItemsCallback","_isGroup","items","slice","_hiddenStartIndex","_colorIndex","_hiddenItems","_onResizeHandler","_onResize","bind","i18nBundle","render","template","styles","dependencies","onDefine","hiddenItems","colorScheme","map","avatar","_effectiveBackgroundColor","_customOverflowButton","length","undefined","_ariaLabelText","hiddenItemsCount","typeLabelKey","text","getText","_itemsCount","_overflowButtonAriaLabelText","_containerAriaHasPopup","_getAriaHasPopup","_overflowButtonAccInfo","_role","_overflowBtnHidden","_groupTabIndex","_overflowButton","shadowRoot","querySelector","_overflowButtonEffectiveWidth","button","item","hidden","effectiveDir","_getWidthToItem","offsetLeft","offsetWidth","firstAvatarSize","size","classes","onAfterRendering","_overflowItems","onBeforeRendering","nonInteractive","_prepareAvatars","onEnterDOM","register","onExitDOM","deregister","_onkeydown","event","_fireGroupEvent","target","preventDefault","_onkeyup","shiftKey","isOverflowButtonClicked","classList","contains","fireEvent","_onClick","isButton","hasAttribute","stopPropagation","_onUI5Click","isAvatar","RTL","forEach","index","colorIndex","_getNextBackgroundColor","interactive","getAttribute","setAttribute","style","_effectiveSize","_onfocusin","setCurrentItem","isRTL","offsetParent","totalWidth","_setHiddenItems","shouldFireEvent","define"],"mappings":"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","sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport { fetchI18nBundle, getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\n\nimport {\n\tisEnter,\n\tisSpace,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\n\nimport {\n\tAVATAR_GROUP_DISPLAYED_HIDDEN_LABEL,\n\tAVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL,\n\tAVATAR_GROUP_ARIA_LABEL_INDIVIDUAL,\n\tAVATAR_GROUP_ARIA_LABEL_GROUP,\n\tAVATAR_GROUP_MOVE,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport AvatarGroupTemplate from \"./generated/templates/AvatarGroupTemplate.lit.js\";\n// Styles\nimport AvatarGroupCss from \"./generated/themes/AvatarGroup.css.js\";\n\nimport Button from \"./Button.js\";\nimport AvatarSize from \"./types/AvatarSize.js\";\nimport AvatarGroupType from \"./types/AvatarGroupType.js\";\nimport AvatarColorScheme from \"./types/AvatarColorScheme.js\";\n\nconst OVERFLOW_BTN_CLASS = \"ui5-avatar-group-overflow-btn\";\nconst AVATAR_GROUP_OVERFLOW_BTN_SELECTOR = `.${OVERFLOW_BTN_CLASS}`;\n\n// based on RTL/LTR a margin-left/right is set respectfully\nconst offsets = {\n\t[AvatarSize.XS]: {\n\t\t[AvatarGroupType.Individual]: \"0.0625rem\",\n\t\t[AvatarGroupType.Group]: \"-0.75rem\",\n\t},\n\t[AvatarSize.S]: {\n\t\t[AvatarGroupType.Individual]: \"0.125rem\",\n\t\t[AvatarGroupType.Group]: \"-1.25rem\",\n\t},\n\t[AvatarSize.M]: {\n\t\t[AvatarGroupType.Individual]: \"0.125rem\",\n\t\t[AvatarGroupType.Group]: \"-1.625rem\",\n\t},\n\t[AvatarSize.L]: {\n\t\t[AvatarGroupType.Individual]: \"0.125rem\",\n\t\t[AvatarGroupType.Group]: \" -2rem\",\n\t},\n\t[AvatarSize.XL]: {\n\t\t[AvatarGroupType.Individual]: \"0.25rem\",\n\t\t[AvatarGroupType.Group]: \"-2.75rem\",\n\t},\n};\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-avatar-group\",\n\tmanagedSlots: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */  {\n\n\t\t/**\n\t \t * Defines the mode of the <code>AvatarGroup</code>.\n\t\t * <br><br>\n\t\t * Available options are:\n\t\t * <ul>\n\t\t * <li><code>Group</code></li>\n\t\t * <li><code>Individual</code></li>\n\t\t * </ul>\n\t\t * @type {AvatarGroupType}\n\t\t * @defaultValue \"Group\"\n\t\t * @public\n\t\t */\n\t\ttype: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: AvatarGroupType.Group,\n\t\t},\n\n\t\t/**\n\t\t * Defines the aria-haspopup value of the component on:\n\t\t * <br><br>\n\t\t * <ul>\n\t\t * <li> the whole container when <code>type</code> property is <code>Group</code></li>\n\t\t * <li> the default \"More\" overflow button when <code>type</code> is <code>Individual</code></li>\n\t\t * </ul>\n\t\t * <br><br>\n\t\t * @type String\n\t\t * @since 1.0.0-rc.15\n\t\t * @protected\n\t\t */\n\t\tariaHaspopup: {\n\t\t\ttype: String,\n\t\t},\n\n\t\t/**\n\t\t * @private\n\t\t */\n\t\t_overflowButtonText: {\n\t\t\ttype: String,\n\t\t\tnoAttribute: true,\n\t\t},\n\t},\n\tslots: /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */ {\n\t\t/**\n\t\t * Defines the items of the component. Use the <code>ui5-avatar</code> component as an item.\n\t\t * <br><br>\n\t\t * <b>Note:</b> The UX guidelines recommends using avatars with \"Circle\" shape.\n\t\t * Moreover, if you use avatars with \"Square\" shape, there will be visual inconsistency\n\t\t * as the built-in overflow action has \"Circle\" shape.\n\t\t * @type {sap.ui.webcomponents.main.IAvatar[]}\n\t\t * @slot items\n\t\t * @public\n\t\t */\n\t\t\"default\": {\n\t\t\ttype: HTMLElement,\n\t\t\tpropertyName: \"items\",\n\t\t},\n\t\t/**\n\t\t * Defines the overflow button of the component.\n\t\t * <b>Note:</b> We recommend using the <code>ui5-button</code> component.\n\t\t * <br><br>\n\t\t * <b>Note:</b> If this slot is not used, the component will\n\t\t * display the built-in overflow button.\n\t\t * @type {HTMLElement}\n\t\t * @slot overflowButton\n\t\t * @public\n\t\t * @since 1.0.0-rc.13\n\t\t */\n\t\t overflowButton: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.main.AvatarGroup.prototype */ {\n\t\t/**\n\t\t* Fired when the component is activated either with a\n\t\t* click/tap or by using the Enter or Space key.\n\t\t* @param {HTMLElement} targetRef The DOM ref of the clicked item.\n\t\t* @param {boolean} overflowButtonClicked indicates if the overflow button is clicked\n\t\t* @event\n\t\t* @public\n\t\t* @since 1.0.0-rc.11\n\t\t*/\n\t\tclick: {\n\t\t\tdetail: {\n\t\t\t\ttargetRef: { type: HTMLElement },\n\t\t\t\toverflowButtonClicked: { type: Boolean },\n\t\t\t},\n\t\t},\n\t\t/**\n\t\t* Fired when the count of visible <code>ui5-avatar</code> elements in the\n\t\t* component has changed\n\t\t* @event\n\t\t* @public\n\t\t* @since 1.0.0-rc.13\n\t\t*/\n\t\toverflow: {},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * Displays a group of avatars arranged horizontally. It is useful to visually\n * showcase a group of related avatars, such as, project team members or employees.\n *\n * The component allows you to display the avatars in different sizes,\n * depending on your use case.\n *\n * The <code>AvatarGroup</code> component has two group types:\n * <ul>\n * <li><code>Group</code> type: The avatars are displayed as partially overlapped on\n * top of each other and the entire group has one click/tap area.</li>\n * <li><code>Individual</code> type: The avatars are displayed side-by-side and each\n * avatar has its own click/tap area.</li>\n * </ul>\n *\n * <h3>Responsive Behavior</h3>\n *\n * When the available space is less than the width required to display all avatars,\n * an overflow visualization appears as a button placed at the end with the same shape\n * and size as the avatars. The visualization displays the number of avatars that have overflowed\n * and are not currently visible.\n *\n * <h3>Usage</h3>\n *\n * Use the <code>AvatarGroup</code> if:\n * <ul>\n * <li>You want to display a group of avatars.</li>\n * <li>You want to display several avatars which have something in common.</li>\n * </ul>\n *\n * Do not use the <code>AvatarGroup</code> if:\n * <ul>\n * <li>You want to display a single avatar.</li>\n * <li>You want to display a gallery for simple images.</li>\n * <li>You want to use it for other visual content than avatars.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n * The component provides advanced keyboard handling.\n * When focused, the user can use the following keyboard\n * shortcuts in order to perform a navigation:\n * <br>\n * - <code>type</code> Individual:\n * <br>\n * <ul>\n * <li>[TAB] - Move focus to the overflow button</li>\n * <li>[LEFT] - Navigate one avatar to the left</li>\n * <li>[RIGHT] - Navigate one avatar to the right</li>\n * <li>[HOME] - Navigate to the first avatar</li>\n * <li>[END] - Navigate to the last avatar</li>\n * <li>[SPACE],[ENTER],[RETURN] - Trigger <code>ui5-click</code> event</li>\n * </ul>\n * <br>\n * - <code>type</code> Group:\n * <br>\n * <ul>\n * <li>[TAB] - Move focus to the next interactive element after the component</li>\n * <li>[SPACE],[ENTER],[RETURN] - Trigger <code>ui5-click</code> event</li>\n * </ul>\n * <br>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.AvatarGroup\n * @extends UI5Element\n * @tagname ui5-avatar-group\n * @since 1.0.0-rc.11\n * @public\n */\nclass AvatarGroup extends UI5Element {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._itemNavigation = new ItemNavigation(this, {\n\t\t\tgetItemsCallback: () => {\n\t\t\t\treturn this._isGroup ? [] : this.items.slice(0, this._hiddenStartIndex);\n\t\t\t},\n\t\t});\n\n\t\tthis._colorIndex = 0;\n\t\tthis._hiddenItems = 0;\n\t\tthis._onResizeHandler = this._onResize.bind(this);\n\n\t\tthis.i18nBundle = getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get template() {\n\t\treturn AvatarGroupTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn AvatarGroupCss;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [\n\t\t\tButton,\n\t\t];\n\t}\n\n\tstatic async onDefine() {\n\t\tawait fetchI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\t/**\n\t * Returns an array containing the <code>ui5-avatar</code> instances that are currently not displayed due to lack of space.\n\t * @readonly\n\t * @type { Array }\n\t * @defaultValue []\n\t * @public\n\t */\n\tget hiddenItems() {\n\t\treturn this.items.slice(this._hiddenStartIndex);\n\t}\n\n\t/**\n\t * Returns an array containing the <code>AvatarColorScheme</code> values that correspond to the avatars in the component.\n\t * @readonly\n\t * @type { Array }\n\t * @defaultValue []\n\t * @public\n\t */\n\tget colorScheme() {\n\t\treturn this.items.map(avatar => avatar._effectiveBackgroundColor);\n\t}\n\n\tget _customOverflowButton() {\n\t\treturn this.overflowButton.length ? this.overflowButton[0] : undefined;\n\t}\n\n\tget _ariaLabelText() {\n\t\tconst hiddenItemsCount = this.hiddenItems.length;\n\t\tconst typeLabelKey = this._isGroup ? AVATAR_GROUP_ARIA_LABEL_GROUP : AVATAR_GROUP_ARIA_LABEL_INDIVIDUAL;\n\n\t\t// avatar type label\n\t\tlet text = this.i18nBundle.getText(typeLabelKey);\n\n\t\t// add displayed-hidden avatars label\n\t\ttext += ` ${this.i18nBundle.getText(AVATAR_GROUP_DISPLAYED_HIDDEN_LABEL, [this._itemsCount - hiddenItemsCount], [hiddenItemsCount])}`;\n\n\t\tif (this._isGroup) {\n\t\t\t// the container role is \"button\", add the message for complete list activation\n\t\t\ttext += ` ${this.i18nBundle.getText(AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL)}`;\n\t\t} else {\n\t\t\t// the container role is \"group\", add the \"how to navigate\" message\n\t\t\ttext += ` ${this.i18nBundle.getText(AVATAR_GROUP_MOVE)}`;\n\t\t}\n\n\t\treturn text;\n\t}\n\n\tget _overflowButtonAriaLabelText() {\n\t\treturn this._isGroup ? undefined : this.i18nBundle.getText(AVATAR_GROUP_SHOW_COMPLETE_LIST_LABEL);\n\t}\n\n\tget _containerAriaHasPopup() {\n\t\treturn this._isGroup ? this._getAriaHasPopup() : undefined;\n\t}\n\n\tget _overflowButtonAccInfo() {\n\t\treturn {\n\t\t\tariaHaspopup: this._isGroup ? undefined : this._getAriaHasPopup(),\n\t\t};\n\t}\n\n\tget _role() {\n\t\treturn this._isGroup ? \"button\" : \"group\";\n\t}\n\n\tget _hiddenStartIndex() {\n\t\treturn this._itemsCount - this._hiddenItems;\n\t}\n\n\tget _overflowBtnHidden() {\n\t\treturn this._hiddenItems === 0;\n\t}\n\n\tget _isGroup() {\n\t\treturn this.type === AvatarGroupType.Group;\n\t}\n\n\tget _itemsCount() {\n\t\treturn this.items.length;\n\t}\n\n\tget _groupTabIndex() {\n\t\treturn this._isGroup ? \"0\" : \"-1\";\n\t}\n\n\tget _overflowButton() {\n\t\treturn this.shadowRoot.querySelector(AVATAR_GROUP_OVERFLOW_BTN_SELECTOR);\n\t}\n\n\t/**\n\t * Return the effective overflow button width\n\t * Differences are that when in \"Group\" type the button is offset and overlaps the avatars\n\t *\n\t * 1) In case of \"Group\", (LTR/RTL aware) button width is qual to second item offset left/right\n\t * 2) In case of \"Individual\" group type width is directly taken from button element\n\t * @private\n\t */\n\tget _overflowButtonEffectiveWidth() {\n\t\tconst button = this._customOverflowButton ? this._customOverflowButton : this._overflowButton;\n\t\t// if in \"Group\" mode overflow button size is equal to the offset from second item\n\t\tif (this._isGroup) {\n\t\t\tlet item = this.items[1];\n\n\t\t\t// in some cases when second avatar is overflowed the offset of the button is the right one\n\t\t\tif (!item || item.hidden) {\n\t\t\t\titem = button;\n\t\t\t}\n\n\t\t\treturn this.effectiveDir === \"rtl\" ? this._getWidthToItem(item) : item.offsetLeft;\n\t\t}\n\n\t\treturn button.offsetWidth;\n\t}\n\n\tget firstAvatarSize() {\n\t\treturn this.items[0].size;\n\t}\n\n\tget classes() {\n\t\treturn {\n\t\t\toverflowButton: {\n\t\t\t\t\"ui5-avatar-group-overflow-btn\": true,\n\t\t\t\t\"ui5-avatar-group-overflow-btn-xs\": this.firstAvatarSize === \"XS\",\n\t\t\t\t\"ui5-avatar-group-overflow-btn-s\": this.firstAvatarSize === \"S\",\n\t\t\t\t\"ui5-avatar-group-overflow-btn-m\": this.firstAvatarSize === \"M\",\n\t\t\t\t\"ui5-avatar-group-overflow-btn-l\": this.firstAvatarSize === \"L\",\n\t\t\t\t\"ui5-avatar-group-overflow-btn-xl\": this.firstAvatarSize === \"XL\",\n\t\t\t},\n\t\t};\n\t}\n\n\tonAfterRendering() {\n\t\tthis._overflowItems();\n\t}\n\n\tonBeforeRendering() {\n\t\tif (this._customOverflowButton) {\n\t\t\tthis._customOverflowButton.nonInteractive = this._isGroup;\n\t\t}\n\n\t\tthis._prepareAvatars();\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(this, this._onResizeHandler);\n\t}\n\n\tonExitDOM() {\n\t\tResizeHandler.deregister(this, this._onResizeHandler);\n\t}\n\n\t_onResize() {\n\t\tthis._overflowItems();\n\t}\n\n\t_onkeydown(event) {\n\t\t// when type is \"Individual\" the ui5-avatar and ui5-button both\n\t\t// fire \"click\" event when SPACE or ENTER are pressed and\n\t\t// AvatarGroup \"click\" is fired in their handlers (_onClick, _onUI5Click).\n\t\tif (this._isGroup) {\n\t\t\tif (isEnter(event)) {\n\t\t\t\tthis._fireGroupEvent(event.target);\n\t\t\t} else if (isSpace(event)) {\n\t\t\t\t// prevent scrolling\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t}\n\t}\n\n\t_onkeyup(event) {\n\t\tif (!event.shiftKey && isSpace(event) && this._isGroup) {\n\t\t\tthis._fireGroupEvent(event.target);\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t_fireGroupEvent(targetRef) {\n\t\tconst isOverflowButtonClicked = targetRef.classList.contains(OVERFLOW_BTN_CLASS) || targetRef === this._customOverflowButton;\n\n\t\tthis.fireEvent(\"click\", {\n\t\t\ttargetRef,\n\t\t\toverflowButtonClicked: isOverflowButtonClicked,\n\t\t});\n\t}\n\n\t_onClick(event) {\n\t\t// no matter the value of noConflict, the ui5-button and the group container (div) always fire a native click event\n\t\tconst isButton = event.target.hasAttribute(\"ui5-button\");\n\t\tevent.stopPropagation();\n\n\t\tif (this._isGroup || isButton) {\n\t\t\tthis._fireGroupEvent(event.target);\n\t\t}\n\t}\n\n\t_onUI5Click(event) {\n\t\t// when noConflict=true only ui5-avatar will fire ui5-click event\n\t\tconst isAvatar = event.target.hasAttribute(\"ui5-avatar\");\n\t\tevent.stopPropagation();\n\n\t\tif (isAvatar) {\n\t\t\tthis._fireGroupEvent(event.target);\n\t\t}\n\t}\n\n\t/**\n\t * Modifies avatars to the needs of avatar group properties. Respects already set size and background color.\n\t * Set the margins (offsets) based on RTL/LTR.\n\t * @private\n\t */\n\t_prepareAvatars() {\n\t\tconst RTL = this.effectiveDir === \"rtl\";\n\t\tthis._colorIndex = 0;\n\n\t\tthis.items.forEach((avatar, index) => {\n\t\t\tconst colorIndex = this._getNextBackgroundColor();\n\t\t\tavatar.interactive = !this._isGroup;\n\n\t\t\tif (!avatar.getAttribute(\"_color-scheme\")) {\n\t\t\t\t// AvatarGroup respects colors set to ui5-avatar\n\t\t\t\tavatar.setAttribute(\"_color-scheme\", AvatarColorScheme[`Accent${colorIndex}`]);\n\t\t\t}\n\n\t\t\t// last avatar should not be offset as it breaks the container width and focus styles are no set correctly\n\t\t\tif (index !== this._itemsCount - 1 || this._customOverflowButton) {\n\t\t\t\t// based on RTL margin left or right is set to avatars\n\t\t\t\tavatar.style[`margin-${RTL ? \"left\" : \"right\"}`] = offsets[avatar._effectiveSize][this.type];\n\t\t\t}\n\t\t});\n\t}\n\n\t_onfocusin(event) {\n\t\tconst target = event.target;\n\t\tthis._itemNavigation.setCurrentItem(target);\n\t}\n\n\t/**\n\t * Returns the total width to item excluding the item width\n\t * RTL/LTR aware\n\t * @private\n\t * @param {HTMLElement} item\n\t */\n\t_getWidthToItem(item) {\n\t\tconst isRTL = this.effectiveDir === \"rtl\";\n\n\t\tif (isRTL) {\n\t\t\t// in RTL the total width is equal to difference of the parent container width and\n\t\t\t// how much is the item offset to the left minus its offsetWidth\n\t\t\treturn item.offsetParent.offsetWidth - item.offsetLeft - item.offsetWidth;\n\t\t}\n\n\t\t// in LTR the width is equal to item.offsetLeft\n\t\treturn item.offsetLeft;\n\t}\n\n\t/**\n\t * Overflows items that were not able to fit the container\n\t * @private\n\t */\n\t_overflowItems() {\n\t\tif (this.items.length < 2) {\n\t\t\t// no need to overflow avatars\n\t\t\treturn;\n\t\t}\n\n\t\tlet hiddenItems = 0;\n\n\t\tfor (let index = 0; index < this._itemsCount; index++) {\n\t\t\tconst item = this.items[index];\n\n\t\t\t// show item to determine if it will fit the new container size\n\t\t\titem.hidden = false;\n\n\t\t\t// container width to current item + item width (avatar)\n\t\t\t// used to determine whether the following items will fit the container or not\n\t\t\tlet totalWidth = this._getWidthToItem(item) + item.offsetWidth;\n\n\t\t\tif (index !== this._itemsCount - 1 || this._customOverflowButton) {\n\t\t\t\ttotalWidth += this._overflowButtonEffectiveWidth;\n\t\t\t}\n\n\t\t\tif (totalWidth > this.offsetWidth) {\n\t\t\t\thiddenItems = this._itemsCount - index;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// hide the items that did not fit the container size\n\t\tthis._setHiddenItems(hiddenItems);\n\t}\n\n\t_getNextBackgroundColor() {\n\t\t// counter is to automatically assign background colors to avatars, `Accent10` is the highest color value\n\t\tif (++this._colorIndex > 10) {\n\t\t\tthis._colorIndex = 1;\n\t\t}\n\t\treturn this._colorIndex;\n\t}\n\n\t_setHiddenItems(hiddenItems) {\n\t\tconst shouldFireEvent = this._hiddenItems !== hiddenItems;\n\n\t\tthis._hiddenItems = hiddenItems;\n\n\t\tthis.items.forEach((item, index) => {\n\t\t\titem.hidden = index >= this._hiddenStartIndex;\n\t\t});\n\n\t\tthis._overflowButtonText = `+${hiddenItems > 99 ? 99 : hiddenItems}`;\n\n\t\tif (shouldFireEvent) {\n\t\t\tthis.fireEvent(\"overflow\");\n\t\t}\n\t}\n\n\t_getAriaHasPopup() {\n\t\tif (this.ariaHaspopup === \"\") {\n\t\t\treturn;\n\t\t}\n\n\t\treturn this.ariaHaspopup;\n\t}\n}\n\nAvatarGroup.define();\n\nexport default AvatarGroup;\n"]},"metadata":{},"sourceType":"module"}