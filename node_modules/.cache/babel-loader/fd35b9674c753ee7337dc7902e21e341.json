{"ast":null,"code":"import { _$LH as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nvar i = o.H,\n    t = function t(o) {\n  return null === o || \"object\" != typeof o && \"function\" != typeof o;\n},\n    n = {\n  HTML: 1,\n  SVG: 2\n},\n    v = function v(o, i) {\n  var t, n;\n  return void 0 === i ? void 0 !== (null === (t = o) || void 0 === t ? void 0 : t._$litType$) : (null === (n = o) || void 0 === n ? void 0 : n._$litType$) === i;\n},\n    l = function l(o) {\n  var i;\n  return void 0 !== (null === (i = o) || void 0 === i ? void 0 : i._$litDirective$);\n},\n    d = function d(o) {\n  var i;\n  return null === (i = o) || void 0 === i ? void 0 : i._$litDirective$;\n},\n    r = function r(o) {\n  return void 0 === o.strings;\n},\n    e = function e() {\n  return document.createComment(\"\");\n},\n    u = function u(o, t, n) {\n  var v;\n  var l = o._$AA.parentNode,\n      d = void 0 === t ? o._$AB : t._$AA;\n\n  if (void 0 === n) {\n    var _t = l.insertBefore(e(), d),\n        _v = l.insertBefore(e(), d);\n\n    n = new i(_t, _v, o, o.options);\n  } else {\n    var _i = n._$AB.nextSibling,\n        _t2 = n._$AM,\n        _r = _t2 !== o;\n\n    if (_r) {\n      var _i2;\n\n      null === (v = n._$AQ) || void 0 === v || v.call(n, o), n._$AM = o, void 0 !== n._$AP && (_i2 = o._$AU) !== _t2._$AU && n._$AP(_i2);\n    }\n\n    if (_i !== d || _r) {\n      var _o = n._$AA;\n\n      for (; _o !== _i;) {\n        var _i3 = _o.nextSibling;\n        l.insertBefore(_o, d), _o = _i3;\n      }\n    }\n  }\n\n  return n;\n},\n    c = function c(o, i) {\n  var t = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n  return o._$AI(i, t), o;\n},\n    f = {},\n    s = function s(o) {\n  var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : f;\n  return o._$AH = i;\n},\n    a = function a(o) {\n  return o._$AH;\n},\n    m = function m(o) {\n  var i;\n  null === (i = o._$AP) || void 0 === i || i.call(o, !1, !0);\n  var t = o._$AA;\n  var n = o._$AB.nextSibling;\n\n  for (; t !== n;) {\n    var _o2 = t.nextSibling;\n    t.remove(), t = _o2;\n  }\n},\n    p = function p(o) {\n  o._$AR();\n};\n\nexport { n as TemplateResultType, p as clearPart, a as getCommittedValue, d as getDirectiveClass, u as insertPart, l as isDirectiveResult, t as isPrimitive, r as isSingleExpression, v as isTemplateResult, m as removePart, c as setChildPartValue, s as setCommittedValue };","map":{"version":3,"sources":["src/directive-helpers.ts"],"names":["_ChildPart","ChildPart","_$LH","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_$LH, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}