{"ast":null,"code":"class EventProvider {\n  constructor() {\n    this._eventRegistry = {};\n  }\n\n  attachEvent(eventName, fnFunction) {\n    const eventRegistry = this._eventRegistry;\n    let eventListeners = eventRegistry[eventName];\n\n    if (!Array.isArray(eventListeners)) {\n      eventRegistry[eventName] = [];\n      eventListeners = eventRegistry[eventName];\n    }\n\n    eventListeners.push({\n      \"function\": fnFunction\n    });\n  }\n\n  detachEvent(eventName, fnFunction) {\n    const eventRegistry = this._eventRegistry;\n    let eventListeners = eventRegistry[eventName];\n\n    if (!eventListeners) {\n      return;\n    }\n\n    eventListeners = eventListeners.filter(event => {\n      return event[\"function\"] !== fnFunction; // eslint-disable-line\n    });\n\n    if (eventListeners.length === 0) {\n      delete eventRegistry[eventName];\n    }\n  }\n  /**\n   * Fires an event and returns the results of all event listeners as an array.\n   *\n   * @param eventName the event to fire\n   * @param data optional data to pass to each event listener\n   * @returns {Array} an array with the results of all event listeners\n   */\n\n\n  fireEvent(eventName, data) {\n    const eventRegistry = this._eventRegistry;\n    const eventListeners = eventRegistry[eventName];\n\n    if (!eventListeners) {\n      return [];\n    }\n\n    return eventListeners.map(event => {\n      return event[\"function\"].call(this, data); // eslint-disable-line\n    });\n  }\n  /**\n   * Fires an event and returns a promise that will resolve once all listeners have resolved.\n   *\n   * @param eventName the event to fire\n   * @param data optional data to pass to each event listener\n   * @returns {Promise} a promise that will resolve when all listeners have resolved\n   */\n\n\n  fireEventAsync(eventName, data) {\n    return Promise.all(this.fireEvent(eventName, data));\n  }\n\n  isHandlerAttached(eventName, fnFunction) {\n    const eventRegistry = this._eventRegistry;\n    const eventListeners = eventRegistry[eventName];\n\n    if (!eventListeners) {\n      return false;\n    }\n\n    for (let i = 0; i < eventListeners.length; i++) {\n      const event = eventListeners[i];\n\n      if (event[\"function\"] === fnFunction) {\n        // eslint-disable-line\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  hasListeners(eventName) {\n    return !!this._eventRegistry[eventName];\n  }\n\n}\n\nexport default EventProvider;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/EventProvider.js"],"names":["EventProvider","constructor","_eventRegistry","attachEvent","eventName","fnFunction","eventRegistry","eventListeners","Array","isArray","push","detachEvent","filter","event","length","fireEvent","data","map","call","fireEventAsync","Promise","all","isHandlerAttached","i","hasListeners"],"mappings":"AAAA,MAAMA,aAAN,CAAoB;AACnBC,EAAAA,WAAW,GAAG;AACb,SAAKC,cAAL,GAAsB,EAAtB;AACA;;AAEDC,EAAAA,WAAW,CAACC,SAAD,EAAYC,UAAZ,EAAwB;AAClC,UAAMC,aAAa,GAAG,KAAKJ,cAA3B;AACA,QAAIK,cAAc,GAAGD,aAAa,CAACF,SAAD,CAAlC;;AAEA,QAAI,CAACI,KAAK,CAACC,OAAN,CAAcF,cAAd,CAAL,EAAoC;AACnCD,MAAAA,aAAa,CAACF,SAAD,CAAb,GAA2B,EAA3B;AACAG,MAAAA,cAAc,GAAGD,aAAa,CAACF,SAAD,CAA9B;AACA;;AAEDG,IAAAA,cAAc,CAACG,IAAf,CAAoB;AACnB,kBAAYL;AADO,KAApB;AAGA;;AAEDM,EAAAA,WAAW,CAACP,SAAD,EAAYC,UAAZ,EAAwB;AAClC,UAAMC,aAAa,GAAG,KAAKJ,cAA3B;AACA,QAAIK,cAAc,GAAGD,aAAa,CAACF,SAAD,CAAlC;;AAEA,QAAI,CAACG,cAAL,EAAqB;AACpB;AACA;;AAEDA,IAAAA,cAAc,GAAGA,cAAc,CAACK,MAAf,CAAsBC,KAAK,IAAI;AAC/C,aAAOA,KAAK,CAAC,UAAD,CAAL,KAAsBR,UAA7B,CAD+C,CACN;AACzC,KAFgB,CAAjB;;AAIA,QAAIE,cAAc,CAACO,MAAf,KAA0B,CAA9B,EAAiC;AAChC,aAAOR,aAAa,CAACF,SAAD,CAApB;AACA;AACD;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCW,EAAAA,SAAS,CAACX,SAAD,EAAYY,IAAZ,EAAkB;AAC1B,UAAMV,aAAa,GAAG,KAAKJ,cAA3B;AACA,UAAMK,cAAc,GAAGD,aAAa,CAACF,SAAD,CAApC;;AAEA,QAAI,CAACG,cAAL,EAAqB;AACpB,aAAO,EAAP;AACA;;AAED,WAAOA,cAAc,CAACU,GAAf,CAAmBJ,KAAK,IAAI;AAClC,aAAOA,KAAK,CAAC,UAAD,CAAL,CAAkBK,IAAlB,CAAuB,IAAvB,EAA6BF,IAA7B,CAAP,CADkC,CACS;AAC3C,KAFM,CAAP;AAGA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;;;AACCG,EAAAA,cAAc,CAACf,SAAD,EAAYY,IAAZ,EAAkB;AAC/B,WAAOI,OAAO,CAACC,GAAR,CAAY,KAAKN,SAAL,CAAeX,SAAf,EAA0BY,IAA1B,CAAZ,CAAP;AACA;;AAEDM,EAAAA,iBAAiB,CAAClB,SAAD,EAAYC,UAAZ,EAAwB;AACxC,UAAMC,aAAa,GAAG,KAAKJ,cAA3B;AACA,UAAMK,cAAc,GAAGD,aAAa,CAACF,SAAD,CAApC;;AAEA,QAAI,CAACG,cAAL,EAAqB;AACpB,aAAO,KAAP;AACA;;AAED,SAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,cAAc,CAACO,MAAnC,EAA2CS,CAAC,EAA5C,EAAgD;AAC/C,YAAMV,KAAK,GAAGN,cAAc,CAACgB,CAAD,CAA5B;;AACA,UAAIV,KAAK,CAAC,UAAD,CAAL,KAAsBR,UAA1B,EAAsC;AAAE;AACvC,eAAO,IAAP;AACA;AACD;;AAED,WAAO,KAAP;AACA;;AAEDmB,EAAAA,YAAY,CAACpB,SAAD,EAAY;AACvB,WAAO,CAAC,CAAC,KAAKF,cAAL,CAAoBE,SAApB,CAAT;AACA;;AAvFkB;;AA0FpB,eAAeJ,aAAf","sourcesContent":["class EventProvider {\n\tconstructor() {\n\t\tthis._eventRegistry = {};\n\t}\n\n\tattachEvent(eventName, fnFunction) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tlet eventListeners = eventRegistry[eventName];\n\n\t\tif (!Array.isArray(eventListeners)) {\n\t\t\teventRegistry[eventName] = [];\n\t\t\teventListeners = eventRegistry[eventName];\n\t\t}\n\n\t\teventListeners.push({\n\t\t\t\"function\": fnFunction,\n\t\t});\n\t}\n\n\tdetachEvent(eventName, fnFunction) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tlet eventListeners = eventRegistry[eventName];\n\n\t\tif (!eventListeners) {\n\t\t\treturn;\n\t\t}\n\n\t\teventListeners = eventListeners.filter(event => {\n\t\t\treturn event[\"function\"] !== fnFunction; // eslint-disable-line\n\t\t});\n\n\t\tif (eventListeners.length === 0) {\n\t\t\tdelete eventRegistry[eventName];\n\t\t}\n\t}\n\n\t/**\n\t * Fires an event and returns the results of all event listeners as an array.\n\t *\n\t * @param eventName the event to fire\n\t * @param data optional data to pass to each event listener\n\t * @returns {Array} an array with the results of all event listeners\n\t */\n\tfireEvent(eventName, data) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry[eventName];\n\n\t\tif (!eventListeners) {\n\t\t\treturn [];\n\t\t}\n\n\t\treturn eventListeners.map(event => {\n\t\t\treturn event[\"function\"].call(this, data); // eslint-disable-line\n\t\t});\n\t}\n\n\t/**\n\t * Fires an event and returns a promise that will resolve once all listeners have resolved.\n\t *\n\t * @param eventName the event to fire\n\t * @param data optional data to pass to each event listener\n\t * @returns {Promise} a promise that will resolve when all listeners have resolved\n\t */\n\tfireEventAsync(eventName, data) {\n\t\treturn Promise.all(this.fireEvent(eventName, data));\n\t}\n\n\tisHandlerAttached(eventName, fnFunction) {\n\t\tconst eventRegistry = this._eventRegistry;\n\t\tconst eventListeners = eventRegistry[eventName];\n\n\t\tif (!eventListeners) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < eventListeners.length; i++) {\n\t\t\tconst event = eventListeners[i];\n\t\t\tif (event[\"function\"] === fnFunction) { // eslint-disable-line\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\thasListeners(eventName) {\n\t\treturn !!this._eventRegistry[eventName];\n\t}\n}\n\nexport default EventProvider;\n"]},"metadata":{},"sourceType":"module"}