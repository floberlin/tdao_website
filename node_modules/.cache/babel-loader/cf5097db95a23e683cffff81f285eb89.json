{"ast":null,"code":"import { noChange as t } from \"../lit-html.js\";\nimport { directive as s, Directive as r, PartType as i } from \"../directive.js\";\n/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst e = s(class extends r {\n  constructor(t) {\n    var s;\n    if (super(t), t.type !== i.ATTRIBUTE || \"class\" !== t.name || (null === (s = t.strings) || void 0 === s ? void 0 : s.length) > 2) throw Error(\"`classMap()` can only be used in the `class` attribute and must be the only part in the attribute.\");\n  }\n\n  render(t) {\n    return Object.keys(t).filter(s => t[s]).join(\" \");\n  }\n\n  update(s, [r]) {\n    if (void 0 === this.bt) {\n      this.bt = new Set();\n\n      for (const t in r) r[t] && this.bt.add(t);\n\n      return this.render(r);\n    }\n\n    const i = s.element.classList;\n    this.bt.forEach(t => {\n      t in r || (i.remove(t), this.bt.delete(t));\n    });\n\n    for (const t in r) {\n      const s = !!r[t];\n      s !== this.bt.has(t) && (s ? (i.add(t), this.bt.add(t)) : (i.remove(t), this.bt.delete(t)));\n    }\n\n    return t;\n  }\n\n});\nexport { e as classMap };","map":{"version":3,"sources":["../src/directives/class-map.ts"],"names":["Directive","[object Object]","partInfo","super","type","PartType","ATTRIBUTE","name","strings","length","Error","classInfo","Object","keys","filter","key","join","part","this","_previousClasses","undefined","Set","add","render","classList","element","forEach","remove","delete","value","has","noChange","classMap","directive"],"mappings":";;;;;;;;MA0GagC,CAAAA,GAAWC,CAAAA,CApFxB,cAAgCjC,CAAhC,CAAgCA;AAO9BC,EAAAA,WAAAA,CAAYC,CAAZD,EAAYC;AAAAA,QAAAA,CAAAA;AAEV,QADAC,MAAMD,CAANC,GAEED,CAAAA,CAASE,IAATF,KAAkBG,CAAAA,CAASC,SAA3BJ,IACkB,YAAlBA,CAAAA,CAASK,IADTL,IACSK,CAAAA,UAAAA,CAAAA,GACRL,CAAAA,CAASM,OADDD,KACCC,KAAAA,CAAAA,KAAAA,CADDD,GACCC,KAAAA,CADDD,GACCC,CAAAA,CAASC,MADVF,IAC8B,CAHzC,EAKE,MAAUG,KAAAA,CACR,oGADQA,CAAV;AAOJT;;AAAAA,EAAAA,MAAAA,CAAOU,CAAPV,EAAOU;AACL,WAAOC,MAAAA,CAAOC,IAAPD,CAAYD,CAAZC,EACJE,MADIF,CACIG,CAAAA,IAAQJ,CAAAA,CAAUI,CAAVJ,CADZC,EAEJI,IAFIJ,CAEC,GAFDA,CAAP;AAKFX;;AAAAA,EAAAA,MAAAA,CAAOgB,CAAPhB,EAAOgB,CAAsBN,CAAtBM,CAAPhB,EAA6BU;AAE3B,QAAA,KAA8BS,CAA9B,KAAIF,KAAKC,EAAT,EAAyC;AACvCD,WAAKC,EAALD,GAAwB,IAAIG,GAAJ,EAAxBH;;AACA,WAAK,MAAMX,CAAX,IAAmBI,CAAnB,EACMA,CAAAA,CAAUJ,CAAVI,CAAAA,IACFO,KAAKC,EAALD,CAAsBI,GAAtBJ,CAA0BX,CAA1BW,CADEP;;AAIN,aAAOO,KAAKK,MAALL,CAAYP,CAAZO,CAAP;AAGF;;AAAA,UAAMM,CAAAA,GAAYP,CAAAA,CAAKQ,OAALR,CAAaO,SAA/B;AAKAN,SAAKC,EAALD,CAAsBQ,OAAtBR,CAA+BX,CAAAA,IAAAA;AACvBA,MAAAA,CAAAA,IAAQI,CAARJ,KACJiB,CAAAA,CAAUG,MAAVH,CAAiBjB,CAAjBiB,GACAN,KAAKC,EAALD,CAAuBU,MAAvBV,CAA8BX,CAA9BW,CAFIX;AAE0BA,KAHlCW;;AAQA,SAAK,MAAMX,CAAX,IAAmBI,CAAnB,EAA8B;AAG5B,YAAMkB,CAAAA,GAAAA,CAAAA,CAAUlB,CAAAA,CAAUJ,CAAVI,CAAhB;AACIkB,MAAAA,CAAAA,KAAUX,KAAKC,EAALD,CAAsBY,GAAtBZ,CAA0BX,CAA1BW,CAAVW,KACEA,CAAAA,IACFL,CAAAA,CAAUF,GAAVE,CAAcjB,CAAdiB,GACAN,KAAKC,EAALD,CAAsBI,GAAtBJ,CAA0BX,CAA1BW,CAFEW,KAIFL,CAAAA,CAAUG,MAAVH,CAAiBjB,CAAjBiB,GACAN,KAAKC,EAALD,CAAsBU,MAAtBV,CAA6BX,CAA7BW,CALEW,CADFA;AAUN;;AAAA,WAAOE,CAAP;AAAOA;;AAlEqB/B,CAoFRiC,C;AAlBbF,SAAAA,CAAAA,IAAAA,QAAAA","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {AttributePart, noChange} from '../lit-html.js';\nimport {\n  directive,\n  Directive,\n  DirectiveParameters,\n  PartInfo,\n  PartType,\n} from '../directive.js';\n\n/**\n * A key-value set of class names to truthy values.\n */\nexport interface ClassInfo {\n  readonly [name: string]: string | boolean | number;\n}\n\nclass ClassMapDirective extends Directive {\n  /**\n   * Stores the ClassInfo object applied to a given AttributePart.\n   * Used to unset existing values when a new ClassInfo object is applied.\n   */\n  private _previousClasses?: Set<string>;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (\n      partInfo.type !== PartType.ATTRIBUTE ||\n      partInfo.name !== 'class' ||\n      (partInfo.strings?.length as number) > 2\n    ) {\n      throw new Error(\n        '`classMap()` can only be used in the `class` attribute ' +\n          'and must be the only part in the attribute.'\n      );\n    }\n  }\n\n  render(classInfo: ClassInfo) {\n    return Object.keys(classInfo)\n      .filter((key) => classInfo[key])\n      .join(' ');\n  }\n\n  update(part: AttributePart, [classInfo]: DirectiveParameters<this>) {\n    // Remember dynamic classes on the first render\n    if (this._previousClasses === undefined) {\n      this._previousClasses = new Set();\n      for (const name in classInfo) {\n        if (classInfo[name]) {\n          this._previousClasses.add(name);\n        }\n      }\n      return this.render(classInfo);\n    }\n\n    const classList = part.element.classList;\n\n    // Remove old classes that no longer apply\n    // We use forEach() instead of for-of so that we don't require down-level\n    // iteration.\n    this._previousClasses.forEach((name) => {\n      if (!(name in classInfo)) {\n        classList.remove(name);\n        this._previousClasses!.delete(name);\n      }\n    });\n\n    // Add or remove classes based on their classMap value\n    for (const name in classInfo) {\n      // We explicitly want a loose truthy check of `value` because it seems\n      // more convenient that '' and 0 are skipped.\n      const value = !!classInfo[name];\n      if (value !== this._previousClasses.has(name)) {\n        if (value) {\n          classList.add(name);\n          this._previousClasses.add(name);\n        } else {\n          classList.remove(name);\n          this._previousClasses.delete(name);\n        }\n      }\n    }\n    return noChange;\n  }\n}\n\n/**\n * A directive that applies dynamic CSS classes.\n *\n * This must be used in the `class` attribute and must be the only part used in\n * the attribute. It takes each property in the `classInfo` argument and adds\n * the property name to the element's `classList` if the property value is\n * truthy; if the property value is falsey, the property name is removed from\n * the element's `class`.\n *\n * For example `{foo: bar}` applies the class `foo` if the value of `bar` is\n * truthy.\n *\n * @param classInfo\n */\nexport const classMap = directive(ClassMapDirective);\n\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\nexport type {ClassMapDirective};\n"]},"metadata":{},"sourceType":"module"}