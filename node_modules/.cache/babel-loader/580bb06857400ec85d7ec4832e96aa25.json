{"ast":null,"code":"import { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\nimport { VSD_DIALOG_TITLE_SORT, VSD_SUBMIT_BUTTON, VSD_CANCEL_BUTTON, VSD_RESET_BUTTON, VSD_SORT_ORDER, VSD_SORT_BY, VSD_ORDER_ASCENDING, VSD_ORDER_DESCENDING, VSD_FILTER_BY } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\"; // Styles\n\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-view-settings-dialog\",\n  managedSlots: true,\n  properties:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Defines the initial sort order.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    sortDescending: {\n      type: Boolean\n    },\n\n    /**\n     * Keeps recently focused list in order to focus it on next dialog open.\n     *\n     * @type {Object}\n     * @private\n     */\n    _recentlyFocused: {\n      type: Object\n    },\n\n    /**\n     * Stores settings of the dialog before the initial open.\n     *\n     * @type {Object}\n     * @private\n     */\n    _initialSettings: {\n      type: Object\n    },\n\n    /**\n     * Stores settings of the dialog after confirmation.\n     *\n     * @type {Object}\n     * @private\n     */\n    _confirmedSettings: {\n      type: Object\n    },\n\n    /**\n     * Stores current settings of the dialog.\n     *\n     * @type {Object}\n     * @private\n     */\n    _currentSettings: {\n      type: Object\n    },\n\n    /**\n     * Defnies the current mode of the component.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _currentMode: {\n      type: ViewSettingsDialogMode,\n      defaultValue: ViewSettingsDialogMode.Sort\n    },\n\n    /**\n     * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _filterStepTwo: {\n      type: Boolean\n    }\n  },\n  slots:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Defines the list of items against which the user could sort data.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n     * @slot sortItems\n     * @public\n     */\n    sortItems: {\n      type: HTMLElement\n    },\n\n    /**\n     * Defines the <code>filterItems</code> list.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n     * @slot filterItems\n     * @public\n     */\n    filterItems: {\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Fired when confirmation button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @public\n     */\n    confirm: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        filters: {\n          type: Array\n        }\n      }\n    },\n\n    /**\n     * Fired when cancel button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @public\n     */\n    cancel: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        filters: {\n          type: Array\n        }\n      }\n    }\n  }\n};\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends UI5Element\n * @tagname ui5-view-settings-dialog\n * @since 1.0.0-rc.16\n * @public\n */\n\nclass ViewSettingsDialog extends UI5Element {\n  constructor() {\n    super();\n    this._currentSettings = {\n      sortOrder: [],\n      sortBy: [],\n      filters: []\n    };\n  }\n\n  onBeforeRendering() {\n    if (this._currentSettings.filters && this._currentSettings.filters.length) {\n      this._setAdditionalTexts();\n    }\n  }\n\n  _setAdditionalTexts() {\n    // Add the additional text to the filter options\n    this.filterItems.forEach((filter, index) => {\n      let selectedCount = 0;\n\n      for (let i = 0; i < filter.values.length; i++) {\n        if (this._currentSettings.filters[index].filterOptions[i].selected) {\n          selectedCount++;\n        }\n      }\n\n      filter.additionalText = !selectedCount ? \"\" : selectedCount;\n    });\n  }\n\n  static get render() {\n    return litRender;\n  }\n\n  static get metadata() {\n    return metadata;\n  }\n\n  static get dependencies() {\n    return [Bar, Button, Dialog, Label, List, StandardListItem, GroupHeaderListItem, SegmentedButton, SegmentedButtonItem];\n  }\n\n  static get template() {\n    return ViewSettingsDialogTemplate;\n  }\n\n  static get styles() {\n    return viewSettingsDialogCSS;\n  }\n\n  static async onDefine() {\n    ViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n  }\n\n  get _selectedFilter() {\n    for (let i = 0; i < this._currentSettings.filters.length; i++) {\n      if (this._currentSettings.filters[i].selected) {\n        return this._currentSettings.filters[i];\n      }\n    }\n\n    return \"\";\n  }\n\n  get _filterByTitle() {\n    return `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${this._selectedFilter.text}`;\n  }\n\n  get _dialogTitle() {\n    const currentModeText = this._currentMode === ViewSettingsDialogMode.Sort ? VSD_DIALOG_TITLE_SORT : VSD_FILTER_BY;\n    return ViewSettingsDialog.i18nBundle.getText(currentModeText);\n  }\n\n  get _okButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n  }\n\n  get _cancelButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n  }\n\n  get _resetButtonLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n  }\n\n  get _ascendingLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n  }\n\n  get _descendingLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n  }\n\n  get _sortOrderLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n  }\n\n  get _filterByLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n  }\n\n  get _sortByLabel() {\n    return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n  }\n\n  get _isPhone() {\n    return isPhone();\n  }\n\n  get _sortAscending() {\n    return !this.sortDescending;\n  }\n  /**\n   * Determines disabled state of the <code>Reset</code> button.\n   */\n\n\n  get _disableResetButton() {\n    return this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n  }\n\n  get _sortSetttingsAreInitial() {\n    let settingsAreInitial = true;\n    [\"sortBy\", \"sortOrder\"].forEach(sortList => {\n      this._currentSettings[sortList].forEach((item, index) => {\n        if (item.selected !== this._initialSettings[sortList][index].selected) {\n          settingsAreInitial = false;\n        }\n      });\n    });\n    return settingsAreInitial;\n  }\n\n  get _filteresAreInitial() {\n    let filtersAreInitial = true;\n\n    this._currentSettings.filters.forEach((filter, index) => {\n      for (let i = 0; i < filter.filterOptions.length; i++) {\n        if (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n          filtersAreInitial = false;\n        }\n      }\n    });\n\n    return filtersAreInitial;\n  }\n  /**\n   * Returns the current settings (current state of all lists).\n   */\n\n\n  get _settings() {\n    return {\n      sortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n      sortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n      filters: this.filterItems.map(item => {\n        return {\n          text: item.text,\n          selected: false,\n          filterOptions: item.values.map(optionValue => {\n            return {\n              text: optionValue.text,\n              selected: optionValue.selected\n            };\n          })\n        };\n      })\n    };\n  }\n\n  get initSortByItems() {\n    return this.sortItems.map(item => {\n      return {\n        text: item.text,\n        selected: item.selected\n      };\n    });\n  }\n\n  get initSortOrderItems() {\n    return [{\n      text: this._ascendingLabel,\n      selected: true\n    }, {\n      text: this._descendingLabel,\n      selected: false\n    }];\n  }\n\n  get isModeSort() {\n    return this._currentMode === ViewSettingsDialogMode.Sort;\n  }\n\n  get isModeFilter() {\n    return this._currentMode === ViewSettingsDialogMode.Filter;\n  }\n\n  get showBackButton() {\n    return this.isModeFilter && this._filterStepTwo;\n  }\n\n  get _sortOrderListDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n  }\n\n  get _sortByList() {\n    return this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n  }\n\n  get _dialogDomRef() {\n    return this.shadowRoot.querySelector(\"[ui5-dialog]\");\n  }\n  /**\n   * Shows the dialog.\n   * @public\n   */\n\n\n  show() {\n    if (!this._dialog) {\n      this._sortOrder = this._sortOrderListDomRef;\n      this._sortBy = this._sortByList; // Sorting\n\n      this._initialSettings = this._settings;\n      this._currentSettings = this._settings;\n      this._confirmedSettings = this._settings;\n      this._dialog = this._dialogDomRef;\n    } else {\n      this._restoreSettings(this._confirmedSettings);\n    }\n\n    this._dialog.show();\n  }\n\n  _handleModeChange(event) {\n    this._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n  }\n\n  _handleFilterValueItemClick(event) {\n    // Update the component state\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      if (filter.selected) {\n        filter.filterOptions.forEach(option => {\n          if (option.text === event.detail.item.innerText) {\n            option.selected = !option.selected;\n          }\n        });\n      }\n\n      return filter;\n    });\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n\n  _navigateToFilters(event) {\n    this._filterStepTwo = false;\n  }\n\n  _changeCurrentFilter(event) {\n    this._filterStepTwo = true;\n    this._currentSettings.filters = this._currentSettings.filters.map(filter => {\n      filter.selected = filter.text === event.detail.item.text;\n      return filter;\n    });\n  }\n  /**\n   * Closes the dialog.\n   */\n\n\n  close() {\n    this._dialog && this._dialog.close();\n  }\n  /**\n   * Sets focus on recently used control within the dialog.\n   */\n\n\n  _focusRecentlyUsedControl() {\n    if (!Object.keys(this._recentlyFocused).length) {\n      return;\n    }\n\n    const recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n          recentlyFocusedItems = this._recentlyFocused.items,\n          slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n\n    if (recentlyFocusedSelectedItems.length) {\n      recentlyFocusedSelectedItems[0].focus();\n    } else if (slottedNodesExist) {\n      this._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n    }\n  }\n  /**\n   * Stores current settings as confirmed and fires <code>confirm</code> event.\n   */\n\n\n  _confirmSettings() {\n    this.close();\n    this._confirmedSettings = this._currentSettings;\n    this.fireEvent(\"confirm\", this.eventsParams);\n  }\n  /**\n   * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n   */\n\n\n  _cancelSettings() {\n    this._restoreSettings(this._confirmedSettings);\n\n    this.fireEvent(\"cancel\", this.eventsParams);\n    this.close();\n  }\n\n  get eventsParams() {\n    const _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n          _currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n          sortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n          sortBy = _currentSortBySelected && _currentSortBySelected.text;\n\n    return {\n      sortOrder,\n      sortBy,\n      filters: this.selectedFilters\n    };\n  }\n\n  get selectedFilters() {\n    const result = [];\n\n    this._currentSettings.filters.forEach(filter => {\n      const selectedOptions = [];\n      filter.filterOptions.forEach(option => {\n        if (option.selected) {\n          selectedOptions.push(option.text);\n        }\n      });\n\n      if (selectedOptions.length) {\n        result.push({});\n        result[result.length - 1][filter.text] = selectedOptions;\n      }\n    });\n\n    return result;\n  }\n  /**\n   * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n   *\n   * @param {event} evt\n   */\n\n\n  _restoreConfirmedOnEscape(evt) {\n    if (evt.detail.escPressed) {\n      this._cancelSettings();\n\n      this._currentMode = \"Sort\";\n      this._filterStepTwo = false;\n    }\n  }\n  /**\n   * Resets the control settings to their initial state.\n   */\n\n\n  _resetSettings() {\n    this._restoreSettings(this._initialSettings);\n\n    this._filterStepTwo = false;\n    this._recentlyFocused = this._sortOrder;\n\n    this._focusRecentlyUsedControl();\n  }\n  /**\n   * Sets current settings to ones passed as <code>settings</code> argument.\n   *\n   * @param {Object} settings\n   */\n\n\n  _restoreSettings(settings) {\n    this._currentSettings = JSON.parse(JSON.stringify(settings));\n  }\n  /**\n   * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n   */\n\n\n  _onSortOrderChange(event) {\n    this._recentlyFocused = this._sortOrder;\n    this._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n      item.selected = item.text === event.detail.item.innerText;\n      return item;\n    }); // Invalidate\n\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n  /**\n   * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n   */\n\n\n  _onSortByChange(event) {\n    this._recentlyFocused = this._sortBy;\n    this._currentSettings.sortBy = this.initSortByItems.map(item => {\n      item.selected = item.text === event.detail.item.innerText;\n      return item;\n    }); // Invalidate\n\n    this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n  }\n\n}\n\nViewSettingsDialog.define();\nexport default ViewSettingsDialog;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js"],"names":["getI18nBundle","isPhone","litRender","UI5Element","Dialog","Button","Label","GroupHeaderListItem","List","StandardListItem","SegmentedButton","SegmentedButtonItem","Bar","ViewSettingsDialogMode","VSD_DIALOG_TITLE_SORT","VSD_SUBMIT_BUTTON","VSD_CANCEL_BUTTON","VSD_RESET_BUTTON","VSD_SORT_ORDER","VSD_SORT_BY","VSD_ORDER_ASCENDING","VSD_ORDER_DESCENDING","VSD_FILTER_BY","ViewSettingsDialogTemplate","viewSettingsDialogCSS","metadata","tag","managedSlots","properties","sortDescending","type","Boolean","_recentlyFocused","Object","_initialSettings","_confirmedSettings","_currentSettings","_currentMode","defaultValue","Sort","_filterStepTwo","slots","sortItems","HTMLElement","filterItems","events","confirm","detail","sortOrder","String","sortBy","filters","Array","cancel","ViewSettingsDialog","constructor","onBeforeRendering","length","_setAdditionalTexts","forEach","filter","index","selectedCount","i","values","filterOptions","selected","additionalText","render","dependencies","template","styles","onDefine","i18nBundle","_selectedFilter","_filterByTitle","getText","text","_dialogTitle","currentModeText","_okButtonLabel","_cancelButtonLabel","_resetButtonLabel","_ascendingLabel","_descendingLabel","_sortOrderLabel","_filterByLabel","_sortByLabel","_isPhone","_sortAscending","_disableResetButton","_dialog","_sortSetttingsAreInitial","_filteresAreInitial","settingsAreInitial","sortList","item","filtersAreInitial","_settings","JSON","parse","stringify","initSortOrderItems","initSortByItems","map","optionValue","isModeSort","isModeFilter","Filter","showBackButton","_sortOrderListDomRef","shadowRoot","querySelector","_sortByList","_dialogDomRef","show","_sortOrder","_sortBy","_restoreSettings","_handleModeChange","event","selectedItem","getAttribute","_handleFilterValueItemClick","option","innerText","_navigateToFilters","_changeCurrentFilter","close","_focusRecentlyUsedControl","keys","recentlyFocusedSelectedItems","getSelectedItems","recentlyFocusedItems","items","slottedNodesExist","assignedNodes","focus","focusItem","_confirmSettings","fireEvent","eventsParams","_cancelSettings","_currentSortOrderSelected","_currentSortBySelected","selectedFilters","result","selectedOptions","push","_restoreConfirmedOnEscape","evt","escPressed","_resetSettings","settings","_onSortOrderChange","_onSortByChange","define"],"mappings":"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","sourcesContent":["import { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\n\nimport {\n\tVSD_DIALOG_TITLE_SORT,\n\tVSD_SUBMIT_BUTTON,\n\tVSD_CANCEL_BUTTON,\n\tVSD_RESET_BUTTON,\n\tVSD_SORT_ORDER,\n\tVSD_SORT_BY,\n\tVSD_ORDER_ASCENDING,\n\tVSD_ORDER_DESCENDING,\n\tVSD_FILTER_BY,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-view-settings-dialog\",\n\tmanagedSlots: true,\n\tproperties: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the initial sort order.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\t sortDescending: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Keeps recently focused list in order to focus it on next dialog open.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _recentlyFocused: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog before the initial open.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _initialSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog after confirmation.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _confirmedSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores current settings of the dialog.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _currentSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Defnies the current mode of the component.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_currentMode: {\n\t\t\ttype: ViewSettingsDialogMode,\n\t\t\tdefaultValue: ViewSettingsDialogMode.Sort,\n\t\t},\n\n\t\t/**\n\t\t * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_filterStepTwo: {\n\t\t\ttype: Boolean,\n\t\t},\n\t},\n\tslots: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the list of items against which the user could sort data.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n\t\t * @slot sortItems\n\t\t * @public\n\t\t */\n\t\t sortItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\n\t\t/**\n\t\t * Defines the <code>filterItems</code> list.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n\t\t * @slot filterItems\n\t\t * @public\n\t\t */\n\t\tfilterItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\n\t\t/**\n\t\t * Fired when confirmation button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @public\n\t\t */\n\t\tconfirm: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\n\t\t/**\n\t\t * Fired when cancel button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @public\n\t\t */\n\t\tcancel: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\t},\n};\n\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends UI5Element\n * @tagname ui5-view-settings-dialog\n * @since 1.0.0-rc.16\n * @public\n */\nclass ViewSettingsDialog extends UI5Element {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._currentSettings = {\n\t\t\tsortOrder: [],\n\t\t\tsortBy: [],\n\t\t\tfilters: [],\n\t\t};\n\t}\n\n\tonBeforeRendering() {\n\t\tif (this._currentSettings.filters && this._currentSettings.filters.length) {\n\t\t\tthis._setAdditionalTexts();\n\t\t}\n\t}\n\n\t_setAdditionalTexts() {\n\t\t// Add the additional text to the filter options\n\t\tthis.filterItems.forEach((filter, index) => {\n\t\t\tlet selectedCount = 0;\n\t\t\tfor (let i = 0; i < filter.values.length; i++) {\n\t\t\t\tif (this._currentSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tselectedCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfilter.additionalText = !selectedCount ? \"\" : selectedCount;\n\t\t});\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [\n\t\t\tBar,\n\t\t\tButton,\n\t\t\tDialog,\n\t\t\tLabel,\n\t\t\tList,\n\t\t\tStandardListItem,\n\t\t\tGroupHeaderListItem,\n\t\t\tSegmentedButton,\n\t\t\tSegmentedButtonItem,\n\t\t];\n\t}\n\n\tstatic get template() {\n\t\treturn ViewSettingsDialogTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn viewSettingsDialogCSS;\n\t}\n\n\tstatic async onDefine() {\n\t\tViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n\t}\n\n\tget _selectedFilter() {\n\t\tfor (let i = 0; i < this._currentSettings.filters.length; i++) {\n\t\t\tif (this._currentSettings.filters[i].selected) {\n\t\t\t\treturn this._currentSettings.filters[i];\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tget _filterByTitle() {\n\t\treturn `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${this._selectedFilter.text}`;\n\t}\n\n\tget _dialogTitle() {\n\t\tconst currentModeText = this._currentMode === ViewSettingsDialogMode.Sort ? VSD_DIALOG_TITLE_SORT : VSD_FILTER_BY;\n\t\treturn ViewSettingsDialog.i18nBundle.getText(currentModeText);\n\t}\n\n\tget _okButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n\t}\n\n\tget _cancelButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n\t}\n\n\tget _resetButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n\t}\n\n\tget _ascendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n\t}\n\n\tget _descendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n\t}\n\n\tget _sortOrderLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n\t}\n\n\tget _filterByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n\t}\n\n\tget _sortByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n\t}\n\n\tget _isPhone() {\n\t\treturn isPhone();\n\t}\n\n\tget _sortAscending() {\n\t\treturn !this.sortDescending;\n\t}\n\n\t/**\n\t * Determines disabled state of the <code>Reset</code> button.\n\t */\n\tget _disableResetButton() {\n\t\treturn this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n\t}\n\n\tget _sortSetttingsAreInitial() {\n\t\tlet settingsAreInitial = true;\n\t\t[\"sortBy\", \"sortOrder\"].forEach(sortList => {\n\t\t\tthis._currentSettings[sortList].forEach((item, index) => {\n\t\t\t\tif (item.selected !== this._initialSettings[sortList][index].selected) {\n\t\t\t\t\tsettingsAreInitial = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn settingsAreInitial;\n\t}\n\n\tget _filteresAreInitial() {\n\t\tlet filtersAreInitial = true;\n\t\tthis._currentSettings.filters.forEach((filter, index) => {\n\t\t\tfor (let i = 0; i < filter.filterOptions.length; i++) {\n\t\t\t\tif (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tfiltersAreInitial = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn filtersAreInitial;\n\t}\n\n\t/**\n\t * Returns the current settings (current state of all lists).\n\t */\n\tget _settings() {\n\t\treturn {\n\t\t\tsortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n\t\t\tsortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n\t\t\tfilters: this.filterItems.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: item.text,\n\t\t\t\t\tselected: false,\n\t\t\t\t\tfilterOptions: item.values.map(optionValue => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: optionValue.text,\n\t\t\t\t\t\t\tselected: optionValue.selected,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tget initSortByItems() {\n\t\treturn this.sortItems.map(item => {\n\t\t\treturn {\n\t\t\t\ttext: item.text,\n\t\t\t\tselected: item.selected,\n\t\t\t};\n\t\t});\n\t}\n\n\tget initSortOrderItems() {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: this._ascendingLabel,\n\t\t\t\tselected: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: this._descendingLabel,\n\t\t\t\tselected: false,\n\t\t\t},\n\t\t];\n\t}\n\n\tget isModeSort() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Sort;\n\t}\n\n\tget isModeFilter() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Filter;\n\t}\n\n\tget showBackButton() {\n\t\treturn this.isModeFilter && this._filterStepTwo;\n\t}\n\n\tget _sortOrderListDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n\t}\n\n\tget _sortByList() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n\t}\n\n\tget _dialogDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-dialog]\");\n\t}\n\n\t/**\n\t * Shows the dialog.\n\t * @public\n\t */\n\tshow() {\n\t\tif (!this._dialog) {\n\t\t\tthis._sortOrder = this._sortOrderListDomRef;\n\t\t\tthis._sortBy = this._sortByList;\n\n\t\t\t// Sorting\n\t\t\tthis._initialSettings = this._settings;\n\t\t\tthis._currentSettings = this._settings;\n\t\t\tthis._confirmedSettings = this._settings;\n\n\t\t\tthis._dialog = this._dialogDomRef;\n\t\t} else {\n\t\t\tthis._restoreSettings(this._confirmedSettings);\n\t\t}\n\t\tthis._dialog.show();\n\t}\n\n\t_handleModeChange(event) {\n\t\tthis._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n\t}\n\n\t_handleFilterValueItemClick(event) {\n\t\t// Update the component state\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tif (filter.selected) {\n\t\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\t\tif (option.text === event.detail.item.innerText) {\n\t\t\t\t\t\toption.selected = !option.selected;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn filter;\n\t\t});\n\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t_navigateToFilters(event) {\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t_changeCurrentFilter(event) {\n\t\tthis._filterStepTwo = true;\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tfilter.selected = filter.text === event.detail.item.text;\n\n\t\t\treturn filter;\n\t\t});\n\t}\n\n\t/**\n\t * Closes the dialog.\n\t */\n\tclose() {\n\t\tthis._dialog && this._dialog.close();\n\t}\n\n\t/**\n\t * Sets focus on recently used control within the dialog.\n\t */\n\t_focusRecentlyUsedControl() {\n\t\tif (!Object.keys(this._recentlyFocused).length) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n\t\t\t  recentlyFocusedItems = this._recentlyFocused.items,\n\t\t\t  slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n\n\t\tif (recentlyFocusedSelectedItems.length) {\n\t\t\trecentlyFocusedSelectedItems[0].focus();\n\t\t} else if (slottedNodesExist) {\n\t\t\tthis._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n\t\t}\n\t}\n\n\t/**\n\t * Stores current settings as confirmed and fires <code>confirm</code> event.\n\t */\n\t_confirmSettings() {\n\t\tthis.close();\n\t\tthis._confirmedSettings = this._currentSettings;\n\n\t\tthis.fireEvent(\"confirm\", this.eventsParams);\n\t}\n\n\t/**\n\t * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n\t */\n\t_cancelSettings() {\n\t\tthis._restoreSettings(this._confirmedSettings);\n\n\t\tthis.fireEvent(\"cancel\", this.eventsParams);\n\t\tthis.close();\n\t}\n\n\tget eventsParams() {\n\t\tconst _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n\t\t\t_currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n\t\t\tsortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n\t\t\tsortBy = _currentSortBySelected && _currentSortBySelected.text;\n\n\t\treturn {\n\t\t\tsortOrder,\n\t\t\tsortBy,\n\t\t\tfilters: this.selectedFilters,\n\t\t};\n\t}\n\n\tget selectedFilters() {\n\t\tconst result = [];\n\n\t\tthis._currentSettings.filters.forEach(filter => {\n\t\t\tconst selectedOptions = [];\n\n\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\tif (option.selected) {\n\t\t\t\t\tselectedOptions.push(option.text);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (selectedOptions.length) {\n\t\t\t\tresult.push({});\n\t\t\t\tresult[result.length - 1][filter.text] = selectedOptions;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n\t *\n\t * @param {event} evt\n\t */\n\t_restoreConfirmedOnEscape(evt) {\n\t\tif (evt.detail.escPressed) {\n\t\t\tthis._cancelSettings();\n\t\t\tthis._currentMode = \"Sort\";\n\t\t\tthis._filterStepTwo = false;\n\t\t}\n\t}\n\n\t/**\n\t * Resets the control settings to their initial state.\n\t */\n\t_resetSettings() {\n\t\tthis._restoreSettings(this._initialSettings);\n\t\tthis._filterStepTwo = false;\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._focusRecentlyUsedControl();\n\t}\n\n\t/**\n\t * Sets current settings to ones passed as <code>settings</code> argument.\n\t *\n\t * @param {Object} settings\n\t */\n\t_restoreSettings(settings) {\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(settings));\n\t}\n\n\t/**\n\t * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n\t */\n\t_onSortOrderChange(event) {\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n\t\t\titem.selected = item.text === event.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n\t */\n\t _onSortByChange(event) {\n\t\tthis._recentlyFocused = this._sortBy;\n\t\tthis._currentSettings.sortBy = this.initSortByItems.map(item => {\n\t\t\titem.selected = item.text === event.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n}\n\nViewSettingsDialog.define();\n\nexport default ViewSettingsDialog;\n"]},"metadata":{},"sourceType":"module"}