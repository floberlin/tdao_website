{"ast":null,"code":"import { html as t, svg as e } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nconst o = t => ({\n  _$litStatic$: t\n}),\n      r = (t, ...e) => ({\n  _$litStatic$: e.reduce((e, o, r) => e + (t => {\n    if (void 0 !== t._$litStatic$) return t._$litStatic$;\n    throw Error(`Value passed to 'literal' function must be a 'literal' result: ${t}. Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.`);\n  })(o) + t[r + 1], t[0])\n}),\n      i = new Map(),\n      a = t => (e, ...o) => {\n  var r;\n  const a = o.length;\n  let l, s;\n  const n = [],\n        u = [];\n  let c,\n      $ = 0,\n      v = !1;\n\n  for (; $ < a;) {\n    for (c = e[$]; $ < a && void 0 !== (s = o[$], l = null === (r = s) || void 0 === r ? void 0 : r._$litStatic$);) c += l + e[++$], v = !0;\n\n    u.push(s), n.push(c), $++;\n  }\n\n  if ($ === a && n.push(e[a]), v) {\n    const t = n.join(\"$$lit$$\");\n    void 0 === (e = i.get(t)) && i.set(t, e = n), o = u;\n  }\n\n  return t(e, ...o);\n},\n      l = a(t),\n      s = a(e);\n\nexport { l as html, r as literal, s as svg, o as unsafeStatic, a as withStatic };","map":{"version":3,"sources":["src/static.ts"],"names":["unsafeStatic","value","_$litStatic$","undefined","Error","literal","strings","values","reduce","acc","v","idx","stringsCache","Map","withStatic","coreTag","l","length","staticValue","dynamicValue","staticStrings","dynamicValues","i","hasStatics","s","push","key","join","get","set","html","coreHtml","svg","coreSvg"],"mappings":";;;;;;;MAqBaA,CAAAA,GAAgBC,CAAAA,KAAAA;AAC3BC,EAAAA,YAAAA,EAAkBD;AADSA,CAAAA,C;MA6BhBI,CAAAA,GAAU,CACrBC,CADqB,EACrBA,GACGC,CAFkB,MAElBA;AAEHL,EAAAA,YAAAA,EAAkBK,CAAAA,CAAOC,MAAPD,CAChB,CAACE,CAAD,EAAMC,CAAN,EAASC,CAAT,KAAiBF,CAAAA,GA9BE,CAACR,CAAAA,IAAAA;AACtB,QAAA,KAA8BE,CAA9B,KAAIF,CAAAA,CAAoB,YAAxB,EACE,OAAOA,CAAAA,CAAoB,YAA3B;AAEA,UAAUG,KAAAA,CACR,kEAAkEH,CAAAA,sGAD1DG,CAAV;AACoEH,GALjD,EA8BmBS,CA9BnB,CA8BFD,GAAyCH,CAAAA,CAAQK,CAAAA,GAAM,CAAdL,CAD1CC,EAEhBD,CAAAA,CAAQ,CAARA,CAFgBC;AAFfA,CAFkB,C;MAYjBK,CAAAA,GAAe,IAAIC,GAAJ,E;MAKRC,CAAAA,GACVC,CAAAA,IACD,CAACT,CAAD,EAACA,GAAkCC,CAAnC,KAAmCA;AAAAA,MAAAA,CAAAA;AACjC,QAAMS,CAAAA,GAAIT,CAAAA,CAAOU,MAAjB;AACA,MAAIC,CAAJ,EACIC,CADJ;AAEA,QAAMC,CAAAA,GAA+B,EAArC;AAAA,QACMC,CAAAA,GAAgC,EADtC;AAEA,MAEIG,CAFJ;AAAA,MAAIF,CAAAA,GAAI,CAAR;AAAA,MACIC,CAAAA,GAAAA,CAAa,CADjB;;AAIA,SAAOD,CAAAA,GAAIN,CAAX,GAAc;AAKZ,SAJAQ,CAAAA,GAAIlB,CAAAA,CAAQgB,CAARhB,CAIJ,EACEgB,CAAAA,GAAIN,CAAJM,IAAIN,KAGFb,CAHEa,MACFG,CAAAA,GAAeZ,CAAAA,CAAOe,CAAPf,CAAfY,EACDD,CAAAA,GAAAA,UAAAA,CAAAA,GAAeC,CAAfD,KAAeC,KAAAA,CAAAA,KAAAA,CAAfD,GAAeC,KAAAA,CAAfD,GAAeC,CAAAA,CAA6C,YAFzDH,CADN,GAMEQ,CAAAA,IAAKN,CAAAA,GAAcZ,CAAAA,CAAAA,EAAUgB,CAAVhB,CAAnBkB,EACAD,CAAAA,GAAAA,CAAa,CADbC;;AAGFH,IAAAA,CAAAA,CAAcI,IAAdJ,CAAmBF,CAAnBE,GACAD,CAAAA,CAAcK,IAAdL,CAAmBI,CAAnBJ,CADAC,EAEAC,CAAAA,EAFAD;AAUF;;AAAA,MAJIC,CAAAA,KAAMN,CAANM,IACFF,CAAAA,CAAcK,IAAdL,CAAmBd,CAAAA,CAAQU,CAARV,CAAnBc,CADEE,EAIAC,CAAJ,EAAgB;AACd,UAAMG,CAAAA,GAAMN,CAAAA,CAAcO,IAAdP,CAAmB,SAAnBA,CAAZ;AAA+B,SAEfjB,CAFe,MAC/BG,CAAAA,GAAUM,CAAAA,CAAagB,GAAbhB,CAAiBc,CAAjBd,CADqB,KAG7BA,CAAAA,CAAaiB,GAAbjB,CACEc,CADFd,EAEGN,CAAAA,GAAUc,CAFbR,CAH6B,EAQ/BL,CAAAA,GAASc,CARsB;AAUjC;;AAAA,SAAON,CAAAA,CAAQT,CAARS,EAAQT,GAAYC,CAApBQ,CAAP;AAA2BR,C;MASlBuB,CAAAA,GAAOhB,CAAAA,CAAWiB,CAAXjB,C;MAQPkB,CAAAA,GAAMlB,CAAAA,CAAWmB,CAAXnB,C;;AAAWmB,SAAAA,CAAAA,IAAAA,IAAAA,EAAAA,CAAAA,IAAAA,OAAAA,EAAAA,CAAAA,IAAAA,GAAAA,EAAAA,CAAAA,IAAAA,YAAAA,EAAAA,CAAAA,IAAAA,UAAAA","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string) => ({\n  ['_$litStatic$']: value,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value['_$litStatic$'] !== undefined) {\n    return value['_$litStatic$'];\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n) => ({\n  ['_$litStatic$']: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ),\n});\n\ntype StaticValue = ReturnType<typeof unsafeStatic>;\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic =\n  (coreTag: typeof coreHtml | typeof coreSvg) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult => {\n    const l = values.length;\n    let staticValue: string | undefined;\n    let dynamicValue: unknown;\n    const staticStrings: Array<string> = [];\n    const dynamicValues: Array<unknown> = [];\n    let i = 0;\n    let hasStatics = false;\n    let s: string;\n\n    while (i < l) {\n      s = strings[i];\n      // Collect any unsafeStatic values, and their following template strings\n      // so that we treat a run of template strings and unsafe static values as\n      // a single template string.\n      while (\n        i < l &&\n        ((dynamicValue = values[i]),\n        (staticValue = (dynamicValue as StaticValue)?.['_$litStatic$'])) !==\n          undefined\n      ) {\n        s += staticValue + strings[++i];\n        hasStatics = true;\n      }\n      dynamicValues.push(dynamicValue);\n      staticStrings.push(s);\n      i++;\n    }\n    // If the last value isn't static (which would have consumed the last\n    // string), then we need to add the last string.\n    if (i === l) {\n      staticStrings.push(strings[l]);\n    }\n\n    if (hasStatics) {\n      const key = staticStrings.join('$$lit$$');\n      strings = stringsCache.get(key)!;\n      if (strings === undefined) {\n        stringsCache.set(\n          key,\n          (strings = staticStrings as unknown as TemplateStringsArray)\n        );\n      }\n      values = dynamicValues;\n    }\n    return coreTag(strings, ...values);\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n"]},"metadata":{},"sourceType":"module"}