{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport _wrapRegExp from '@babel/runtime/helpers/wrapRegExp';\nimport { isIE } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useViewportRange } from '@ui5/webcomponents-react-base/dist/useViewportRange';\nimport { GridPosition } from '@ui5/webcomponents-react/dist/GridPosition';\nimport React, { forwardRef, useCallback, cloneElement, Children } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport clsx from 'clsx';\n\nvar generateGridSpans = function generateGridSpans() {\n  var gridSpan = {};\n\n  for (var i = 1; i <= 12; i++) {\n    gridSpan[\"gridSpan\".concat(i)] = _defineProperty({\n      gridColumn: \"span \".concat(i)\n    }, '-ms-grid-column-span', i);\n  }\n\n  return gridSpan;\n};\n\nvar styles = _objectSpread(_objectSpread({\n  grid: {\n    display: 'grid',\n    gridTemplateColumns: \"repeat(12, 1fr)\",\n    '-ms-grid-columns': '(1fr)[12]'\n  }\n}, generateGridSpans()), {}, {\n  positionCenter: {\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  positionRight: {\n    marginLeft: 'auto',\n    marginRight: 0\n  }\n});\n\nvar _excluded = [\"position\", \"children\", \"hSpacing\", \"vSpacing\", \"style\", \"className\", \"tooltip\", \"slot\", \"defaultIndent\", \"defaultSpan\"];\n\nvar INDENT_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([0-9]|1[0-2]))? ?(L([0-9]|1[0-2]))? ?(M([0-9]|1[0-2]))? ?(S([0-9]|1[0-2]))?$/i, {\n  LargeDesktop: 2,\n  Desktop: 4,\n  Tablet: 6,\n  Phone: 8\n});\n\nvar SPAN_PATTERN = /*#__PURE__*/_wrapRegExp(/^(XL([1-9]|1[0-2]))? ?(L([1-9]|1[0-2]))? ?(M([1-9]|1[0-2]))? ?(S([1-9]|1[0-2]))?$/i, {\n  LargeDesktop: 2,\n  Desktop: 4,\n  Tablet: 6,\n  Phone: 8\n});\n\nvar DefaultSpanMap = new Map();\nDefaultSpanMap.set('Phone', 1);\nDefaultSpanMap.set('Tablet', 2);\nDefaultSpanMap.set('Desktop', 4);\nDefaultSpanMap.set('LargeDesktop', 4);\nvar DefaultIndentMap = new Map();\nDefaultIndentMap.set('Phone', 0);\nDefaultIndentMap.set('Tablet', 0);\nDefaultIndentMap.set('Desktop', 0);\nDefaultIndentMap.set('LargeDesktop', 0);\n\nvar getSpanFromString = function getSpanFromString(span, currentRange) {\n  var _spanConfig$groups$cu;\n\n  var spanConfig = SPAN_PATTERN.exec(span);\n  return (_spanConfig$groups$cu = spanConfig === null || spanConfig === void 0 ? void 0 : spanConfig.groups[currentRange]) !== null && _spanConfig$groups$cu !== void 0 ? _spanConfig$groups$cu : DefaultSpanMap.get(currentRange);\n};\n\nvar getIndentFromString = function getIndentFromString(indent, currentRange) {\n  var _indentConfig$groups$;\n\n  var indentConfig = INDENT_PATTERN.exec(indent);\n  return (_indentConfig$groups$ = indentConfig === null || indentConfig === void 0 ? void 0 : indentConfig.groups[currentRange]) !== null && _indentConfig$groups$ !== void 0 ? _indentConfig$groups$ : DefaultIndentMap.get(currentRange);\n};\n\nvar getIECellPlacement = function getIECellPlacement(col, row, span) {\n  var colStart;\n  var safeSpan = parseInt(span);\n  var added = col + safeSpan;\n\n  if (added <= 12) {\n    colStart = col + 1;\n    col = added;\n  } else {\n    colStart = 1;\n    col = safeSpan;\n    row++;\n  }\n\n  return [col, row, colStart];\n};\n\nvar useStyles = createUseStyles(styles, {\n  name: 'Grid'\n});\n/**\n * A layout container component used for aligning items with various sizes in a simple grid.\n */\n\nvar Grid = /*#__PURE__*/forwardRef(function (props, ref) {\n  var position = props.position,\n      children = props.children,\n      hSpacing = props.hSpacing,\n      vSpacing = props.vSpacing,\n      style = props.style,\n      className = props.className,\n      tooltip = props.tooltip,\n      slot = props.slot,\n      defaultIndent = props.defaultIndent,\n      defaultSpan = props.defaultSpan,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var classes = useStyles();\n  var currentRange = useViewportRange();\n  var gridClasses = clsx(classes.grid, GridPosition.Center === position && classes.positionCenter, GridPosition.Right === position && classes.positionRight, className);\n  var column = 0;\n  var row = 1;\n  var renderGridElements = useCallback(function (child) {\n    var _child$props$dataLay, _child$props$dataLay2;\n\n    if (!child) return null;\n    var childSpan = getSpanFromString((_child$props$dataLay = child.props['data-layout-span']) !== null && _child$props$dataLay !== void 0 ? _child$props$dataLay : defaultSpan, currentRange);\n    var childClass = classes[\"gridSpan\".concat(childSpan)];\n    var childrenWithGridLayout = [/*#__PURE__*/React.createElement(\"div\", {\n      className: childClass\n    }, child)];\n    var indentSpan = getIndentFromString((_child$props$dataLay2 = child.props['data-layout-indent']) !== null && _child$props$dataLay2 !== void 0 ? _child$props$dataLay2 : defaultIndent, currentRange);\n\n    if (indentSpan && indentSpan > 0) {\n      childrenWithGridLayout.unshift( /*#__PURE__*/React.createElement(\"span\", {\n        className: classes[\"gridSpan\".concat(indentSpan)]\n      }));\n    }\n\n    if (isIE()) {\n      return childrenWithGridLayout.map(function (item, index) {\n        var colStart;\n\n        if (childrenWithGridLayout.length === 2 && index === 0) {\n          var _getIECellPlacement = getIECellPlacement(column, row, indentSpan);\n\n          var _getIECellPlacement2 = _slicedToArray(_getIECellPlacement, 3);\n\n          column = _getIECellPlacement2[0];\n          row = _getIECellPlacement2[1];\n          colStart = _getIECellPlacement2[2];\n          return /*#__PURE__*/cloneElement(item, {\n            style: {\n              marginRight: vSpacing,\n              marginBottom: hSpacing,\n              msGridRow: row,\n              msGridColumn: colStart\n            }\n          });\n        }\n\n        var _getIECellPlacement3 = getIECellPlacement(column, row, childSpan);\n\n        var _getIECellPlacement4 = _slicedToArray(_getIECellPlacement3, 3);\n\n        column = _getIECellPlacement4[0];\n        row = _getIECellPlacement4[1];\n        colStart = _getIECellPlacement4[2];\n        return /*#__PURE__*/cloneElement(item, {\n          style: {\n            marginRight: vSpacing,\n            marginBottom: hSpacing,\n            msGridRow: row,\n            msGridColumn: colStart\n          }\n        });\n      });\n    }\n\n    return childrenWithGridLayout;\n  }, [currentRange, defaultSpan, defaultIndent, classes, vSpacing, hSpacing]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    ref: ref,\n    className: gridClasses,\n    style: _objectSpread({\n      gridRowGap: vSpacing,\n      gridColumnGap: hSpacing\n    }, style),\n    title: tooltip,\n    slot: slot\n  }, rest), Children.map(children, renderGridElements));\n});\nGrid.displayName = 'Grid';\nGrid.defaultProps = {\n  hSpacing: '1rem',\n  vSpacing: '1rem',\n  defaultIndent: 'XL0 L0 M0 S0',\n  defaultSpan: 'XL3 L3 M6 S12'\n};\nexport { Grid };","map":{"version":3,"sources":["../src/components/Grid/Grid.jss.ts","../src/components/Grid/index.tsx"],"names":["generateGridSpans","gridSpan","i","gridColumn","styles","grid","display","gridTemplateColumns","positionCenter","marginLeft","marginRight","positionRight","INDENT_PATTERN","SPAN_PATTERN","DefaultSpanMap","DefaultIndentMap","getSpanFromString","spanConfig","getIndentFromString","indentConfig","getIECellPlacement","safeSpan","parseInt","added","col","colStart","row","useStyles","createUseStyles","name","Grid","forwardRef","position","children","hSpacing","vSpacing","style","className","tooltip","slot","defaultIndent","defaultSpan","rest","props","classes","currentRange","useViewportRange","gridClasses","clsx","GridPosition","column","renderGridElements","useCallback","childSpan","child","childClass","childrenWithGridLayout","indentSpan","isIE","index","cloneElement","marginBottom","msGridRow","msGridColumn","gridRowGap","gridColumnGap","Children"],"mappings":"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","sourcesContent":["const generateGridSpans = () => {\n  let gridSpan = {};\n  for (let i = 1; i <= 12; i++) {\n    gridSpan[`gridSpan${i}`] = { gridColumn: `span ${i}`, ['-ms-grid-column-span']: i };\n  }\n  return gridSpan;\n};\n\nexport const styles = {\n  grid: {\n    display: 'grid',\n    gridTemplateColumns: `repeat(12, 1fr)`,\n    '-ms-grid-columns': '(1fr)[12]'\n  },\n  ...generateGridSpans(),\n  positionCenter: {\n    marginLeft: 'auto',\n    marginRight: 'auto'\n  },\n  positionRight: {\n    marginLeft: 'auto',\n    marginRight: 0\n  }\n};\n","import { isIE } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useViewportRange } from '@ui5/webcomponents-react-base/dist/useViewportRange';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { GridPosition } from '@ui5/webcomponents-react/dist/GridPosition';\nimport React, {\n  Children,\n  cloneElement,\n  CSSProperties,\n  forwardRef,\n  ReactElement,\n  ReactNode,\n  Ref,\n  useCallback\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { styles } from './Grid.jss';\nimport clsx from 'clsx';\n\nexport interface GridPropTypes extends CommonProps {\n  /**\n   * Vertical spacing between the rows in the Grid. If not specified, then 1rem.\n   */\n  vSpacing?: CSSProperties['height'];\n  /**\n   * Horizontal spacing between the content in the Grid. If not specified, then 1rem.\n   */\n  hSpacing?: CSSProperties['width'];\n  /**\n   * Position of the Grid in the window or surrounding container. Possible values are \"Center\", \"Left\" and \"Right\".\n   */\n  position?: GridPosition | keyof typeof GridPosition;\n  /**\n   * A string type that represents Grid's default span values for very large, large, medium and small screens for the whole Grid.\n   * Allowed values are separated by space Letters XL, L, M or S followed by number of columns from 1 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M12\", \"s10\" or \"l4 m4\".\n   * Note that the parameters has to be provided in the order very large, large, medium, small.\n   * <br />\n   * You can override this default span on each child element by setting the prop `data-layout-span`.\n   */\n  defaultSpan?: string;\n  /**\n   * Defines default for the whole Grid numbers of empty columns before the current span begins. It can be defined for very large, large, medium and small screens.\n   * Allowed values are separated by space Letters XL, L, M or S followed by number of columns from 0 to 12 that the container has to take, for example: \"L2 M4 S6\", \"M11\", \"s10\" or \"l4 m4\".\n   * Note that the parameters has to be provided in the order very-large, large, medium, small.\n   * <br />\n   * You can override this default indent on each child element by setting the prop `data-layout-indent`.\n   */\n  defaultIndent?: string;\n  /**\n   * Components that are placed into Grid layout.\n   */\n  children: ReactNode | ReactNode[];\n}\n\nconst INDENT_PATTERN =\n  /^([X][L](?<LargeDesktop>[0-9]|1[0-2]))? ?([L](?<Desktop>[0-9]|1[0-2]))? ?([M](?<Tablet>[0-9]|1[0-2]))? ?([S](?<Phone>[0-9]|1[0-2]))?$/i;\nconst SPAN_PATTERN =\n  /^([X][L](?<LargeDesktop>[1-9]|1[0-2]))? ?([L](?<Desktop>[1-9]|1[0-2]))? ?([M](?<Tablet>[1-9]|1[0-2]))? ?([S](?<Phone>[1-9]|1[0-2]))?$/i;\n\nconst DefaultSpanMap = new Map();\nDefaultSpanMap.set('Phone', 1);\nDefaultSpanMap.set('Tablet', 2);\nDefaultSpanMap.set('Desktop', 4);\nDefaultSpanMap.set('LargeDesktop', 4);\n\nconst DefaultIndentMap = new Map();\nDefaultIndentMap.set('Phone', 0);\nDefaultIndentMap.set('Tablet', 0);\nDefaultIndentMap.set('Desktop', 0);\nDefaultIndentMap.set('LargeDesktop', 0);\n\nconst getSpanFromString = (span, currentRange) => {\n  const spanConfig = SPAN_PATTERN.exec(span);\n  return spanConfig?.groups[currentRange] ?? DefaultSpanMap.get(currentRange);\n};\n\nconst getIndentFromString = (indent, currentRange) => {\n  const indentConfig = INDENT_PATTERN.exec(indent);\n  return indentConfig?.groups[currentRange] ?? DefaultIndentMap.get(currentRange);\n};\n\nconst getIECellPlacement = (col, row, span) => {\n  let colStart;\n  let safeSpan = parseInt(span);\n  const added = col + safeSpan;\n  if (added <= 12) {\n    colStart = col + 1;\n    col = added;\n  } else {\n    colStart = 1;\n    col = safeSpan;\n    row++;\n  }\n  return [col, row, colStart];\n};\n\nconst useStyles = createUseStyles(styles, { name: 'Grid' });\n/**\n * A layout container component used for aligning items with various sizes in a simple grid.\n */\nconst Grid = forwardRef((props: GridPropTypes, ref: Ref<HTMLDivElement>) => {\n  const {\n    position,\n    children,\n    hSpacing,\n    vSpacing,\n    style,\n    className,\n    tooltip,\n    slot,\n    defaultIndent,\n    defaultSpan,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const currentRange = useViewportRange();\n  const gridClasses = clsx(\n    classes.grid,\n    GridPosition.Center === position && classes.positionCenter,\n    GridPosition.Right === position && classes.positionRight,\n    className\n  );\n\n  let column = 0;\n  let row = 1;\n  const renderGridElements = useCallback(\n    (child: ReactElement<any>) => {\n      if (!child) return null;\n\n      const childSpan = getSpanFromString(child.props['data-layout-span'] ?? defaultSpan, currentRange);\n      let childClass = classes[`gridSpan${childSpan}`];\n\n      const childrenWithGridLayout = [<div className={childClass}>{child}</div>];\n\n      const indentSpan = getIndentFromString(child.props['data-layout-indent'] ?? defaultIndent, currentRange);\n      if (indentSpan && indentSpan > 0) {\n        childrenWithGridLayout.unshift(<span className={classes[`gridSpan${indentSpan}`]} />);\n      }\n      if (isIE()) {\n        return childrenWithGridLayout.map((item, index) => {\n          let colStart;\n          if (childrenWithGridLayout.length === 2 && index === 0) {\n            [column, row, colStart] = getIECellPlacement(column, row, indentSpan);\n            return cloneElement(item, {\n              style: { marginRight: vSpacing, marginBottom: hSpacing, msGridRow: row, msGridColumn: colStart }\n            });\n          }\n          [column, row, colStart] = getIECellPlacement(column, row, childSpan);\n          return cloneElement(item, {\n            style: { marginRight: vSpacing, marginBottom: hSpacing, msGridRow: row, msGridColumn: colStart }\n          });\n        });\n      }\n      return childrenWithGridLayout;\n    },\n    [currentRange, defaultSpan, defaultIndent, classes, vSpacing, hSpacing]\n  );\n\n  return (\n    <div\n      ref={ref}\n      className={gridClasses}\n      style={{ gridRowGap: vSpacing, gridColumnGap: hSpacing, ...style }}\n      title={tooltip}\n      slot={slot}\n      {...rest}\n    >\n      {Children.map(children, renderGridElements)}\n    </div>\n  );\n});\n\nGrid.displayName = 'Grid';\n\nGrid.defaultProps = {\n  hSpacing: '1rem',\n  vSpacing: '1rem',\n  defaultIndent: 'XL0 L0 M0 S0',\n  defaultSpan: 'XL3 L3 M6 S12'\n};\n\nexport { Grid };\n"]},"metadata":{},"sourceType":"module"}