{"ast":null,"code":"var __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport Arrays from '../../util/Arrays';\nimport * as C from './EncoderConstants';\nexport function static_SHIFT_TABLE(SHIFT_TABLE) {\n  var e_1, _a;\n\n  try {\n    for (var SHIFT_TABLE_1 = __values(SHIFT_TABLE), SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next(); !SHIFT_TABLE_1_1.done; SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next()) {\n      var table = SHIFT_TABLE_1_1.value\n      /*Int32Array*/\n      ;\n      Arrays.fill(table, -1);\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (SHIFT_TABLE_1_1 && !SHIFT_TABLE_1_1.done && (_a = SHIFT_TABLE_1.return)) _a.call(SHIFT_TABLE_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  SHIFT_TABLE[C.MODE_UPPER][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_LOWER][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_LOWER][C.MODE_UPPER] = 28;\n  SHIFT_TABLE[C.MODE_MIXED][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_DIGIT][C.MODE_PUNCT] = 0;\n  SHIFT_TABLE[C.MODE_DIGIT][C.MODE_UPPER] = 15;\n  return SHIFT_TABLE;\n}\nexport var\n/*final*/\nSHIFT_TABLE = static_SHIFT_TABLE(Arrays.createInt32Array(6, 6)); // mode shift codes, per table","map":{"version":3,"sources":["../../../../../src/core/aztec/encoder/ShiftTable.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAA,OAAO,MAAP,MAAmB,mBAAnB;AACA,OAAO,KAAK,CAAZ,MAAmB,oBAAnB;AAEA,OAAM,SAAU,kBAAV,CAA6B,WAA7B,EAAsD;;;;AAC1D,SAAiC,IAAA,aAAA,GAAA,QAAA,CAAA,WAAA,CAAA,EAAW,eAAA,GAAA,aAAA,CAAA,IAAA,EAA5C,EAA4C,CAAA,eAAA,CAAA,IAA5C,EAA4C,eAAA,GAAA,aAAA,CAAA,IAAA,EAA5C,EAA8C;AAAzC,UAAI,KAAK,GAAA,eAAA,CAAA;AAAC;AAAV;AACH,MAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,EAAmB,CAAC,CAApB;AACD;;;;;;;;;;;;;AACD,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,CAA1C;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,CAA1C;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,EAA1C;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,CAA1C;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,CAA1C;AACA,EAAA,WAAW,CAAC,CAAC,CAAC,UAAH,CAAX,CAA0B,CAAC,CAAC,UAA5B,IAA0C,EAA1C;AACA,SAAO,WAAP;AACD;AAED,OAAO;AAAM;AAAU,WAAW,GAAiB,kBAAkB,CAAC,MAAM,CAAC,gBAAP,CAAwB,CAAxB,EAA2B,CAA3B,CAAD,CAA9D,C,CAA+F","sourceRoot":"","sourcesContent":["var __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport Arrays from '../../util/Arrays';\nimport * as C from './EncoderConstants';\nexport function static_SHIFT_TABLE(SHIFT_TABLE) {\n    var e_1, _a;\n    try {\n        for (var SHIFT_TABLE_1 = __values(SHIFT_TABLE), SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next(); !SHIFT_TABLE_1_1.done; SHIFT_TABLE_1_1 = SHIFT_TABLE_1.next()) {\n            var table = SHIFT_TABLE_1_1.value /*Int32Array*/;\n            Arrays.fill(table, -1);\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (SHIFT_TABLE_1_1 && !SHIFT_TABLE_1_1.done && (_a = SHIFT_TABLE_1.return)) _a.call(SHIFT_TABLE_1);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    SHIFT_TABLE[C.MODE_UPPER][C.MODE_PUNCT] = 0;\n    SHIFT_TABLE[C.MODE_LOWER][C.MODE_PUNCT] = 0;\n    SHIFT_TABLE[C.MODE_LOWER][C.MODE_UPPER] = 28;\n    SHIFT_TABLE[C.MODE_MIXED][C.MODE_PUNCT] = 0;\n    SHIFT_TABLE[C.MODE_DIGIT][C.MODE_PUNCT] = 0;\n    SHIFT_TABLE[C.MODE_DIGIT][C.MODE_UPPER] = 15;\n    return SHIFT_TABLE;\n}\nexport var /*final*/ SHIFT_TABLE = static_SHIFT_TABLE(Arrays.createInt32Array(6, 6)); // mode shift codes, per table\n//# sourceMappingURL=ShiftTable.js.map"]},"metadata":{},"sourceType":"module"}