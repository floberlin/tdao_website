{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nconst t = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6\n},\n      e = t => (...e) => ({\n  _$litDirective$: t,\n  values: e\n});\n\nclass i {\n  constructor(t) {}\n\n  get _$AU() {\n    return this._$AM._$AU;\n  }\n\n  _$AT(t, e, i) {\n    this._$Ct = t, this._$AM = e, this._$Ci = i;\n  }\n\n  _$AS(t, e) {\n    return this.update(t, e);\n  }\n\n  update(t, e) {\n    return this.render(...e);\n  }\n\n}\n\nexport { i as Directive, t as PartType, e as directive };","map":{"version":3,"sources":["src/directive.ts"],"names":["PartType","ATTRIBUTE","CHILD","PROPERTY","BOOLEAN_ATTRIBUTE","EVENT","ELEMENT","directive","c","values","_$litDirective$","Directive","constructor","_partInfo","_$isConnected","this","_$parent","_$initialize","part","parent","attributeIndex","__part","__attributeIndex","_$resolve","props","update","_part","render"],"mappings":";;;;;MAyCaA,CAAAA,GAAW;AACtBC,EAAAA,SAAAA,EAAW,CADW;AAEtBC,EAAAA,KAAAA,EAAO,CAFe;AAGtBC,EAAAA,QAAAA,EAAU,CAHY;AAItBC,EAAAA,iBAAAA,EAAmB,CAJG;AAKtBC,EAAAA,KAAAA,EAAO,CALe;AAMtBC,EAAAA,OAAAA,EAAS;AANa,C;MA0CXC,CAAAA,GACgBC,CAAAA,IAC3B,CAAA,GAAIC,CAAJ,MAAIA;AAEFC,EAAAA,eAAAA,EAAqBF,CAFnBC;AAGFA,EAAAA,MAAAA,EAAAA;AAHEA,CAAJ,C;;AAGEA,MAQkBE,CARlBF,CAQkBE;AAkBpBC,EAAAA,WAAAA,CAAYC,CAAZD,EAAYC,CAGRC;;AAAAA,MAAAA,IAAAA,GAAAA;AACF,WAAOC,KAAKC,IAALD,CAAcD,IAArB;AAIFG;;AAAAA,EAAAA,IAAAA,CACEC,CADFD,EAEEE,CAFFF,EAGEG,CAHFH,EAGEG;AAEAL,SAAKM,IAALN,GAAcG,CAAdH,EACAA,KAAKC,IAALD,GAAgBI,CADhBJ,EAEAA,KAAKO,IAALP,GAAwBK,CAFxBL;AAKFQ;;AAAAA,EAAAA,IAAAA,CAAUL,CAAVK,EAAsBC,CAAtBD,EAAsBC;AACpB,WAAOT,KAAKU,MAALV,CAAYG,CAAZH,EAAkBS,CAAlBT,CAAP;AAKFU;;AAAAA,EAAAA,MAAAA,CAAOC,CAAPD,EAAoBD,CAApBC,EAAoBD;AAClB,WAAOT,KAAKY,MAALZ,CAAKY,GAAUH,CAAfT,CAAP;AAAsBS;;AA3CJb;;AA2CIa,SAAAA,CAAAA,IAAAA,SAAAA,EAAAA,CAAAA,IAAAA,QAAAA,EAAAA,CAAAA,IAAAA,SAAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {Disconnectable, Part} from './lit-html';\n\nexport {\n  AttributePart,\n  BooleanAttributePart,\n  ChildPart,\n  ElementPart,\n  EventPart,\n  Part,\n  PropertyPart,\n} from './lit-html';\n\nexport interface DirectiveClass {\n  new (part: PartInfo): Directive;\n}\n\n/**\n * This utility type extracts the signature of a directive class's render()\n * method so we can use it for the type of the generated directive function.\n */\nexport type DirectiveParameters<C extends Directive> = Parameters<C['render']>;\n\n/**\n * A generated directive function doesn't evaluate the directive, but just\n * returns a DirectiveResult object that captures the arguments.\n */\nexport interface DirectiveResult<C extends DirectiveClass = DirectiveClass> {\n  /**\n   * This property needs to remain unminified.\n   * @internal */\n  ['_$litDirective$']: C;\n  /** @internal */\n  values: DirectiveParameters<InstanceType<C>>;\n}\n\nexport const PartType = {\n  ATTRIBUTE: 1,\n  CHILD: 2,\n  PROPERTY: 3,\n  BOOLEAN_ATTRIBUTE: 4,\n  EVENT: 5,\n  ELEMENT: 6,\n} as const;\n\nexport type PartType = typeof PartType[keyof typeof PartType];\n\nexport interface ChildPartInfo {\n  readonly type: typeof PartType.CHILD;\n}\n\nexport interface AttributePartInfo {\n  readonly type:\n    | typeof PartType.ATTRIBUTE\n    | typeof PartType.PROPERTY\n    | typeof PartType.BOOLEAN_ATTRIBUTE\n    | typeof PartType.EVENT;\n  readonly strings?: ReadonlyArray<string>;\n  readonly name: string;\n  readonly tagName: string;\n}\n\nexport interface ElementPartInfo {\n  readonly type: typeof PartType.ELEMENT;\n}\n\n/**\n * Information about the part a directive is bound to.\n *\n * This is useful for checking that a directive is attached to a valid part,\n * such as with directive that can only be used on attribute bindings.\n */\nexport type PartInfo = ChildPartInfo | AttributePartInfo | ElementPartInfo;\n\n/**\n * Creates a user-facing directive function from a Directive class. This\n * function has the same parameters as the directive's render() method.\n */\nexport const directive =\n  <C extends DirectiveClass>(c: C) =>\n  (...values: DirectiveParameters<InstanceType<C>>): DirectiveResult<C> => ({\n    // This property needs to remain unminified.\n    ['_$litDirective$']: c,\n    values,\n  });\n\n/**\n * Base class for creating custom directives. Users should extend this class,\n * implement `render` and/or `update`, and then pass their subclass to\n * `directive`.\n */\nexport abstract class Directive implements Disconnectable {\n  //@internal\n  __part!: Part;\n  //@internal\n  __attributeIndex: number | undefined;\n  //@internal\n  __directive?: Directive;\n\n  //@internal\n  _$parent!: Disconnectable;\n\n  // These will only exist on the AsyncDirective subclass\n  //@internal\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // This property needs to remain unminified.\n  //@internal\n  ['_$notifyDirectiveConnectionChanged']?(isConnected: boolean): void;\n\n  constructor(_partInfo: PartInfo) {}\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  /** @internal */\n  _$initialize(\n    part: Part,\n    parent: Disconnectable,\n    attributeIndex: number | undefined\n  ) {\n    this.__part = part;\n    this._$parent = parent;\n    this.__attributeIndex = attributeIndex;\n  }\n  /** @internal */\n  _$resolve(part: Part, props: Array<unknown>): unknown {\n    return this.update(part, props);\n  }\n\n  abstract render(...props: Array<unknown>): unknown;\n\n  update(_part: Part, props: Array<unknown>): unknown {\n    return this.render(...props);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}