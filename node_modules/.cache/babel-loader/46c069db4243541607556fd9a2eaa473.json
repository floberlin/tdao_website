{"ast":null,"code":"import { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\nconst themeStyles = new Map();\nconst loaders = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - the style content directly\n * @deprecated\n */\n\nconst registerThemeProperties = (_packageName, _themeName, _style) => {\n  throw new Error(\"`registerThemeProperties` has been depracated. Use `registerThemePropertiesLoader` instead.\");\n};\n\nconst registerThemePropertiesLoader = (packageName, themeName, loader) => {\n  loaders.set(`${packageName}/${themeName}`, loader);\n  registeredPackages.add(packageName);\n  registeredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n  const style = themeStyles.get(`${packageName}_${themeName}`);\n\n  if (style !== undefined) {\n    // it's valid for style to be an empty string\n    return style;\n  }\n\n  if (!registeredThemes.has(themeName)) {\n    const regThemesStr = [...registeredThemes.values()].join(\", \");\n    console.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`);\n    /* eslint-disable-line */\n\n    return themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n  }\n\n  const loader = loaders.get(`${packageName}/${themeName}`);\n\n  if (!loader) {\n    // no themes for package\n    console.error(`Theme [${themeName}] not registered for package [${packageName}]`);\n    /* eslint-disable-line */\n\n    return;\n  }\n\n  let data;\n\n  try {\n    data = await loader(themeName);\n  } catch (e) {\n    console.error(packageName, e.message);\n    /* eslint-disable-line */\n\n    return;\n  }\n\n  const themeProps = data._ || data;\n  themeStyles.set(`${packageName}_${themeName}`, themeProps);\n  return themeProps;\n};\n\nconst getRegisteredPackages = () => {\n  return registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n  return registeredThemes.has(theme);\n};\n\nexport { registerThemePropertiesLoader, registerThemeProperties, getThemeProperties, getRegisteredPackages, isThemeRegistered };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/asset-registries/Themes.js"],"names":["DEFAULT_THEME","themeStyles","Map","loaders","registeredPackages","Set","registeredThemes","registerThemeProperties","_packageName","_themeName","_style","Error","registerThemePropertiesLoader","packageName","themeName","loader","set","add","getThemeProperties","style","get","undefined","has","regThemesStr","values","join","console","warn","error","data","e","message","themeProps","_","getRegisteredPackages","isThemeRegistered","theme"],"mappings":"AAAA,SAASA,aAAT,QAA8B,iCAA9B;AAEA,MAAMC,WAAW,GAAG,IAAIC,GAAJ,EAApB;AACA,MAAMC,OAAO,GAAG,IAAID,GAAJ,EAAhB;AACA,MAAME,kBAAkB,GAAG,IAAIC,GAAJ,EAA3B;AACA,MAAMC,gBAAgB,GAAG,IAAID,GAAJ,EAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAME,uBAAuB,GAAG,CAACC,YAAD,EAAeC,UAAf,EAA2BC,MAA3B,KAAsC;AACrE,QAAM,IAAIC,KAAJ,CAAU,6FAAV,CAAN;AACA,CAFD;;AAIA,MAAMC,6BAA6B,GAAG,CAACC,WAAD,EAAcC,SAAd,EAAyBC,MAAzB,KAAoC;AACzEZ,EAAAA,OAAO,CAACa,GAAR,CAAa,GAAEH,WAAY,IAAGC,SAAU,EAAxC,EAA2CC,MAA3C;AACAX,EAAAA,kBAAkB,CAACa,GAAnB,CAAuBJ,WAAvB;AACAP,EAAAA,gBAAgB,CAACW,GAAjB,CAAqBH,SAArB;AACA,CAJD;;AAMA,MAAMI,kBAAkB,GAAG,OAAOL,WAAP,EAAoBC,SAApB,KAAkC;AAC5D,QAAMK,KAAK,GAAGlB,WAAW,CAACmB,GAAZ,CAAiB,GAAEP,WAAY,IAAGC,SAAU,EAA5C,CAAd;;AACA,MAAIK,KAAK,KAAKE,SAAd,EAAyB;AAAE;AAC1B,WAAOF,KAAP;AACA;;AAED,MAAI,CAACb,gBAAgB,CAACgB,GAAjB,CAAqBR,SAArB,CAAL,EAAsC;AACrC,UAAMS,YAAY,GAAG,CAAC,GAAGjB,gBAAgB,CAACkB,MAAjB,EAAJ,EAA+BC,IAA/B,CAAoC,IAApC,CAArB;AACAC,IAAAA,OAAO,CAACC,IAAR,CAAc,+DAA8D3B,aAAc,4BAA2BuB,YAAa,EAAlI;AAAsI;;AACtI,WAAOtB,WAAW,CAACmB,GAAZ,CAAiB,GAAEP,WAAY,IAAGb,aAAc,EAAhD,CAAP;AACA;;AAED,QAAMe,MAAM,GAAGZ,OAAO,CAACiB,GAAR,CAAa,GAAEP,WAAY,IAAGC,SAAU,EAAxC,CAAf;;AACA,MAAI,CAACC,MAAL,EAAa;AACZ;AACAW,IAAAA,OAAO,CAACE,KAAR,CAAe,UAASd,SAAU,iCAAgCD,WAAY,GAA9E;AAAmF;;AACnF;AACA;;AACD,MAAIgB,IAAJ;;AACA,MAAI;AACHA,IAAAA,IAAI,GAAG,MAAMd,MAAM,CAACD,SAAD,CAAnB;AACA,GAFD,CAEE,OAAOgB,CAAP,EAAU;AACXJ,IAAAA,OAAO,CAACE,KAAR,CAAcf,WAAd,EAA2BiB,CAAC,CAACC,OAA7B;AAAuC;;AACvC;AACA;;AACD,QAAMC,UAAU,GAAGH,IAAI,CAACI,CAAL,IAAUJ,IAA7B;AAEA5B,EAAAA,WAAW,CAACe,GAAZ,CAAiB,GAAEH,WAAY,IAAGC,SAAU,EAA5C,EAA+CkB,UAA/C;AACA,SAAOA,UAAP;AACA,CA7BD;;AA+BA,MAAME,qBAAqB,GAAG,MAAM;AACnC,SAAO9B,kBAAP;AACA,CAFD;;AAIA,MAAM+B,iBAAiB,GAAGC,KAAK,IAAI;AAClC,SAAO9B,gBAAgB,CAACgB,GAAjB,CAAqBc,KAArB,CAAP;AACA,CAFD;;AAIA,SACCxB,6BADD,EAECL,uBAFD,EAGCW,kBAHD,EAICgB,qBAJD,EAKCC,iBALD","sourcesContent":["import { DEFAULT_THEME } from \"../generated/AssetParameters.js\";\n\nconst themeStyles = new Map();\nconst loaders = new Map();\nconst registeredPackages = new Set();\nconst registeredThemes = new Set();\n\n/**\n * Used to provide CSS Vars for a specific theme for a specific package.\n * The CSS Vars can be passed directly as a string (containing them), as an object with a \"_\" property(containing them in the \"_\" property), or as a URL.\n * This URL must point to a JSON file, containing a \"_\" property.\n *\n * Example usage:\n *  1) Pass the CSS Vars as a string directly.\n *  registerThemeProperties(\"my-package\", \"my_theme\", \":root{--var1: red;}\");\n *\n * @public\n * @param packageName - the NPM package for which CSS Vars are registered\n * @param themeName - the theme which the CSS Vars implement\n * @param style - the style content directly\n * @deprecated\n */\nconst registerThemeProperties = (_packageName, _themeName, _style) => {\n\tthrow new Error(\"`registerThemeProperties` has been depracated. Use `registerThemePropertiesLoader` instead.\");\n};\n\nconst registerThemePropertiesLoader = (packageName, themeName, loader) => {\n\tloaders.set(`${packageName}/${themeName}`, loader);\n\tregisteredPackages.add(packageName);\n\tregisteredThemes.add(themeName);\n};\n\nconst getThemeProperties = async (packageName, themeName) => {\n\tconst style = themeStyles.get(`${packageName}_${themeName}`);\n\tif (style !== undefined) { // it's valid for style to be an empty string\n\t\treturn style;\n\t}\n\n\tif (!registeredThemes.has(themeName)) {\n\t\tconst regThemesStr = [...registeredThemes.values()].join(\", \");\n\t\tconsole.warn(`You have requested a non-registered theme - falling back to ${DEFAULT_THEME}. Registered themes are: ${regThemesStr}`); /* eslint-disable-line */\n\t\treturn themeStyles.get(`${packageName}_${DEFAULT_THEME}`);\n\t}\n\n\tconst loader = loaders.get(`${packageName}/${themeName}`);\n\tif (!loader) {\n\t\t// no themes for package\n\t\tconsole.error(`Theme [${themeName}] not registered for package [${packageName}]`); /* eslint-disable-line */\n\t\treturn;\n\t}\n\tlet data;\n\ttry {\n\t\tdata = await loader(themeName);\n\t} catch (e) {\n\t\tconsole.error(packageName, e.message); /* eslint-disable-line */\n\t\treturn;\n\t}\n\tconst themeProps = data._ || data;\n\n\tthemeStyles.set(`${packageName}_${themeName}`, themeProps);\n\treturn themeProps;\n};\n\nconst getRegisteredPackages = () => {\n\treturn registeredPackages;\n};\n\nconst isThemeRegistered = theme => {\n\treturn registeredThemes.has(theme);\n};\n\nexport {\n\tregisterThemePropertiesLoader,\n\tregisterThemeProperties,\n\tgetThemeProperties,\n\tgetRegisteredPackages,\n\tisThemeRegistered,\n};\n"]},"metadata":{},"sourceType":"module"}