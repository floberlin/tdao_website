{"ast":null,"code":"import { getTheme as getConfiguredTheme } from \"../InitialConfiguration.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\nimport applyTheme from \"../theming/applyTheme.js\";\nlet theme;\n\nconst getTheme = () => {\n  if (theme === undefined) {\n    theme = getConfiguredTheme();\n  }\n\n  return theme;\n};\n\nconst setTheme = async newTheme => {\n  if (theme === newTheme) {\n    return;\n  }\n\n  theme = newTheme; // Update CSS Custom Properties\n\n  await applyTheme(theme);\n  await reRenderAllUI5Elements({\n    themeAware: true\n  });\n};\n/**\n * Returns if the given theme name is the one currently applied.\n * @private\n * @param {String}\n * @returns {boolean}\n */\n\n\nconst isTheme = _theme => {\n  const currentTheme = getTheme();\n  return currentTheme === _theme || currentTheme === `${_theme}_exp`;\n};\n\nexport { getTheme, setTheme, isTheme };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/config/Theme.js"],"names":["getTheme","getConfiguredTheme","reRenderAllUI5Elements","applyTheme","theme","undefined","setTheme","newTheme","themeAware","isTheme","_theme","currentTheme"],"mappings":"AAAA,SAASA,QAAQ,IAAIC,kBAArB,QAA+C,4BAA/C;AACA,SAASC,sBAAT,QAAuC,cAAvC;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AAEA,IAAIC,KAAJ;;AAEA,MAAMJ,QAAQ,GAAG,MAAM;AACtB,MAAII,KAAK,KAAKC,SAAd,EAAyB;AACxBD,IAAAA,KAAK,GAAGH,kBAAkB,EAA1B;AACA;;AAED,SAAOG,KAAP;AACA,CAND;;AAQA,MAAME,QAAQ,GAAG,MAAMC,QAAN,IAAkB;AAClC,MAAIH,KAAK,KAAKG,QAAd,EAAwB;AACvB;AACA;;AAEDH,EAAAA,KAAK,GAAGG,QAAR,CALkC,CAOlC;;AACA,QAAMJ,UAAU,CAACC,KAAD,CAAhB;AACA,QAAMF,sBAAsB,CAAC;AAAEM,IAAAA,UAAU,EAAE;AAAd,GAAD,CAA5B;AACA,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,OAAO,GAAGC,MAAM,IAAI;AACzB,QAAMC,YAAY,GAAGX,QAAQ,EAA7B;AACA,SAAOW,YAAY,KAAKD,MAAjB,IAA2BC,YAAY,KAAM,GAAED,MAAO,MAA7D;AACA,CAHD;;AAKA,SACCV,QADD,EAECM,QAFD,EAGCG,OAHD","sourcesContent":["import { getTheme as getConfiguredTheme } from \"../InitialConfiguration.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\nimport applyTheme from \"../theming/applyTheme.js\";\n\nlet theme;\n\nconst getTheme = () => {\n\tif (theme === undefined) {\n\t\ttheme = getConfiguredTheme();\n\t}\n\n\treturn theme;\n};\n\nconst setTheme = async newTheme => {\n\tif (theme === newTheme) {\n\t\treturn;\n\t}\n\n\ttheme = newTheme;\n\n\t// Update CSS Custom Properties\n\tawait applyTheme(theme);\n\tawait reRenderAllUI5Elements({ themeAware: true });\n};\n\n/**\n * Returns if the given theme name is the one currently applied.\n * @private\n * @param {String}\n * @returns {boolean}\n */\nconst isTheme = _theme => {\n\tconst currentTheme = getTheme();\n\treturn currentTheme === _theme || currentTheme === `${_theme}_exp`;\n};\n\nexport {\n\tgetTheme,\n\tsetTheme,\n\tisTheme,\n};\n"]},"metadata":{},"sourceType":"module"}