{"ast":null,"code":"var observers = new WeakMap(); // We want just one observer per node, store them here -> DOM nodes are keys\n\n/**\n * Default implementation with MutationObserver for browsers with native support\n */\n\nvar _createObserver = function _createObserver(node, callback, options) {\n  var observer = new MutationObserver(callback);\n  observer.observe(node, options);\n  return observer;\n};\n/**\n * Default implementation with MutationObserver for browsers with native support\n */\n\n\nvar _destroyObserver = function _destroyObserver(observer) {\n  observer.disconnect();\n};\n/**\n * Allows to create an alternative DOM observer implementation\n * @param createFn\n */\n\n\nvar setCreateObserverCallback = function setCreateObserverCallback(createFn) {\n  if (typeof createFn === \"function\") {\n    _createObserver = createFn;\n  }\n};\n/**\n * Allows to create an alternative DOM observer implementation\n * @param destroyFn\n */\n\n\nvar setDestroyObserverCallback = function setDestroyObserverCallback(destroyFn) {\n  if (typeof destroyFn === \"function\") {\n    _destroyObserver = destroyFn;\n  }\n};\n/**\n * @param node\n * @param callback\n * @param options\n */\n\n\nvar observeDOMNode = function observeDOMNode(node, callback, options) {\n  var observer = _createObserver(node, callback, options);\n\n  observers.set(node, observer);\n};\n/**\n * @param node\n */\n\n\nvar unobserveDOMNode = function unobserveDOMNode(node) {\n  var observer = observers.get(node);\n\n  if (observer) {\n    _destroyObserver(observer);\n\n    observers.delete(node);\n  }\n};\n\nexport { setCreateObserverCallback, setDestroyObserverCallback, observeDOMNode, unobserveDOMNode };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/DOMObserver.js"],"names":["observers","WeakMap","_createObserver","node","callback","options","observer","MutationObserver","observe","_destroyObserver","disconnect","setCreateObserverCallback","createFn","setDestroyObserverCallback","destroyFn","observeDOMNode","set","unobserveDOMNode","get","delete"],"mappings":"AAAA,IAAMA,SAAS,GAAG,IAAIC,OAAJ,EAAlB,C,CAAiC;;AAEjC;AACA;AACA;;AACA,IAAIC,eAAe,GAAG,yBAACC,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,EAA6B;AAClD,MAAMC,QAAQ,GAAG,IAAIC,gBAAJ,CAAqBH,QAArB,CAAjB;AACAE,EAAAA,QAAQ,CAACE,OAAT,CAAiBL,IAAjB,EAAuBE,OAAvB;AACA,SAAOC,QAAP;AACA,CAJD;AAMA;AACA;AACA;;;AACA,IAAIG,gBAAgB,GAAG,0BAAAH,QAAQ,EAAI;AAClCA,EAAAA,QAAQ,CAACI,UAAT;AACA,CAFD;AAIA;AACA;AACA;AACA;;;AACA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,QAAQ,EAAI;AAC7C,MAAI,OAAOA,QAAP,KAAoB,UAAxB,EAAoC;AACnCV,IAAAA,eAAe,GAAGU,QAAlB;AACA;AACD,CAJD;AAMA;AACA;AACA;AACA;;;AACA,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAAAC,SAAS,EAAI;AAC/C,MAAI,OAAOA,SAAP,KAAqB,UAAzB,EAAqC;AACpCL,IAAAA,gBAAgB,GAAGK,SAAnB;AACA;AACD,CAJD;AAMA;AACA;AACA;AACA;AACA;;;AACA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACZ,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,EAA6B;AACnD,MAAMC,QAAQ,GAAGJ,eAAe,CAACC,IAAD,EAAOC,QAAP,EAAiBC,OAAjB,CAAhC;;AACAL,EAAAA,SAAS,CAACgB,GAAV,CAAcb,IAAd,EAAoBG,QAApB;AACA,CAHD;AAKA;AACA;AACA;;;AACA,IAAMW,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAAd,IAAI,EAAI;AAChC,MAAMG,QAAQ,GAAGN,SAAS,CAACkB,GAAV,CAAcf,IAAd,CAAjB;;AACA,MAAIG,QAAJ,EAAc;AACbG,IAAAA,gBAAgB,CAACH,QAAD,CAAhB;;AACAN,IAAAA,SAAS,CAACmB,MAAV,CAAiBhB,IAAjB;AACA;AACD,CAND;;AAQA,SACCQ,yBADD,EAECE,0BAFD,EAGCE,cAHD,EAICE,gBAJD","sourcesContent":["const observers = new WeakMap(); // We want just one observer per node, store them here -> DOM nodes are keys\n\n/**\n * Default implementation with MutationObserver for browsers with native support\n */\nlet _createObserver = (node, callback, options) => {\n\tconst observer = new MutationObserver(callback);\n\tobserver.observe(node, options);\n\treturn observer;\n};\n\n/**\n * Default implementation with MutationObserver for browsers with native support\n */\nlet _destroyObserver = observer => {\n\tobserver.disconnect();\n};\n\n/**\n * Allows to create an alternative DOM observer implementation\n * @param createFn\n */\nconst setCreateObserverCallback = createFn => {\n\tif (typeof createFn === \"function\") {\n\t\t_createObserver = createFn;\n\t}\n};\n\n/**\n * Allows to create an alternative DOM observer implementation\n * @param destroyFn\n */\nconst setDestroyObserverCallback = destroyFn => {\n\tif (typeof destroyFn === \"function\") {\n\t\t_destroyObserver = destroyFn;\n\t}\n};\n\n/**\n * @param node\n * @param callback\n * @param options\n */\nconst observeDOMNode = (node, callback, options) => {\n\tconst observer = _createObserver(node, callback, options);\n\tobservers.set(node, observer);\n};\n\n/**\n * @param node\n */\nconst unobserveDOMNode = node => {\n\tconst observer = observers.get(node);\n\tif (observer) {\n\t\t_destroyObserver(observer);\n\t\tobservers.delete(node);\n\t}\n};\n\nexport {\n\tsetCreateObserverCallback,\n\tsetDestroyObserverCallback,\n\tobserveDOMNode,\n\tunobserveDOMNode,\n};\n"]},"metadata":{},"sourceType":"module"}