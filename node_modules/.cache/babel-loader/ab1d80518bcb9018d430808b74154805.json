{"ast":null,"code":"import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScope.js\";\n/**\n *\n * @class\n * @public\n */\n\nclass UI5ElementMetadata {\n  constructor(metadata) {\n    this.metadata = metadata;\n  }\n\n  getInitialState() {\n    if (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n      return this._initialState;\n    }\n\n    const initialState = {};\n    const slotsAreManaged = this.slotsAreManaged(); // Initialize properties\n\n    const props = this.getProperties();\n\n    for (const propName in props) {\n      // eslint-disable-line\n      const propType = props[propName].type;\n      const propDefaultValue = props[propName].defaultValue;\n\n      if (propType === Boolean) {\n        initialState[propName] = false;\n\n        if (propDefaultValue !== undefined) {\n          console.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n        }\n      } else if (props[propName].multiple) {\n        initialState[propName] = [];\n      } else if (propType === Object) {\n        initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n      } else if (propType === String) {\n        initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n      } else {\n        initialState[propName] = propDefaultValue;\n      }\n    } // Initialize slots\n\n\n    if (slotsAreManaged) {\n      const slots = this.getSlots();\n\n      for (const [slotName, slotData] of Object.entries(slots)) {\n        // eslint-disable-line\n        const propertyName = slotData.propertyName || slotName;\n        initialState[propertyName] = [];\n      }\n    }\n\n    this._initialState = initialState;\n    return initialState;\n  }\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n\n\n  static validatePropertyValue(value, propData) {\n    const isMultiple = propData.multiple;\n\n    if (isMultiple) {\n      return value.map(propValue => validateSingleProperty(propValue, propData));\n    }\n\n    return validateSingleProperty(value, propData);\n  }\n  /**\n   * Only intended for use by UI5Element.js\n   * @protected\n   */\n\n\n  static validateSlotValue(value, slotData) {\n    return validateSingleSlot(value, slotData);\n  }\n  /**\n   * Returns the tag of the UI5 Element without the scope\n   * @public\n   */\n\n\n  getPureTag() {\n    return this.metadata.tag;\n  }\n  /**\n   * Returns the tag of the UI5 Element\n   * @public\n   */\n\n\n  getTag() {\n    const pureTag = this.metadata.tag;\n    const suffix = getEffectiveScopingSuffixForTag(pureTag);\n\n    if (!suffix) {\n      return pureTag;\n    }\n\n    return `${pureTag}-${suffix}`;\n  }\n  /**\n   * Used to get the tag we need to register for backwards compatibility\n   * @public\n   */\n\n\n  getAltTag() {\n    const pureAltTag = this.metadata.altTag;\n\n    if (!pureAltTag) {\n      return;\n    }\n\n    const suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n\n    if (!suffix) {\n      return pureAltTag;\n    }\n\n    return `${pureAltTag}-${suffix}`;\n  }\n  /**\n   * Determines whether a property should have an attribute counterpart\n   * @public\n   * @param propName\n   * @returns {boolean}\n   */\n\n\n  hasAttribute(propName) {\n    const propData = this.getProperties()[propName];\n    return propData.type !== Object && !propData.noAttribute && !propData.multiple;\n  }\n  /**\n   * Returns an array with the properties of the UI5 Element (in camelCase)\n   * @public\n   * @returns {string[]}\n   */\n\n\n  getPropertiesList() {\n    return Object.keys(this.getProperties());\n  }\n  /**\n   * Returns an array with the attributes of the UI5 Element (in kebab-case)\n   * @public\n   * @returns {string[]}\n   */\n\n\n  getAttributesList() {\n    return this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n  }\n  /**\n   * Returns an object with key-value pairs of slots and their metadata definitions\n   * @public\n   */\n\n\n  getSlots() {\n    return this.metadata.slots || {};\n  }\n  /**\n   * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n   * @returns {boolean}\n   */\n\n\n  canSlotText() {\n    const defaultSlot = this.getSlots().default;\n    return defaultSlot && defaultSlot.type === Node;\n  }\n  /**\n   * Determines whether this UI5 Element supports any slots\n   * @public\n   */\n\n\n  hasSlots() {\n    return !!Object.entries(this.getSlots()).length;\n  }\n  /**\n   * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n   * @public\n   */\n\n\n  hasIndividualSlots() {\n    return this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n  }\n  /**\n   * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n   * @public\n   */\n\n\n  slotsAreManaged() {\n    return !!this.metadata.managedSlots;\n  }\n  /**\n   * Returns an object with key-value pairs of properties and their metadata definitions\n   * @public\n   */\n\n\n  getProperties() {\n    return this.metadata.properties || {};\n  }\n  /**\n   * Returns an object with key-value pairs of events and their metadata definitions\n   * @public\n   */\n\n\n  getEvents() {\n    return this.metadata.events || {};\n  }\n  /**\n   * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n   * @returns {boolean}\n   */\n\n\n  isLanguageAware() {\n    return !!this.metadata.languageAware;\n  }\n  /**\n   * Determines whether this UI5 Element has any theme dependant carachteristics.\n   * @returns {boolean}\n   */\n\n\n  isThemeAware() {\n    return !!this.metadata.themeAware;\n  }\n  /**\n   * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n   * and determines whether this should cause and invalidation\n   *\n   * @param slotName the name of the slot in which a child was changed\n   * @param type the type of change in the child: \"property\" or \"slot\"\n   * @param name the name of the property/slot that changed\n   * @returns {boolean}\n   */\n\n\n  shouldInvalidateOnChildChange(slotName, type, name) {\n    const config = this.getSlots()[slotName].invalidateOnChildChange; // invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\n    if (config === undefined) {\n      return false;\n    } // The simple format was used: invalidateOnChildChange: true/false;\n\n\n    if (typeof config === \"boolean\") {\n      return config;\n    } // The complex format was used: invalidateOnChildChange: { properties, slots }\n\n\n    if (typeof config === \"object\") {\n      // A property was changed\n      if (type === \"property\") {\n        // The config object does not have a properties field\n        if (config.properties === undefined) {\n          return false;\n        } // The config object has the short format: properties: true/false\n\n\n        if (typeof config.properties === \"boolean\") {\n          return config.properties;\n        } // The config object has the complex format: properties: [...]\n\n\n        if (Array.isArray(config.properties)) {\n          return config.properties.includes(name);\n        }\n\n        throw new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n      } // A slot was changed\n\n\n      if (type === \"slot\") {\n        // The config object does not have a slots field\n        if (config.slots === undefined) {\n          return false;\n        } // The config object has the short format: slots: true/false\n\n\n        if (typeof config.slots === \"boolean\") {\n          return config.slots;\n        } // The config object has the complex format: slots: [...]\n\n\n        if (Array.isArray(config.slots)) {\n          return config.slots.includes(name);\n        }\n\n        throw new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n      }\n    }\n\n    throw new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n  }\n\n}\n\nconst validateSingleProperty = (value, propData) => {\n  const propertyType = propData.type;\n\n  if (propertyType === Boolean) {\n    return typeof value === \"boolean\" ? value : false;\n  }\n\n  if (propertyType === String) {\n    return typeof value === \"string\" || typeof value === \"undefined\" || value === null ? value : value.toString();\n  }\n\n  if (propertyType === Object) {\n    return typeof value === \"object\" ? value : propData.defaultValue;\n  }\n\n  if (isDescendantOf(propertyType, DataType)) {\n    return propertyType.isValid(value) ? value : propData.defaultValue;\n  }\n};\n\nconst validateSingleSlot = (value, slotData) => {\n  value && getSlottedElements(value).forEach(el => {\n    if (!(el instanceof slotData.type)) {\n      throw new Error(`${el} is not of type ${slotData.type}`);\n    }\n  });\n  return value;\n};\n\nexport default UI5ElementMetadata;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/UI5ElementMetadata.js"],"names":["DataType","isDescendantOf","camelToKebabCase","getSlottedElements","getEffectiveScopingSuffixForTag","UI5ElementMetadata","constructor","metadata","getInitialState","Object","prototype","hasOwnProperty","call","_initialState","initialState","slotsAreManaged","props","getProperties","propName","propType","type","propDefaultValue","defaultValue","Boolean","undefined","console","warn","multiple","String","slots","getSlots","slotName","slotData","entries","propertyName","validatePropertyValue","value","propData","isMultiple","map","propValue","validateSingleProperty","validateSlotValue","validateSingleSlot","getPureTag","tag","getTag","pureTag","suffix","getAltTag","pureAltTag","altTag","hasAttribute","noAttribute","getPropertiesList","keys","getAttributesList","filter","canSlotText","defaultSlot","default","Node","hasSlots","length","hasIndividualSlots","some","_slotName","individualSlots","managedSlots","properties","getEvents","events","isLanguageAware","languageAware","isThemeAware","themeAware","shouldInvalidateOnChildChange","name","config","invalidateOnChildChange","Array","isArray","includes","Error","propertyType","toString","isValid","forEach","el"],"mappings":"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","sourcesContent":["import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScope.js\";\n\n/**\n *\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n\tconstructor(metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\tgetInitialState() {\n\t\tif (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n\t\t\treturn this._initialState;\n\t\t}\n\n\t\tconst initialState = {};\n\t\tconst slotsAreManaged = this.slotsAreManaged();\n\n\t\t// Initialize properties\n\t\tconst props = this.getProperties();\n\t\tfor (const propName in props) { // eslint-disable-line\n\t\t\tconst propType = props[propName].type;\n\t\t\tconst propDefaultValue = props[propName].defaultValue;\n\n\t\t\tif (propType === Boolean) {\n\t\t\t\tinitialState[propName] = false;\n\n\t\t\t\tif (propDefaultValue !== undefined) {\n\t\t\t\t\tconsole.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n\t\t\t\t}\n\t\t\t} else if (props[propName].multiple) {\n\t\t\t\tinitialState[propName] = [];\n\t\t\t} else if (propType === Object) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n\t\t\t} else if (propType === String) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n\t\t\t} else {\n\t\t\t\tinitialState[propName] = propDefaultValue;\n\t\t\t}\n\t\t}\n\n\t\t// Initialize slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tinitialState[propertyName] = [];\n\t\t\t}\n\t\t}\n\n\t\tthis._initialState = initialState;\n\t\treturn initialState;\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validatePropertyValue(value, propData) {\n\t\tconst isMultiple = propData.multiple;\n\t\tif (isMultiple) {\n\t\t\treturn value.map(propValue => validateSingleProperty(propValue, propData));\n\t\t}\n\t\treturn validateSingleProperty(value, propData);\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validateSlotValue(value, slotData) {\n\t\treturn validateSingleSlot(value, slotData);\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element without the scope\n\t * @public\n\t */\n\tgetPureTag() {\n\t\treturn this.metadata.tag;\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element\n\t * @public\n\t */\n\tgetTag() {\n\t\tconst pureTag = this.metadata.tag;\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureTag);\n\t\tif (!suffix) {\n\t\t\treturn pureTag;\n\t\t}\n\n\t\treturn `${pureTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Used to get the tag we need to register for backwards compatibility\n\t * @public\n\t */\n\tgetAltTag() {\n\t\tconst pureAltTag = this.metadata.altTag;\n\t\tif (!pureAltTag) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n\t\tif (!suffix) {\n\t\t\treturn pureAltTag;\n\t\t}\n\n\t\treturn `${pureAltTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Determines whether a property should have an attribute counterpart\n\t * @public\n\t * @param propName\n\t * @returns {boolean}\n\t */\n\thasAttribute(propName) {\n\t\tconst propData = this.getProperties()[propName];\n\t\treturn propData.type !== Object && !propData.noAttribute && !propData.multiple;\n\t}\n\n\t/**\n\t * Returns an array with the properties of the UI5 Element (in camelCase)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetPropertiesList() {\n\t\treturn Object.keys(this.getProperties());\n\t}\n\n\t/**\n\t * Returns an array with the attributes of the UI5 Element (in kebab-case)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetAttributesList() {\n\t\treturn this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of slots and their metadata definitions\n\t * @public\n\t */\n\tgetSlots() {\n\t\treturn this.metadata.slots || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n\t * @returns {boolean}\n\t */\n\tcanSlotText() {\n\t\tconst defaultSlot = this.getSlots().default;\n\t\treturn defaultSlot && defaultSlot.type === Node;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots\n\t * @public\n\t */\n\thasSlots() {\n\t\treturn !!Object.entries(this.getSlots()).length;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n\t * @public\n\t */\n\thasIndividualSlots() {\n\t\treturn this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n\t * @public\n\t */\n\tslotsAreManaged() {\n\t\treturn !!this.metadata.managedSlots;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of properties and their metadata definitions\n\t * @public\n\t */\n\tgetProperties() {\n\t\treturn this.metadata.properties || {};\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of events and their metadata definitions\n\t * @public\n\t */\n\tgetEvents() {\n\t\treturn this.metadata.events || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n\t * @returns {boolean}\n\t */\n\tisLanguageAware() {\n\t\treturn !!this.metadata.languageAware;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any theme dependant carachteristics.\n\t * @returns {boolean}\n\t */\n\t isThemeAware() {\n\t\treturn !!this.metadata.themeAware;\n\t}\n\n\t/**\n\t * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n\t * and determines whether this should cause and invalidation\n\t *\n\t * @param slotName the name of the slot in which a child was changed\n\t * @param type the type of change in the child: \"property\" or \"slot\"\n\t * @param name the name of the property/slot that changed\n\t * @returns {boolean}\n\t */\n\tshouldInvalidateOnChildChange(slotName, type, name) {\n\t\tconst config = this.getSlots()[slotName].invalidateOnChildChange;\n\n\t\t// invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\t\tif (config === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The simple format was used: invalidateOnChildChange: true/false;\n\t\tif (typeof config === \"boolean\") {\n\t\t\treturn config;\n\t\t}\n\n\t\t// The complex format was used: invalidateOnChildChange: { properties, slots }\n\t\tif (typeof config === \"object\") {\n\t\t\t// A property was changed\n\t\t\tif (type === \"property\") {\n\t\t\t\t// The config object does not have a properties field\n\t\t\t\tif (config.properties === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: properties: true/false\n\t\t\t\tif (typeof config.properties === \"boolean\") {\n\t\t\t\t\treturn config.properties;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: properties: [...]\n\t\t\t\tif (Array.isArray(config.properties)) {\n\t\t\t\t\treturn config.properties.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n\t\t\t}\n\n\t\t\t// A slot was changed\n\t\t\tif (type === \"slot\") {\n\t\t\t\t// The config object does not have a slots field\n\t\t\t\tif (config.slots === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: slots: true/false\n\t\t\t\tif (typeof config.slots === \"boolean\") {\n\t\t\t\t\treturn config.slots;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: slots: [...]\n\t\t\t\tif (Array.isArray(config.slots)) {\n\t\t\t\t\treturn config.slots.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n\t}\n}\n\nconst validateSingleProperty = (value, propData) => {\n\tconst propertyType = propData.type;\n\n\tif (propertyType === Boolean) {\n\t\treturn typeof value === \"boolean\" ? value : false;\n\t}\n\tif (propertyType === String) {\n\t\treturn (typeof value === \"string\" || typeof value === \"undefined\" || value === null) ? value : value.toString();\n\t}\n\tif (propertyType === Object) {\n\t\treturn typeof value === \"object\" ? value : propData.defaultValue;\n\t}\n\tif (isDescendantOf(propertyType, DataType)) {\n\t\treturn propertyType.isValid(value) ? value : propData.defaultValue;\n\t}\n};\n\nconst validateSingleSlot = (value, slotData) => {\n\tvalue && getSlottedElements(value).forEach(el => {\n\t\tif (!(el instanceof slotData.type)) {\n\t\t\tthrow new Error(`${el} is not of type ${slotData.type}`);\n\t\t}\n\t});\n\n\treturn value;\n};\n\nexport default UI5ElementMetadata;\n"]},"metadata":{},"sourceType":"module"}