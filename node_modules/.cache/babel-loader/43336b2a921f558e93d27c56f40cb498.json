{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport { createUseStyles } from 'react-jss';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/dist/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';\nimport React, { forwardRef } from 'react';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nvar TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\nvar useStyles = createUseStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\n\nvar Text = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      renderWhitespace = props.renderWhitespace,\n      wrapping = props.wrapping,\n      className = props.className,\n      style = props.style,\n      tooltip = props.tooltip,\n      slot = props.slot;\n  var classes = useStyles();\n  var classNameString = StyleClassHelper.of(classes.text);\n\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n\n  if (className) {\n    classNameString.put(className);\n  }\n\n  var passThroughProps = usePassThroughHtmlProps(props);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: ref,\n    style: style,\n    className: classNameString.toString(),\n    title: tooltip,\n    slot: slot\n  }, passThroughProps), children);\n});\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"sources":["../src/components/Text/Text.jss.ts","../src/components/Text/index.tsx"],"names":["TextStyles","text","fontFamily","ThemingParameters","fontSize","fontWeight","color","display","boxSizing","whiteSpace","wordWrap","maxWidth","renderWhitespace","noWrap","textOverflow","overflow","useStyles","createUseStyles","name","Text","forwardRef","children","wrapping","className","style","tooltip","slot","props","classes","classNameString","StyleClassHelper","passThroughProps","usePassThroughHtmlProps"],"mappings":";;;;;;AAEO,IAAMA,UAAU,GAAG;AACxB;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,iBAAiB,CADzB,aAAA;AAEJC,IAAAA,QAAQ,EAAED,iBAAiB,CAFvB,WAAA;AAGJE,IAAAA,UAAU,EAHN,QAAA;AAIJC,IAAAA,KAAK,EAAEH,iBAAiB,CAJpB,YAAA;AAKJI,IAAAA,OAAO,EALH,cAAA;AAMJC,IAAAA,SAAS,EANL,YAAA;AAOJC,IAAAA,UAAU,EAPN,UAAA;AAQJC,IAAAA,QAAQ,EARJ,YAAA;AASJC,IAAAA,QAAQ,EAAE;AATN,GAFkB;AAaxBC,EAAAA,gBAAgB,EAAE;AAChBH,IAAAA,UAAU,EAAE;AADI,GAbM;AAgBxBI,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EADN,UAAA;AAENL,IAAAA,UAAU,EAFJ,QAAA;AAGNC,IAAAA,QAAQ,EAHF,QAAA;AAINK,IAAAA,QAAQ,EAJF,QAAA;AAKN,0BAAsB;AACpBN,MAAAA,UAAU,EAAE;AADQ;AALhB;AAhBgB,CAAnB;ACoBP,IAAMO,SAAS,GAAGC,eAAe,CAAA,UAAA,EAAa;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAb,CAAjC;AACA;AACA;AACA;AACA;;IACMC,IAAI,GAAA,aAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAqD;AAC3E,MAAQC,QAAR,GAAkFM,KAAlF,CAAA,QAAA;AAAA,MAAkBf,gBAAlB,GAAkFe,KAAlF,CAAA,gBAAA;AAAA,MAAoCL,QAApC,GAAkFK,KAAlF,CAAA,QAAA;AAAA,MAA8CJ,SAA9C,GAAkFI,KAAlF,CAAA,SAAA;AAAA,MAAyDH,KAAzD,GAAkFG,KAAlF,CAAA,KAAA;AAAA,MAAgEF,OAAhE,GAAkFE,KAAlF,CAAA,OAAA;AAAA,MAAyED,IAAzE,GAAkFC,KAAlF,CAAA,IAAA;AACA,MAAMC,OAAO,GAAGZ,SAAhB,EAAA;AACA,MAAMa,eAAe,GAAGC,gBAAgB,CAAhBA,EAAAA,CAAoBF,OAAO,CAAnD,IAAwBE,CAAxB;;AACA,MAAIR,QAAQ,KAAZ,KAAA,EAAwB;AACtBO,IAAAA,eAAe,CAAfA,GAAAA,CAAoBD,OAAO,CAA3BC,MAAAA;AACD;;AACD,MAAA,gBAAA,EAAsB;AACpBA,IAAAA,eAAe,CAAfA,GAAAA,CAAoBD,OAAO,CAA3BC,gBAAAA;AACD;;AACD,MAAA,SAAA,EAAe;AACbA,IAAAA,eAAe,CAAfA,GAAAA,CAAAA,SAAAA;AACD;;AAED,MAAME,gBAAgB,GAAGC,uBAAuB,CAAhD,KAAgD,CAAhD;AAEA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AACE,IAAA,GAAG,EADL,GAAA;AAEE,IAAA,KAAK,EAFP,KAAA;AAGE,IAAA,SAAS,EAAEH,eAAe,CAH5B,QAGaA,EAHb;AAIE,IAAA,KAAK,EAJP,OAAA;AAKE,IAAA,IAAI,EAAEH;AALR,GAAA,EAAA,gBAAA,CAAA,EADF,QACE,CADF;AAhBqB,CAAA,C;AA8BvBP,IAAI,CAAJA,YAAAA,GAAoB;AAClBP,EAAAA,gBAAgB,EADE,KAAA;AAElBU,EAAAA,QAAQ,EAAE;AAFQ,CAApBH;AAKAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\n","import { createUseStyles } from 'react-jss';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/dist/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { TextStyles } from './Text.jss';\n\nexport interface TextPropTypes extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children: string | JSX.Element | ReactNode;\n  /**\n   * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.\n   */\n  renderWhitespace?: boolean;\n  /**\n   * Defines whether the text wraps when there is not enough space.\n   */\n  wrapping?: boolean;\n}\n\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef((props: TextPropTypes, ref: Ref<HTMLSpanElement>) => {\n  const { children, renderWhitespace, wrapping, className, style, tooltip, slot } = props;\n  const classes = useStyles();\n  const classNameString = StyleClassHelper.of(classes.text);\n  if (wrapping === false) {\n    classNameString.put(classes.noWrap);\n  }\n  if (renderWhitespace) {\n    classNameString.put(classes.renderWhitespace);\n  }\n  if (className) {\n    classNameString.put(className);\n  }\n\n  const passThroughProps = usePassThroughHtmlProps(props);\n\n  return (\n    <span\n      ref={ref}\n      style={style}\n      className={classNameString.toString()}\n      title={tooltip}\n      slot={slot}\n      {...passThroughProps}\n    >\n      {children}\n    </span>\n  );\n});\n\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\n\nText.displayName = 'Text';\n\nexport { Text };\n"]},"metadata":{},"sourceType":"module"}