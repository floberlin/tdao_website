{"ast":null,"code":"/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Result from '../Result';\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport ResultMetadataType from '../ResultMetadataType';\nimport System from '../util/System';\nimport Decoder from './decoder/Decoder';\nimport Detector from './detector/Detector'; // import java.util.List;\n// import java.util.Map;\n\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\n\nvar AztecReader = function () {\n  function AztecReader() {}\n  /**\n   * Locates and decodes a Data Matrix code in an image.\n   *\n   * @return a String representing the content encoded by the Data Matrix code\n   * @throws NotFoundException if a Data Matrix code cannot be found\n   * @throws FormatException if a Data Matrix code cannot be decoded\n   */\n\n\n  AztecReader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    var exception = null;\n    var detector = new Detector(image.getBlackMatrix());\n    var points = null;\n    var decoderResult = null;\n\n    try {\n      var detectorResult = detector.detectMirror(false);\n      points = detectorResult.getPoints();\n      this.reportFoundResultPoints(hints, points);\n      decoderResult = new Decoder().decode(detectorResult);\n    } catch (e) {\n      exception = e;\n    }\n\n    if (decoderResult == null) {\n      try {\n        var detectorResult = detector.detectMirror(true);\n        points = detectorResult.getPoints();\n        this.reportFoundResultPoints(hints, points);\n        decoderResult = new Decoder().decode(detectorResult);\n      } catch (e) {\n        if (exception != null) {\n          throw exception;\n        }\n\n        throw e;\n      }\n    }\n\n    var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat.AZTEC, System.currentTimeMillis());\n    var byteSegments = decoderResult.getByteSegments();\n\n    if (byteSegments != null) {\n      result.putMetadata(ResultMetadataType.BYTE_SEGMENTS, byteSegments);\n    }\n\n    var ecLevel = decoderResult.getECLevel();\n\n    if (ecLevel != null) {\n      result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, ecLevel);\n    }\n\n    return result;\n  };\n\n  AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n    if (hints != null) {\n      var rpcb_1 = hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n\n      if (rpcb_1 != null) {\n        points.forEach(function (point, idx, arr) {\n          rpcb_1.foundPossibleResultPoint(point);\n        });\n      }\n    }\n  }; // @Override\n\n\n  AztecReader.prototype.reset = function () {// do nothing\n  };\n\n  return AztecReader;\n}();\n\nexport default AztecReader;","map":{"version":3,"sources":["../../../../src/core/aztec/AztecReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2010 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport Result from '../Result';\nimport BarcodeFormat from '../BarcodeFormat';\nimport DecodeHintType from '../DecodeHintType';\nimport ResultMetadataType from '../ResultMetadataType';\nimport System from '../util/System';\nimport Decoder from './decoder/Decoder';\nimport Detector from './detector/Detector';\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode Aztec codes in an image.\n *\n * @author David Olivier\n */\nvar AztecReader = /** @class */ (function () {\n    function AztecReader() {\n    }\n    /**\n     * Locates and decodes a Data Matrix code in an image.\n     *\n     * @return a String representing the content encoded by the Data Matrix code\n     * @throws NotFoundException if a Data Matrix code cannot be found\n     * @throws FormatException if a Data Matrix code cannot be decoded\n     */\n    AztecReader.prototype.decode = function (image, hints) {\n        if (hints === void 0) { hints = null; }\n        var exception = null;\n        var detector = new Detector(image.getBlackMatrix());\n        var points = null;\n        var decoderResult = null;\n        try {\n            var detectorResult = detector.detectMirror(false);\n            points = detectorResult.getPoints();\n            this.reportFoundResultPoints(hints, points);\n            decoderResult = new Decoder().decode(detectorResult);\n        }\n        catch (e) {\n            exception = e;\n        }\n        if (decoderResult == null) {\n            try {\n                var detectorResult = detector.detectMirror(true);\n                points = detectorResult.getPoints();\n                this.reportFoundResultPoints(hints, points);\n                decoderResult = new Decoder().decode(detectorResult);\n            }\n            catch (e) {\n                if (exception != null) {\n                    throw exception;\n                }\n                throw e;\n            }\n        }\n        var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), decoderResult.getNumBits(), points, BarcodeFormat.AZTEC, System.currentTimeMillis());\n        var byteSegments = decoderResult.getByteSegments();\n        if (byteSegments != null) {\n            result.putMetadata(ResultMetadataType.BYTE_SEGMENTS, byteSegments);\n        }\n        var ecLevel = decoderResult.getECLevel();\n        if (ecLevel != null) {\n            result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, ecLevel);\n        }\n        return result;\n    };\n    AztecReader.prototype.reportFoundResultPoints = function (hints, points) {\n        if (hints != null) {\n            var rpcb_1 = hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n            if (rpcb_1 != null) {\n                points.forEach(function (point, idx, arr) {\n                    rpcb_1.foundPossibleResultPoint(point);\n                });\n            }\n        }\n    };\n    // @Override\n    AztecReader.prototype.reset = function () {\n        // do nothing\n    };\n    return AztecReader;\n}());\nexport default AztecReader;\n//# sourceMappingURL=AztecReader.js.map"]},"metadata":{},"sourceType":"module"}