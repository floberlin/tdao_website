{"ast":null,"code":"import { _Σ as o } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nvar t = o.et,\n    i = function i(o) {\n  return null === o || \"object\" != typeof o && \"function\" != typeof o;\n},\n    n = {\n  HTML: 1,\n  SVG: 2\n},\n    v = function v(o, t) {\n  var i, n;\n  return void 0 === t ? void 0 !== (null === (i = o) || void 0 === i ? void 0 : i._$litType$) : (null === (n = o) || void 0 === n ? void 0 : n._$litType$) === t;\n},\n    l = function l(o) {\n  var t;\n  return void 0 !== (null === (t = o) || void 0 === t ? void 0 : t._$litDirective$);\n},\n    r = function r(o) {\n  var t;\n  return null === (t = o) || void 0 === t ? void 0 : t._$litDirective$;\n},\n    d = function d(o) {\n  return void 0 === o.strings;\n},\n    e = function e() {\n  return document.createComment(\"\");\n},\n    u = function u(o, i, n) {\n  var v;\n  var l = o.A.parentNode,\n      r = void 0 === i ? o.B : i.A;\n\n  if (void 0 === n) {\n    var _i = l.insertBefore(e(), r),\n        _v = l.insertBefore(e(), r);\n\n    n = new t(_i, _v, o, o.options);\n  } else {\n    var _t = n.B.nextSibling,\n        _i2 = n.M !== o;\n\n    if (_i2 && (null === (v = n.Q) || void 0 === v || v.call(n, o), n.M = o), _t !== r || _i2) {\n      var _o = n.A;\n\n      for (; _o !== _t;) {\n        var _t2 = _o.nextSibling;\n        l.insertBefore(_o, r), _o = _t2;\n      }\n    }\n  }\n\n  return n;\n},\n    c = function c(o, t) {\n  var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : o;\n  return o.I(t, i), o;\n},\n    s = {},\n    f = function f(o) {\n  var t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : s;\n  return o.H = t;\n},\n    a = function a(o) {\n  return o.H;\n},\n    m = function m(o) {\n  var t;\n  null === (t = o.P) || void 0 === t || t.call(o, !1, !0);\n  var i = o.A;\n  var n = o.B.nextSibling;\n\n  for (; i !== n;) {\n    var _o2 = i.nextSibling;\n    i.remove(), i = _o2;\n  }\n},\n    p = function p(o) {\n  o.R();\n};\n\nexport { n as TemplateResultType, p as clearPart, a as getCommittedValue, r as getDirectiveClass, u as insertPart, l as isDirectiveResult, i as isPrimitive, d as isSingleExpression, v as isTemplateResult, m as removePart, c as setChildPartValue, f as setCommittedValue };","map":{"version":3,"sources":["src/directive-helpers.ts"],"names":["et","ChildPart","_Σ","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","_$litType$","isDirectiveResult","_$litDirective$","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","parentChanged","_$parent","_$reparentDisconnectables","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","_$setChildPartConnected","end","remove","clearPart","_$clear"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_Σ, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _Σ;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType = typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? (value as TemplateResult)?._$litType$ !== undefined\n    : (value as TemplateResult)?._$litType$ === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  (value as DirectiveResult)?._$litDirective$ !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  (value as DirectiveResult)?._$litDirective$;\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const parentChanged = part._$parent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$setChildPartConnected?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}