{"ast":null,"code":"var suf;\nvar rulesObj = {\n  include: [/^ui5-/],\n  exclude: []\n};\nvar tagsCache = new Map(); // true/false means the tag should/should not be cached, undefined means not known yet.\n\n/**\n * Sets the suffix to be used for custom elements scoping, f.e. pass \"demo\" to get tags such as \"ui5-button-demo\".\n * Note: by default all tags starting with \"ui5-\" will be scoped, unless you change this by calling \"setCustomElementsScopingRules\"\n *\n * @public\n * @param suffix The scoping suffix\n */\n\nvar setCustomElementsScopingSuffix = function setCustomElementsScopingSuffix(suffix) {\n  if (!suffix.match(/^[a-zA-Z0-9_-]+$/)) {\n    throw new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n  }\n\n  suf = suffix;\n};\n/**\n * Returns the currently set scoping suffix, or undefined if not set.\n *\n * @public\n * @returns {String|undefined}\n */\n\n\nvar getCustomElementsScopingSuffix = function getCustomElementsScopingSuffix() {\n  return suf;\n};\n/**\n * Sets the rules, governing which custom element tags to scope and which not, f.e.\n * setCustomElementsScopingRules({include: [/^ui5-/]}, exclude: [/^ui5-mylib-/, /^ui5-carousel$/]);\n * will scope all elements starting with \"ui5-\" but not the ones starting with \"ui5-mylib-\" and not \"ui5-carousel\".\n *\n * @public\n * @param rules Object with \"include\" and \"exclude\" properties, both arrays of regular expressions. Note that \"include\"\n * rules are applied first and \"exclude\" rules second.\n */\n\n\nvar setCustomElementsScopingRules = function setCustomElementsScopingRules(rules) {\n  if (!rules || !rules.include) {\n    throw new Error(\"\\\"rules\\\" must be an object with at least an \\\"include\\\" property\");\n  }\n\n  if (!Array.isArray(rules.include) || rules.include.some(function (rule) {\n    return !(rule instanceof RegExp);\n  })) {\n    throw new Error(\"\\\"rules.include\\\" must be an array of regular expressions\");\n  }\n\n  if (rules.exclude && (!Array.isArray(rules.exclude) || rules.exclude.some(function (rule) {\n    return !(rule instanceof RegExp);\n  }))) {\n    throw new Error(\"\\\"rules.exclude\\\" must be an array of regular expressions\");\n  }\n\n  rules.exclude = rules.exclude || [];\n  rulesObj = rules;\n  tagsCache.clear(); // reset the cache upon setting new rules\n};\n/**\n * Returns the rules, governing which custom element tags to scope and which not. By default, all elements\n * starting with \"ui5-\" are scoped. The default rules are: {include: [/^ui5-/]}.\n *\n * @public\n * @returns {Object}\n */\n\n\nvar getCustomElementsScopingRules = function getCustomElementsScopingRules() {\n  return rulesObj;\n};\n/**\n * Determines whether custom elements with the given tag should be scoped or not.\n * The tag is first matched against the \"include\" rules and then against the \"exclude\" rules and the\n * result is cached until new rules are set.\n *\n * @public\n * @param tag\n */\n\n\nvar shouldScopeCustomElement = function shouldScopeCustomElement(tag) {\n  if (!tagsCache.has(tag)) {\n    var result = rulesObj.include.some(function (rule) {\n      return tag.match(rule);\n    }) && !rulesObj.exclude.some(function (rule) {\n      return tag.match(rule);\n    });\n    tagsCache.set(tag, result);\n  }\n\n  return tagsCache.get(tag);\n};\n/**\n * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.\n *\n * @public\n * @param tag\n * @returns {String}\n */\n\n\nvar getEffectiveScopingSuffixForTag = function getEffectiveScopingSuffixForTag(tag) {\n  if (shouldScopeCustomElement(tag)) {\n    return getCustomElementsScopingSuffix();\n  }\n};\n\nexport { setCustomElementsScopingSuffix, getCustomElementsScopingSuffix, setCustomElementsScopingRules, getCustomElementsScopingRules, shouldScopeCustomElement, getEffectiveScopingSuffixForTag };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/CustomElementsScope.js"],"names":["suf","rulesObj","include","exclude","tagsCache","Map","setCustomElementsScopingSuffix","suffix","match","Error","getCustomElementsScopingSuffix","setCustomElementsScopingRules","rules","Array","isArray","some","rule","RegExp","clear","getCustomElementsScopingRules","shouldScopeCustomElement","tag","has","result","set","get","getEffectiveScopingSuffixForTag"],"mappings":"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","sourcesContent":["let suf;\nlet rulesObj = {\n\tinclude: [/^ui5-/],\n\texclude: [],\n};\nconst tagsCache = new Map(); // true/false means the tag should/should not be cached, undefined means not known yet.\n\n/**\n * Sets the suffix to be used for custom elements scoping, f.e. pass \"demo\" to get tags such as \"ui5-button-demo\".\n * Note: by default all tags starting with \"ui5-\" will be scoped, unless you change this by calling \"setCustomElementsScopingRules\"\n *\n * @public\n * @param suffix The scoping suffix\n */\nconst setCustomElementsScopingSuffix = suffix => {\n\tif (!suffix.match(/^[a-zA-Z0-9_-]+$/)) {\n\t\tthrow new Error(\"Only alphanumeric characters and dashes allowed for the scoping suffix\");\n\t}\n\n\tsuf = suffix;\n};\n\n/**\n * Returns the currently set scoping suffix, or undefined if not set.\n *\n * @public\n * @returns {String|undefined}\n */\nconst getCustomElementsScopingSuffix = () => {\n\treturn suf;\n};\n\n/**\n * Sets the rules, governing which custom element tags to scope and which not, f.e.\n * setCustomElementsScopingRules({include: [/^ui5-/]}, exclude: [/^ui5-mylib-/, /^ui5-carousel$/]);\n * will scope all elements starting with \"ui5-\" but not the ones starting with \"ui5-mylib-\" and not \"ui5-carousel\".\n *\n * @public\n * @param rules Object with \"include\" and \"exclude\" properties, both arrays of regular expressions. Note that \"include\"\n * rules are applied first and \"exclude\" rules second.\n */\nconst setCustomElementsScopingRules = rules => {\n\tif (!rules || !rules.include) {\n\t\tthrow new Error(`\"rules\" must be an object with at least an \"include\" property`);\n\t}\n\n\tif (!Array.isArray(rules.include) || rules.include.some(rule => !(rule instanceof RegExp))) {\n\t\tthrow new Error(`\"rules.include\" must be an array of regular expressions`);\n\t}\n\n\tif (rules.exclude && (!Array.isArray(rules.exclude) || rules.exclude.some(rule => !(rule instanceof RegExp)))) {\n\t\tthrow new Error(`\"rules.exclude\" must be an array of regular expressions`);\n\t}\n\n\trules.exclude = rules.exclude || [];\n\trulesObj = rules;\n\ttagsCache.clear(); // reset the cache upon setting new rules\n};\n\n/**\n * Returns the rules, governing which custom element tags to scope and which not. By default, all elements\n * starting with \"ui5-\" are scoped. The default rules are: {include: [/^ui5-/]}.\n *\n * @public\n * @returns {Object}\n */\nconst getCustomElementsScopingRules = () => {\n\treturn rulesObj;\n};\n\n/**\n * Determines whether custom elements with the given tag should be scoped or not.\n * The tag is first matched against the \"include\" rules and then against the \"exclude\" rules and the\n * result is cached until new rules are set.\n *\n * @public\n * @param tag\n */\nconst shouldScopeCustomElement = tag => {\n\tif (!tagsCache.has(tag)) {\n\t\tconst result = rulesObj.include.some(rule => tag.match(rule)) && !rulesObj.exclude.some(rule => tag.match(rule));\n\t\ttagsCache.set(tag, result);\n\t}\n\n\treturn tagsCache.get(tag);\n};\n\n/**\n * Returns the currently set scoping suffix, if any and if the tag should be scoped, or undefined otherwise.\n *\n * @public\n * @param tag\n * @returns {String}\n */\nconst getEffectiveScopingSuffixForTag = tag => {\n\tif (shouldScopeCustomElement(tag)) {\n\t\treturn getCustomElementsScopingSuffix();\n\t}\n};\n\nexport {\n\tsetCustomElementsScopingSuffix,\n\tgetCustomElementsScopingSuffix,\n\tsetCustomElementsScopingRules,\n\tgetCustomElementsScopingRules,\n\tshouldScopeCustomElement,\n\tgetEffectiveScopingSuffixForTag,\n};\n"]},"metadata":{},"sourceType":"module"}