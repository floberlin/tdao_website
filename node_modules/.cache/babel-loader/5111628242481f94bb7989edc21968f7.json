{"ast":null,"code":"import { nothing as t, noChange as i } from \"../lit-html.js\";\nimport { Directive as r, PartType as s, directive as e } from \"../directive.js\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nclass n extends r {\n  constructor(i) {\n    if (super(i), this.vt = t, i.type !== s.CHILD) throw Error(this.constructor.directiveName + \"() can only be used in child bindings\");\n  }\n\n  render(r) {\n    if (r === t) return this.Vt = void 0, this.vt = r;\n    if (r === i) return r;\n    if (\"string\" != typeof r) throw Error(this.constructor.directiveName + \"() called with a non-string value\");\n    if (r === this.vt) return this.Vt;\n    this.vt = r;\n    const s = [r];\n    return s.raw = s, this.Vt = {\n      _$litType$: this.constructor.resultType,\n      strings: s,\n      values: []\n    };\n  }\n\n}\n\nn.directiveName = \"unsafeHTML\", n.resultType = 1;\nconst o = e(n);\nexport { n as UnsafeHTMLDirective, o as unsafeHTML };","map":{"version":3,"sources":["../src/directives/unsafe-html.ts"],"names":["UnsafeHTMLDirective","Directive","this","nothing","[object Object]","partInfo","super","type","PartType","CHILD","Error","constructor","directiveName","value","_templateResult","undefined","_value","noChange","strings","raw","_$litType$","resultType","values","unsafeHTML","directive"],"mappings":";;;;;;;;MAWaA,C,SAA4BC,C,CAAAA;AAOvCG,EAAAA,WAAAA,CAAYC,CAAZD,EAAYC;AAEV,QADAC,MAAMD,CAANC,GAJMJ,KAAAA,EAAAA,GAAkBC,CAIxBG,EACID,CAAAA,CAASE,IAATF,KAAkBG,CAAAA,CAASC,KAA/B,EACE,MAAUC,KAAAA,CAELR,KAAKS,WAALT,CAAgDU,aAAhDV,GADH,uCADQQ,CAAV;AAQJN;;AAAAA,EAAAA,MAAAA,CAAOS,CAAPT,EAAOS;AAEL,QAAIA,CAAAA,KAAUV,CAAd,EAEE,OADAD,KAAKY,EAALZ,GAAKY,KAAkBC,CAAvBb,EACQA,KAAKc,EAALd,GAAcW,CAAtB;AAEF,QAAIA,CAAAA,KAAUI,CAAd,EACE,OAAOJ,CAAP;AAEF,QAAoB,YAAA,OAATA,CAAX,EACE,MAAUH,KAAAA,CAELR,KAAKS,WAALT,CAAgDU,aAAhDV,GADH,mCADQQ,CAAV;AAMF,QAAIG,CAAAA,KAAUX,KAAKc,EAAnB,EACE,OAAOd,KAAKY,EAAZ;AAEFZ,SAAKc,EAALd,GAAcW,CAAdX;AACA,UAAMgB,CAAAA,GAAW,CAACL,CAAD,CAAjB;AAKA,WAHCK,CAAAA,CAAgBC,GAAhBD,GAAsBA,CAAtBA,EAGOhB,KAAKY,EAALZ,GAAuB;AAG7BkB,MAAAA,UAAAA,EAAalB,KAAKS,WAALT,CACVmB,UAJ0B;AAK7BH,MAAAA,OAAAA,EAAAA,CAL6B;AAM7BI,MAAAA,MAAAA,EAAQ;AANqB,KAA/B;AAMU;;AAjD2BrB;;AAChCD,CAAAA,CAAAA,aAAAA,GAAgB,YAAhBA,EACAA,CAAAA,CAAAA,UAAAA,GAJW,CAGXA;AAHW,MA+DPuB,CAAAA,GAAaC,CAAAA,CAAUxB,CAAVwB,CA/DN;AA+DgBxB,SAAAA,CAAAA,IAAAA,mBAAAA,EAAAA,CAAAA,IAAAA,UAAAA","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange) {\n    // TODO: add tests for nothing and noChange\n    if (value === nothing) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = ([value] as unknown) as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      _$litType$: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"]},"metadata":{},"sourceType":"module"}