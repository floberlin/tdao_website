{"ast":null,"code":"import Float from \"@ui5/webcomponents-base/dist/types/Float.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isEscape } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport SliderBase from \"./SliderBase.js\"; // Template\n\nimport SliderTemplate from \"./generated/templates/SliderTemplate.lit.js\"; // Texts\n\nimport { SLIDER_ARIA_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-slider\",\n  languageAware: true,\n  managedSlots: true,\n  properties:\n  /** @lends sap.ui.webcomponents.main.Slider.prototype */\n  {\n    /**\n     * Current value of the slider\n     *\n     * @type {Float}\n     * @defaultvalue 0\n     * @public\n     */\n    value: {\n      type: Float,\n      defaultValue: 0\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The Slider component represents a numerical range and a handle (grip).\n * The purpose of the component is to enable visual selection of a value in\n * a continuous numerical range by moving an adjustable handle.\n *\n * <h3>Structure</h3>\n * The most important properties of the Slider are:\n * <ul>\n * <li>min - The minimum value of the slider range.</li>\n * <li>max - The maximum value of the slider range.</li>\n * <li>value - The current value of the slider range.</li>\n * <li>step - Determines the increments in which the slider will move.</li>\n * <li>showTooltip - Determines if a tooltip should be displayed above the handle.</li>\n * <li>showTickmarks - Displays a visual divider between the step values.</li>\n * <li>labelInterval - Labels some or all of the tickmarks with their values.</li>\n * </ul>\n *\n * <h3>Usage</h3>\n * The most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n *\n * <h3>Responsive Behavior</h3>\n * The <code>ui5-slider</code> component adjusts to the size of its parent container by recalculating and\n * resizing the width of the control. You can move the slider handle in several different ways:\n * <ul>\n * <li>Drag and drop the handle to the desired value.</li>\n * <li>Click/tap on the range bar to move the handle to that location.</li>\n * </ul>\n *\n * <h3>CSS Shadow Parts</h3>\n *\n * <ui5-link target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">CSS Shadow Parts</ui5-link> allow developers to style elements inside the Shadow DOM.\n * <br>\n * The <code>ui5-slider</code> exposes the following CSS Shadow Parts:\n * <ul>\n * <li>progress-container - Used to style the progress container(the horizontal bar which visually represents the range between the minimum and maximum value) of the <code>ui5-slider</code>.</li>\n * <li>progress-bar - Used to style the progress bar, which shows the progress of the <code>ui5-slider</code>.</li>\n * <li>handle - Used to style the handle of the <code>ui5-slider</code>.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n *\n * <ul>\n * <li><code>Left or Down Arrow</code> - Moves the handle one step to the left, effectively decreasing the component's value by <code>step</code> amount;</li>\n * <li><code>Right or Up Arrow</code> - Moves the handle one step to the right, effectively increasing the component's value by <code>step</code> amount;</li>\n * <li><code>Left or Down Arrow + Ctrl/Cmd</code> - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;</li>\n * <li><code>Right or Up Arrow + Ctrl/Cmd</code> - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;</li>\n * <li><code>Plus</code> - Same as <code>Right or Up Arrow</code>;</li>\n * <li><code>Minus</code> - Same as <code>Left or Down Arrow</code>;</li>\n * <li><code>Home</code> - Moves the handle to the beginning of the range;</li>\n * <li><code>End</code> - Moves the handle to the end of the range;</li>\n * <li><code>Page Up</code> - Same as <code>Right or Up + Ctrl/Cmd</code>;</li>\n * <li><code>Page Down</code> - Same as <code>Left or Down + Ctrl/Cmd</code>;</li>\n * <li><code>Escape</code> - Resets the value property after interaction, to the position prior the component's focusing;</li>\n * </ul>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/Slider\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.Slider\n * @extends SliderBase\n * @tagname ui5-slider\n * @since 1.0.0-rc.11\n * @public\n */\n\nclass Slider extends SliderBase {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get template() {\n    return SliderTemplate;\n  }\n\n  constructor() {\n    super();\n    this._stateStorage.value = null;\n\n    this._setInitialValue(\"value\", null);\n  }\n  /**\n   *\n   * Check if the previously saved state is outdated. That would mean\n   * either it is the initial rendering or that a property has been changed\n   * programatically - because the previous state is always updated in\n   * the interaction handlers.\n   *\n   * Normalize current properties, update the previously stored state.\n   * Update the visual UI representation of the Slider.\n   *\n   */\n\n\n  onBeforeRendering() {\n    if (!this.isCurrentStateOutdated()) {\n      return;\n    }\n\n    this.notResized = true;\n    this.syncUIAndState(\"value\");\n\n    this._updateHandleAndProgress(this.value);\n  }\n  /**\n   * Called when the user starts interacting with the slider\n   *\n   * @private\n   */\n\n\n  _onmousedown(event) {\n    // If step is 0 no interaction is available because there is no constant\n    // (equal for all user environments) quantitative representation of the value\n    if (this.disabled || this.step === 0) {\n      return;\n    }\n\n    const newValue = this.handleDownBase(event);\n    this._valueOnInteractionStart = this.value; // Set initial value if one is not set previously on focus in.\n    // It will be restored if ESC key is pressed.\n\n    if (this._getInitialValue(\"value\") === null) {\n      this._setInitialValue(\"value\", this.value);\n    } // Do not yet update the Slider if press is over a handle. It will be updated if the user drags the mouse.\n\n\n    if (!this._isHandlePressed(this.constructor.getPageXValueFromEvent(event))) {\n      this._updateHandleAndProgress(newValue);\n\n      this.updateValue(\"value\", newValue);\n    }\n  }\n\n  _onfocusin(event) {\n    // Set initial value if one is not set previously on focus in.\n    // It will be restored if ESC key is pressed.\n    if (this._getInitialValue(\"value\") === null) {\n      this._setInitialValue(\"value\", this.value);\n    }\n\n    if (this.showTooltip) {\n      this._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.VISIBLE;\n    }\n  }\n\n  _onfocusout(event) {\n    // Prevent focusout when the focus is getting set within the slider internal\n    // element (on the handle), before the Slider' customElement itself is finished focusing\n    if (this._isFocusing()) {\n      this._preventFocusOut();\n\n      return;\n    } // Reset focus state and the stored Slider's initial\n    // value that was saved when it was first focused in\n\n\n    this._setInitialValue(\"value\", null);\n\n    if (this.showTooltip) {\n      this._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.HIDDEN;\n    }\n  }\n  /**\n   * Called when the user moves the slider\n   *\n   * @private\n   */\n\n\n  _handleMove(event) {\n    event.preventDefault(); // If step is 0 no interaction is available because there is no constant\n    // (equal for all user environments) quantitative representation of the value\n\n    if (this.disabled || this._effectiveStep === 0) {\n      return;\n    }\n\n    const newValue = this.constructor.getValueFromInteraction(event, this._effectiveStep, this._effectiveMin, this._effectiveMax, this.getBoundingClientRect(), this.directionStart);\n\n    this._updateHandleAndProgress(newValue);\n\n    this.updateValue(\"value\", newValue);\n  }\n  /** Called when the user finish interacting with the slider\n   *\n   * @private\n   */\n\n\n  _handleUp(event) {\n    if (this._valueOnInteractionStart !== this.value) {\n      this.fireEvent(\"change\");\n    }\n\n    this.handleUpBase();\n    this._valueOnInteractionStart = null;\n  }\n  /** Determines if the press is over the handle\n   *\n   * @private\n   */\n\n\n  _isHandlePressed(clientX) {\n    const sliderHandleDomRect = this._sliderHandle.getBoundingClientRect();\n\n    return clientX >= sliderHandleDomRect.left && clientX <= sliderHandleDomRect.right;\n  }\n  /** Updates the UI representation of the progress bar and handle position\n   *\n   * @private\n   */\n\n\n  _updateHandleAndProgress(newValue) {\n    const max = this._effectiveMax;\n    const min = this._effectiveMin; // The progress (completed) percentage of the slider.\n\n    this._progressPercentage = (newValue - min) / (max - min); // How many pixels from the left end of the slider will be the placed the affected  by the user action handle\n\n    this._handlePositionFromStart = this._progressPercentage * 100;\n  }\n\n  _handleActionKeyPress(event) {\n    const min = this._effectiveMin;\n    const max = this._effectiveMax;\n    const currentValue = this.value;\n    const newValue = isEscape(event) ? this._getInitialValue(\"value\") : this.constructor.clipValue(this._handleActionKeyPressBase(event, \"value\") + currentValue, min, max);\n\n    if (newValue !== currentValue) {\n      this._updateHandleAndProgress(newValue);\n\n      this.updateValue(\"value\", newValue);\n    }\n  }\n\n  get styles() {\n    return {\n      progress: {\n        \"transform\": `scaleX(${this._progressPercentage})`,\n        \"transform-origin\": `${this.directionStart} top`\n      },\n      handle: {\n        [this.directionStart]: `${this._handlePositionFromStart}%`\n      },\n      tickmarks: {\n        \"background\": `${this._tickmarks}`\n      },\n      label: {\n        \"width\": `${this._labelWidth}%`\n      },\n      labelContainer: {\n        \"width\": `100%`,\n        [this.directionStart]: `-${this._labelWidth / 2}%`\n      },\n      tooltip: {\n        \"visibility\": `${this._tooltipVisibility}`\n      }\n    };\n  }\n\n  get _sliderHandle() {\n    return this.shadowRoot.querySelector(\".ui5-slider-handle\");\n  }\n\n  get labelItems() {\n    return this._labelItems;\n  }\n\n  get tooltipValue() {\n    const stepPrecision = this.constructor._getDecimalPrecisionOfNumber(this._effectiveStep);\n\n    return this.value.toFixed(stepPrecision);\n  }\n\n  get _ariaDisabled() {\n    return this.disabled || undefined;\n  }\n\n  get _ariaLabelledByText() {\n    return Slider.i18nBundle.getText(SLIDER_ARIA_DESCRIPTION);\n  }\n\n  static async onDefine() {\n    Slider.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n\n}\n\nSlider.define();\nexport default Slider;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/Slider.js"],"names":["Float","getI18nBundle","isEscape","SliderBase","SliderTemplate","SLIDER_ARIA_DESCRIPTION","metadata","tag","languageAware","managedSlots","properties","value","type","defaultValue","Slider","template","constructor","_stateStorage","_setInitialValue","onBeforeRendering","isCurrentStateOutdated","notResized","syncUIAndState","_updateHandleAndProgress","_onmousedown","event","disabled","step","newValue","handleDownBase","_valueOnInteractionStart","_getInitialValue","_isHandlePressed","getPageXValueFromEvent","updateValue","_onfocusin","showTooltip","_tooltipVisibility","TOOLTIP_VISIBILITY","VISIBLE","_onfocusout","_isFocusing","_preventFocusOut","HIDDEN","_handleMove","preventDefault","_effectiveStep","getValueFromInteraction","_effectiveMin","_effectiveMax","getBoundingClientRect","directionStart","_handleUp","fireEvent","handleUpBase","clientX","sliderHandleDomRect","_sliderHandle","left","right","max","min","_progressPercentage","_handlePositionFromStart","_handleActionKeyPress","currentValue","clipValue","_handleActionKeyPressBase","styles","progress","handle","tickmarks","_tickmarks","label","_labelWidth","labelContainer","tooltip","shadowRoot","querySelector","labelItems","_labelItems","tooltipValue","stepPrecision","_getDecimalPrecisionOfNumber","toFixed","_ariaDisabled","undefined","_ariaLabelledByText","i18nBundle","getText","onDefine","define"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,6CAAlB;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,SAASC,QAAT,QAAyB,sCAAzB;AACA,OAAOC,UAAP,MAAuB,iBAAvB,C,CAEA;;AACA,OAAOC,cAAP,MAA2B,6CAA3B,C,CAEA;;AACA,SACCC,uBADD,QAEO,mCAFP;AAIA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,GAAG,EAAE,YADW;AAEhBC,EAAAA,aAAa,EAAE,IAFC;AAGhBC,EAAAA,YAAY,EAAE,IAHE;AAIhBC,EAAAA,UAAU;AAAE;AAA0D;AACrE;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,KAAK,EAAE;AACNC,MAAAA,IAAI,EAAEZ,KADA;AAENa,MAAAA,YAAY,EAAE;AAFR;AAR8D;AAJtD,CAAjB;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,MAAN,SAAqBX,UAArB,CAAgC;AACZ,aAARG,QAAQ,GAAG;AACrB,WAAOA,QAAP;AACA;;AAEkB,aAARS,QAAQ,GAAG;AACrB,WAAOX,cAAP;AACA;;AAEDY,EAAAA,WAAW,GAAG;AACb;AACA,SAAKC,aAAL,CAAmBN,KAAnB,GAA2B,IAA3B;;AACA,SAAKO,gBAAL,CAAsB,OAAtB,EAA+B,IAA/B;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCC,EAAAA,iBAAiB,GAAG;AACnB,QAAI,CAAC,KAAKC,sBAAL,EAAL,EAAoC;AACnC;AACA;;AAED,SA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","sourcesContent":["import Float from \"@ui5/webcomponents-base/dist/types/Float.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isEscape } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport SliderBase from \"./SliderBase.js\";\n\n// Template\nimport SliderTemplate from \"./generated/templates/SliderTemplate.lit.js\";\n\n// Texts\nimport {\n\tSLIDER_ARIA_DESCRIPTION,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-slider\",\n\tlanguageAware: true,\n\tmanagedSlots: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.Slider.prototype */  {\n\t\t/**\n\t\t * Current value of the slider\n\t\t *\n\t\t * @type {Float}\n\t\t * @defaultvalue 0\n\t\t * @public\n\t\t */\n\t\tvalue: {\n\t\t\ttype: Float,\n\t\t\tdefaultValue: 0,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The Slider component represents a numerical range and a handle (grip).\n * The purpose of the component is to enable visual selection of a value in\n * a continuous numerical range by moving an adjustable handle.\n *\n * <h3>Structure</h3>\n * The most important properties of the Slider are:\n * <ul>\n * <li>min - The minimum value of the slider range.</li>\n * <li>max - The maximum value of the slider range.</li>\n * <li>value - The current value of the slider range.</li>\n * <li>step - Determines the increments in which the slider will move.</li>\n * <li>showTooltip - Determines if a tooltip should be displayed above the handle.</li>\n * <li>showTickmarks - Displays a visual divider between the step values.</li>\n * <li>labelInterval - Labels some or all of the tickmarks with their values.</li>\n * </ul>\n *\n * <h3>Usage</h3>\n * The most common use case is to select values on a continuous numerical scale (e.g. temperature, volume, etc. ).\n *\n * <h3>Responsive Behavior</h3>\n * The <code>ui5-slider</code> component adjusts to the size of its parent container by recalculating and\n * resizing the width of the control. You can move the slider handle in several different ways:\n * <ul>\n * <li>Drag and drop the handle to the desired value.</li>\n * <li>Click/tap on the range bar to move the handle to that location.</li>\n * </ul>\n *\n * <h3>CSS Shadow Parts</h3>\n *\n * <ui5-link target=\"_blank\" href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::part\">CSS Shadow Parts</ui5-link> allow developers to style elements inside the Shadow DOM.\n * <br>\n * The <code>ui5-slider</code> exposes the following CSS Shadow Parts:\n * <ul>\n * <li>progress-container - Used to style the progress container(the horizontal bar which visually represents the range between the minimum and maximum value) of the <code>ui5-slider</code>.</li>\n * <li>progress-bar - Used to style the progress bar, which shows the progress of the <code>ui5-slider</code>.</li>\n * <li>handle - Used to style the handle of the <code>ui5-slider</code>.</li>\n * </ul>\n *\n * <h3>Keyboard Handling</h3>\n *\n * <ul>\n * <li><code>Left or Down Arrow</code> - Moves the handle one step to the left, effectively decreasing the component's value by <code>step</code> amount;</li>\n * <li><code>Right or Up Arrow</code> - Moves the handle one step to the right, effectively increasing the component's value by <code>step</code> amount;</li>\n * <li><code>Left or Down Arrow + Ctrl/Cmd</code> - Moves the handle to the left with step equal to 1/10th of the entire range, effectively decreasing the component's value by 1/10th of the range;</li>\n * <li><code>Right or Up Arrow + Ctrl/Cmd</code> - Moves the handle to the right with step equal to 1/10th of the entire range, effectively increasing the component's value by 1/10th of the range;</li>\n * <li><code>Plus</code> - Same as <code>Right or Up Arrow</code>;</li>\n * <li><code>Minus</code> - Same as <code>Left or Down Arrow</code>;</li>\n * <li><code>Home</code> - Moves the handle to the beginning of the range;</li>\n * <li><code>End</code> - Moves the handle to the end of the range;</li>\n * <li><code>Page Up</code> - Same as <code>Right or Up + Ctrl/Cmd</code>;</li>\n * <li><code>Page Down</code> - Same as <code>Left or Down + Ctrl/Cmd</code>;</li>\n * <li><code>Escape</code> - Resets the value property after interaction, to the position prior the component's focusing;</li>\n * </ul>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/Slider\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.Slider\n * @extends SliderBase\n * @tagname ui5-slider\n * @since 1.0.0-rc.11\n * @public\n */\nclass Slider extends SliderBase {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get template() {\n\t\treturn SliderTemplate;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\t\tthis._stateStorage.value = null;\n\t\tthis._setInitialValue(\"value\", null);\n\t}\n\n\t/**\n\t *\n\t * Check if the previously saved state is outdated. That would mean\n\t * either it is the initial rendering or that a property has been changed\n\t * programatically - because the previous state is always updated in\n\t * the interaction handlers.\n\t *\n\t * Normalize current properties, update the previously stored state.\n\t * Update the visual UI representation of the Slider.\n\t *\n\t */\n\tonBeforeRendering() {\n\t\tif (!this.isCurrentStateOutdated()) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.notResized = true;\n\t\tthis.syncUIAndState(\"value\");\n\t\tthis._updateHandleAndProgress(this.value);\n\t}\n\n\t/**\n\t * Called when the user starts interacting with the slider\n\t *\n\t * @private\n\t */\n\t_onmousedown(event) {\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this.step === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.handleDownBase(event);\n\t\tthis._valueOnInteractionStart = this.value;\n\n\t\t// Set initial value if one is not set previously on focus in.\n\t\t// It will be restored if ESC key is pressed.\n\t\tif (this._getInitialValue(\"value\") === null) {\n\t\t\tthis._setInitialValue(\"value\", this.value);\n\t\t}\n\n\t\t// Do not yet update the Slider if press is over a handle. It will be updated if the user drags the mouse.\n\t\tif (!this._isHandlePressed(this.constructor.getPageXValueFromEvent(event))) {\n\t\t\tthis._updateHandleAndProgress(newValue);\n\t\t\tthis.updateValue(\"value\", newValue);\n\t\t}\n\t}\n\n\t_onfocusin(event) {\n\t\t// Set initial value if one is not set previously on focus in.\n\t\t// It will be restored if ESC key is pressed.\n\t\tif (this._getInitialValue(\"value\") === null) {\n\t\t\tthis._setInitialValue(\"value\", this.value);\n\t\t}\n\n\t\tif (this.showTooltip) {\n\t\t\tthis._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.VISIBLE;\n\t\t}\n\t}\n\n\t_onfocusout(event) {\n\t\t// Prevent focusout when the focus is getting set within the slider internal\n\t\t// element (on the handle), before the Slider' customElement itself is finished focusing\n\t\tif (this._isFocusing()) {\n\t\t\tthis._preventFocusOut();\n\t\t\treturn;\n\t\t}\n\n\t\t// Reset focus state and the stored Slider's initial\n\t\t// value that was saved when it was first focused in\n\t\tthis._setInitialValue(\"value\", null);\n\n\t\tif (this.showTooltip) {\n\t\t\tthis._tooltipVisibility = SliderBase.TOOLTIP_VISIBILITY.HIDDEN;\n\t\t}\n\t}\n\n\t/**\n\t * Called when the user moves the slider\n\t *\n\t * @private\n\t */\n\t_handleMove(event) {\n\t\tevent.preventDefault();\n\n\t\t// If step is 0 no interaction is available because there is no constant\n\t\t// (equal for all user environments) quantitative representation of the value\n\t\tif (this.disabled || this._effectiveStep === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this.constructor.getValueFromInteraction(event, this._effectiveStep, this._effectiveMin, this._effectiveMax, this.getBoundingClientRect(), this.directionStart);\n\n\t\tthis._updateHandleAndProgress(newValue);\n\t\tthis.updateValue(\"value\", newValue);\n\t}\n\n\t/** Called when the user finish interacting with the slider\n\t *\n\t * @private\n\t */\n\t_handleUp(event) {\n\t\tif (this._valueOnInteractionStart !== this.value) {\n\t\t\tthis.fireEvent(\"change\");\n\t\t}\n\n\t\tthis.handleUpBase();\n\t\tthis._valueOnInteractionStart = null;\n\t}\n\n\t/** Determines if the press is over the handle\n\t *\n\t * @private\n\t */\n\t_isHandlePressed(clientX) {\n\t\tconst sliderHandleDomRect = this._sliderHandle.getBoundingClientRect();\n\t\treturn clientX >= sliderHandleDomRect.left && clientX <= sliderHandleDomRect.right;\n\t}\n\n\t/** Updates the UI representation of the progress bar and handle position\n\t *\n\t * @private\n\t */\n\t_updateHandleAndProgress(newValue) {\n\t\tconst max = this._effectiveMax;\n\t\tconst min = this._effectiveMin;\n\n\t\t// The progress (completed) percentage of the slider.\n\t\tthis._progressPercentage = (newValue - min) / (max - min);\n\t\t// How many pixels from the left end of the slider will be the placed the affected  by the user action handle\n\t\tthis._handlePositionFromStart = this._progressPercentage * 100;\n\t}\n\n\t_handleActionKeyPress(event) {\n\t\tconst min = this._effectiveMin;\n\t\tconst max = this._effectiveMax;\n\t\tconst currentValue = this.value;\n\t\tconst newValue = isEscape(event) ? this._getInitialValue(\"value\") : this.constructor.clipValue(this._handleActionKeyPressBase(event, \"value\") + currentValue, min, max);\n\n\t\tif (newValue !== currentValue) {\n\t\t\tthis._updateHandleAndProgress(newValue);\n\t\t\tthis.updateValue(\"value\", newValue);\n\t\t}\n\t}\n\n\tget styles() {\n\t\treturn {\n\t\t\tprogress: {\n\t\t\t\t\"transform\": `scaleX(${this._progressPercentage})`,\n\t\t\t\t\"transform-origin\": `${this.directionStart} top`,\n\t\t\t},\n\t\t\thandle: {\n\t\t\t\t[this.directionStart]: `${this._handlePositionFromStart}%`,\n\t\t\t},\n\t\t\ttickmarks: {\n\t\t\t\t\"background\": `${this._tickmarks}`,\n\t\t\t},\n\t\t\tlabel: {\n\t\t\t\t\"width\": `${this._labelWidth}%`,\n\t\t\t},\n\t\t\tlabelContainer: {\n\t\t\t\t\"width\": `100%`,\n\t\t\t\t[this.directionStart]: `-${this._labelWidth / 2}%`,\n\t\t\t},\n\t\t\ttooltip: {\n\t\t\t\t\"visibility\": `${this._tooltipVisibility}`,\n\t\t\t},\n\t\t};\n\t}\n\n\tget _sliderHandle() {\n\t\treturn this.shadowRoot.querySelector(\".ui5-slider-handle\");\n\t}\n\n\tget labelItems() {\n\t\treturn this._labelItems;\n\t}\n\n\tget tooltipValue() {\n\t\tconst stepPrecision = this.constructor._getDecimalPrecisionOfNumber(this._effectiveStep);\n\t\treturn this.value.toFixed(stepPrecision);\n\t}\n\n\tget _ariaDisabled() {\n\t\treturn this.disabled || undefined;\n\t}\n\n\tget _ariaLabelledByText() {\n\t\treturn Slider.i18nBundle.getText(SLIDER_ARIA_DESCRIPTION);\n\t}\n\n\tstatic async onDefine() {\n\t\tSlider.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n}\n\nSlider.define();\n\nexport default Slider;\n"]},"metadata":{},"sourceType":"module"}