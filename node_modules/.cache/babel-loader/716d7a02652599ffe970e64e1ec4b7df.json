{"ast":null,"code":"import _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\n\nvar CalendarDate = /*#__PURE__*/function () {\n  function CalendarDate() {\n    _classCallCheck(this, CalendarDate);\n\n    var aArgs = arguments,\n        // eslint-disable-line\n    oJSDate,\n        oNow,\n        sCalendarType;\n\n    switch (aArgs.length) {\n      case 0:\n        // defaults to the current date\n        oNow = new Date();\n        return this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n\n      case 1: // CalendarDate\n\n      case 2:\n        // CalendarDate, sCalendarType\n        if (!(aArgs[0] instanceof CalendarDate)) {\n          throw new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n        }\n\n        sCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType; // Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n        // source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\n        oJSDate = new Date(aArgs[0].valueOf()); // Make this date really local. Now getters are safe.\n\n        oJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n        oJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n\n      case 3: // year, month, date\n\n      case 4:\n        // year, month, date, sCalendarType\n        checkNumericLike(aArgs[0], \"Invalid year: \".concat(aArgs[0]));\n        checkNumericLike(aArgs[1], \"Invalid month: \".concat(aArgs[1]));\n        checkNumericLike(aArgs[2], \"Invalid date: \".concat(aArgs[2]));\n        oJSDate = new Date(0, 0, 1);\n        oJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n        if (aArgs[3]) {\n          sCalendarType = aArgs[3];\n        }\n\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n\n      default:\n        throw new Error(\"\".concat(\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\" + \"or 2) year, month, date, (optional) calendarType\").concat(aArgs));\n    }\n  }\n\n  _createClass(CalendarDate, [{\n    key: \"getYear\",\n    value: function getYear() {\n      return this._oUDate.getUTCFullYear();\n    }\n  }, {\n    key: \"setYear\",\n    value: function setYear(year) {\n      checkNumericLike(year, \"Invalid year: \".concat(year));\n\n      this._oUDate.setUTCFullYear(year);\n\n      return this;\n    }\n  }, {\n    key: \"getMonth\",\n    value: function getMonth() {\n      return this._oUDate.getUTCMonth();\n    }\n    /**\n     * Sets the given month as ordinal month of the year.\n     * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n     * equivalent month names for the given calendar).\n     * If the specified value is is outside of the expected range, this method attempts to update the date information\n     * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n     * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n     * 0 will result in the previous month's last day.\n     * -1 will result in the day before the previous month's last day.\n     * 32 will result in:\n     * - first day of the next month if the current month has 31 days.\n     * - second day of the next month if the current month has 30 days.\n     * Other value will result in adding or subtracting days according to the given value.\n     * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n     */\n\n  }, {\n    key: \"setMonth\",\n    value: function setMonth(month, date) {\n      checkNumericLike(month, \"Invalid month: \".concat(month));\n\n      if (date || date === 0) {\n        checkNumericLike(date, \"Invalid date: \".concat(date));\n\n        this._oUDate.setUTCMonth(month, date);\n      } else {\n        this._oUDate.setUTCMonth(month);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"getDate\",\n    value: function getDate() {\n      return this._oUDate.getUTCDate();\n    }\n  }, {\n    key: \"setDate\",\n    value: function setDate(date) {\n      checkNumericLike(date, \"Invalid date: \".concat(date));\n\n      this._oUDate.setUTCDate(date);\n\n      return this;\n    }\n  }, {\n    key: \"getDay\",\n    value: function getDay() {\n      return this._oUDate.getUTCDay();\n    }\n  }, {\n    key: \"getCalendarType\",\n    value: function getCalendarType() {\n      return this._oUDate.sCalendarType;\n    }\n  }, {\n    key: \"isBefore\",\n    value: function isBefore(oCalendarDate) {\n      checkCalendarDate(oCalendarDate);\n      return this.valueOf() < oCalendarDate.valueOf();\n    }\n  }, {\n    key: \"isAfter\",\n    value: function isAfter(oCalendarDate) {\n      checkCalendarDate(oCalendarDate);\n      return this.valueOf() > oCalendarDate.valueOf();\n    }\n  }, {\n    key: \"isSameOrBefore\",\n    value: function isSameOrBefore(oCalendarDate) {\n      checkCalendarDate(oCalendarDate);\n      return this.valueOf() <= oCalendarDate.valueOf();\n    }\n  }, {\n    key: \"isSameOrAfter\",\n    value: function isSameOrAfter(oCalendarDate) {\n      checkCalendarDate(oCalendarDate);\n      return this.valueOf() >= oCalendarDate.valueOf();\n    }\n  }, {\n    key: \"isSame\",\n    value: function isSame(oCalendarDate) {\n      checkCalendarDate(oCalendarDate);\n      return this.valueOf() === oCalendarDate.valueOf();\n    }\n  }, {\n    key: \"toLocalJSDate\",\n    value: function toLocalJSDate() {\n      // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n      // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n      var oLocalDate = new Date(this._oUDate.getTime()); // Make this date really local. Now getters are safe.\n\n      oLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n      oLocalDate.setHours(0, 0, 0, 0);\n      return oLocalDate;\n    }\n  }, {\n    key: \"toUTCJSDate\",\n    value: function toUTCJSDate() {\n      // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n      // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n      var oUTCDate = new Date(this._oUDate.getTime());\n      oUTCDate.setUTCHours(0, 0, 0, 0);\n      return oUTCDate;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\".concat(this._oUDate.sCalendarType, \": \").concat(this.getYear(), \"/\").concat(this.getMonth() + 1, \"/\").concat(this.getDate());\n    }\n  }, {\n    key: \"valueOf\",\n    value: function valueOf() {\n      return this._oUDate.getTime();\n    }\n  }], [{\n    key: \"fromLocalJSDate\",\n    value: function fromLocalJSDate(oJSDate, sCalendarType) {\n      // Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n      // because Date object in the test is different than the Date object in the application (due to the iframe).\n      // We can use jQuery.type or this method:\n      function isValidDate(date) {\n        return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n      }\n\n      if (!isValidDate(oJSDate)) {\n        throw new Error(\"Date parameter must be a JavaScript Date object: [\".concat(oJSDate, \"].\"));\n      }\n\n      return new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n    }\n  }, {\n    key: \"fromTimestamp\",\n    value: function fromTimestamp(iTimestamp, sCalendarType) {\n      var oCalDate = new CalendarDate(0, 0, 1);\n      oCalDate._oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n      return oCalDate;\n    }\n  }]);\n\n  return CalendarDate;\n}();\n\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n  if (sCalendarType) {\n    return UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n  }\n\n  return new UniversalDate(createUTCDate(oDate).getTime());\n}\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\n\n\nfunction createUTCDate(oDate) {\n  var oUTCDate = new Date(Date.UTC(0, 0, 1));\n  oUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n  return oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate) {\n  if (!(oCalendarDate instanceof CalendarDate)) {\n    throw new Error(\"Invalid calendar date: [\".concat(oCalendarDate, \"]. Expected: sap.ui.unified.calendar.CalendarDate\"));\n  }\n}\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\n\n\nfunction checkNumericLike(value, message) {\n  if (value === undefined || value === Infinity || isNaN(value)) {\n    // eslint-disable-line\n    throw message;\n  }\n}\n\nexport default CalendarDate;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-localization/dist/dates/CalendarDate.js"],"names":["UniversalDate","CalendarDate","aArgs","arguments","oJSDate","oNow","sCalendarType","length","Date","constructor","getFullYear","getMonth","getDate","Error","_oUDate","valueOf","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","createUniversalUTCDate","checkNumericLike","year","setUTCFullYear","month","date","setUTCMonth","setUTCDate","getUTCDay","oCalendarDate","checkCalendarDate","oLocalDate","getTime","oUTCDate","setUTCHours","getYear","isValidDate","Object","prototype","toString","call","isNaN","iTimestamp","oCalDate","getInstance","oDate","createUTCDate","UTC","value","message","undefined","Infinity"],"mappings":"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","sourcesContent":["import UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\n\nclass CalendarDate {\n\tconstructor() {\n\t\tlet aArgs = arguments, // eslint-disable-line\n\t\t\toJSDate,\n\t\t\toNow,\n\t\t\tsCalendarType;\n\n\t\tswitch (aArgs.length) {\n\t\tcase 0: // defaults to the current date\n\t\t\toNow = new Date();\n\t\t\treturn this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n\n\t\tcase 1: // CalendarDate\n\t\tcase 2: // CalendarDate, sCalendarType\n\t\t\tif (!(aArgs[0] instanceof CalendarDate)) {\n\t\t\t\tthrow new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n\t\t\t}\n\t\t\tsCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;\n\t\t\t// Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n\t\t\t// source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\t\t\toJSDate = new Date(aArgs[0].valueOf());\n\n\t\t\t// Make this date really local. Now getters are safe.\n\t\t\toJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n\t\t\toJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tcase 3: // year, month, date\n\t\tcase 4: // year, month, date, sCalendarType\n\t\t\tcheckNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n\t\t\tcheckNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n\t\t\tcheckNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n\n\t\t\toJSDate = new Date(0, 0, 1);\n\t\t\toJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n\t\t\tif (aArgs[3]) {\n\t\t\t\tsCalendarType = aArgs[3];\n\t\t\t}\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\"\n\t\t\t\t+ \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n\t\t}\n\t}\n\n\tgetYear() {\n\t\treturn this._oUDate.getUTCFullYear();\n\t}\n\n\tsetYear(year) {\n\t\tcheckNumericLike(year, `Invalid year: ${year}`);\n\t\tthis._oUDate.setUTCFullYear(year);\n\t\treturn this;\n\t}\n\n\tgetMonth() {\n\t\treturn this._oUDate.getUTCMonth();\n\t}\n\n\t/**\n\t * Sets the given month as ordinal month of the year.\n\t * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n\t * equivalent month names for the given calendar).\n\t * If the specified value is is outside of the expected range, this method attempts to update the date information\n\t * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n\t * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n\t * 0 will result in the previous month's last day.\n\t * -1 will result in the day before the previous month's last day.\n\t * 32 will result in:\n\t * - first day of the next month if the current month has 31 days.\n\t * - second day of the next month if the current month has 30 days.\n\t * Other value will result in adding or subtracting days according to the given value.\n\t * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n\t */\n\tsetMonth(month, date) {\n\t\tcheckNumericLike(month, `Invalid month: ${month}`);\n\t\tif (date || date === 0) {\n\t\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\t\tthis._oUDate.setUTCMonth(month, date);\n\t\t} else {\n\t\t\tthis._oUDate.setUTCMonth(month);\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetDate() {\n\t\treturn this._oUDate.getUTCDate();\n\t}\n\n\tsetDate(date) {\n\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\tthis._oUDate.setUTCDate(date);\n\t\treturn this;\n\t}\n\n\tgetDay() {\n\t\treturn this._oUDate.getUTCDay();\n\t}\n\n\tgetCalendarType() {\n\t\treturn this._oUDate.sCalendarType;\n\t}\n\n\tisBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() < oCalendarDate.valueOf();\n\t}\n\n\tisAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() > oCalendarDate.valueOf();\n\t}\n\n\tisSameOrBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() <= oCalendarDate.valueOf();\n\t}\n\n\tisSameOrAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() >= oCalendarDate.valueOf();\n\t}\n\n\tisSame(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() === oCalendarDate.valueOf();\n\t}\n\n\ttoLocalJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oLocalDate = new Date(this._oUDate.getTime());\n\n\t\t// Make this date really local. Now getters are safe.\n\t\toLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n\t\toLocalDate.setHours(0, 0, 0, 0);\n\n\t\treturn oLocalDate;\n\t}\n\n\ttoUTCJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oUTCDate = new Date(this._oUDate.getTime());\n\t\toUTCDate.setUTCHours(0, 0, 0, 0);\n\n\t\treturn oUTCDate;\n\t}\n\n\ttoString() {\n\t\treturn `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n\t}\n\n\tvalueOf() {\n\t\treturn this._oUDate.getTime();\n\t}\n\n\tstatic fromLocalJSDate(oJSDate, sCalendarType) {\n\t\t// Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n\t\t// because Date object in the test is different than the Date object in the application (due to the iframe).\n\t\t// We can use jQuery.type or this method:\n\t\tfunction isValidDate(date) {\n\t\t\treturn date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n\t\t}\n\t\tif (!isValidDate(oJSDate)) {\n\t\t\tthrow new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n\t\t}\n\t\treturn new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n\t}\n\n\tstatic fromTimestamp(iTimestamp, sCalendarType) {\n\t\tconst oCalDate = new CalendarDate(0, 0, 1);\n\t\toCalDate._oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n\t\treturn oCalDate;\n\t}\n}\n\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n\tif (sCalendarType) {\n\t\treturn UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n\t}\n\treturn new UniversalDate(createUTCDate(oDate).getTime());\n}\n\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate) {\n\tconst oUTCDate = new Date(Date.UTC(0, 0, 1));\n\n\toUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n\n\treturn oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate) {\n\tif (!(oCalendarDate instanceof CalendarDate)) {\n\t\tthrow new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);\n\t}\n}\n\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value, message) {\n\tif (value === undefined || value === Infinity || isNaN(value)) { // eslint-disable-line\n\t\tthrow message;\n\t}\n}\n\nexport default CalendarDate;\n"]},"metadata":{},"sourceType":"module"}