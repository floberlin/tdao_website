{"ast":null,"code":"/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*namespace com.google.zxing.qrcode.decoder {*/\n\n\nimport ChecksumException from '../../ChecksumException';\nimport BitMatrix from '../../common/BitMatrix';\nimport GenericGF from '../../common/reedsolomon/GenericGF';\nimport ReedSolomonDecoder from '../../common/reedsolomon/ReedSolomonDecoder';\nimport BitMatrixParser from './BitMatrixParser';\nimport DataBlock from './DataBlock';\nimport DecodedBitStreamParser from './DecodedBitStreamParser';\nimport QRCodeDecoderMetaData from './QRCodeDecoderMetaData';\n/*import java.util.Map;*/\n\n/**\n * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\n * the QR Code from an image.</p>\n *\n * @author Sean Owen\n */\n\nvar Decoder = function () {\n  function Decoder() {\n    this.rsDecoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n  } // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(image, null)\n  // }\n\n  /**\n   * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\n   * \"true\" is taken to mean a black module.</p>\n   *\n   * @param image booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decodeBooleanArray = function (image, hints) {\n    return this.decodeBitMatrix(BitMatrix.parseFromBooleanArray(image), hints);\n  }; // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\n  //   return decode(bits, null)\n  // }\n\n  /**\n   * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n   *\n   * @param bits booleans representing white/black QR Code modules\n   * @param hints decoding hints that should be used to influence decoding\n   * @return text and bytes encoded within the QR Code\n   * @throws FormatException if the QR Code cannot be decoded\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.decodeBitMatrix = function (bits, hints) {\n    // Construct a parser and read version, error-correction level\n    var parser = new BitMatrixParser(bits);\n    var ex = null;\n\n    try {\n      return this.decodeBitMatrixParser(parser, hints);\n    } catch (e\n    /*: FormatException, ChecksumException*/\n    ) {\n      ex = e;\n    }\n\n    try {\n      // Revert the bit matrix\n      parser.remask(); // Will be attempting a mirrored reading of the version and format info.\n\n      parser.setMirror(true); // Preemptively read the version.\n\n      parser.readVersion(); // Preemptively read the format information.\n\n      parser.readFormatInformation();\n      /*\n       * Since we're here, this means we have successfully detected some kind\n       * of version and format information when mirrored. This is a good sign,\n       * that the QR code may be mirrored, and we should try once more with a\n       * mirrored content.\n       */\n      // Prepare for a mirrored reading.\n\n      parser.mirror();\n      var result = this.decodeBitMatrixParser(parser, hints); // Success! Notify the caller that the code was mirrored.\n\n      result.setOther(new QRCodeDecoderMetaData(true));\n      return result;\n    } catch (e\n    /*FormatException | ChecksumException*/\n    ) {\n      // Throw the exception from the original reading\n      if (ex !== null) {\n        throw ex;\n      }\n\n      throw e;\n    }\n  };\n\n  Decoder.prototype.decodeBitMatrixParser = function (parser, hints) {\n    var e_1, _a, e_2, _b;\n\n    var version = parser.readVersion();\n    var ecLevel = parser.readFormatInformation().getErrorCorrectionLevel(); // Read codewords\n\n    var codewords = parser.readCodewords(); // Separate into data blocks\n\n    var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel); // Count total number of data bytes\n\n    var totalBytes = 0;\n\n    try {\n      for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n        var dataBlock = dataBlocks_1_1.value;\n        totalBytes += dataBlock.getNumDataCodewords();\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    var resultBytes = new Uint8Array(totalBytes);\n    var resultOffset = 0;\n\n    try {\n      // Error-correct and copy data blocks together into a stream of bytes\n      for (var dataBlocks_2 = __values(dataBlocks), dataBlocks_2_1 = dataBlocks_2.next(); !dataBlocks_2_1.done; dataBlocks_2_1 = dataBlocks_2.next()) {\n        var dataBlock = dataBlocks_2_1.value;\n        var codewordBytes = dataBlock.getCodewords();\n        var numDataCodewords = dataBlock.getNumDataCodewords();\n        this.correctErrors(codewordBytes, numDataCodewords);\n\n        for (var i = 0; i < numDataCodewords; i++) {\n          resultBytes[resultOffset++] = codewordBytes[i];\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (dataBlocks_2_1 && !dataBlocks_2_1.done && (_b = dataBlocks_2.return)) _b.call(dataBlocks_2);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    } // Decode the contents of that stream of bytes\n\n\n    return DecodedBitStreamParser.decode(resultBytes, version, ecLevel, hints);\n  };\n  /**\n   * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n   * correct the errors in-place using Reed-Solomon error correction.</p>\n   *\n   * @param codewordBytes data and error correction codewords\n   * @param numDataCodewords number of codewords that are data bytes\n   * @throws ChecksumException if error correction fails\n   */\n\n\n  Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords\n  /*int*/\n  ) {\n    // const numCodewords = codewordBytes.length;\n    // First read into an array of ints\n    var codewordsInts = new Int32Array(codewordBytes); // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\n    // const codewordsInts = new Int32Array(numCodewords)\n    // for (let i = 0; i < numCodewords; i++) {\n    //   codewordsInts[i] = codewordBytes[i] & 0xFF\n    // }\n\n    try {\n      this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n    } catch (ignored\n    /*: ReedSolomonException*/\n    ) {\n      throw new ChecksumException();\n    } // Copy back into array of bytes -- only need to worry about the bytes that were data\n    // We don't care about errors in the error-correction codewords\n\n\n    for (var i = 0; i < numDataCodewords; i++) {\n      codewordBytes[i] =\n      /*(byte) */\n      codewordsInts[i];\n    }\n  };\n\n  return Decoder;\n}();\n\nexport default Decoder;","map":{"version":3,"sources":["../../../../../src/core/qrcode/decoder/Decoder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n/*namespace com.google.zxing.qrcode.decoder {*/\nimport ChecksumException from '../../ChecksumException';\nimport BitMatrix from '../../common/BitMatrix';\nimport GenericGF from '../../common/reedsolomon/GenericGF';\nimport ReedSolomonDecoder from '../../common/reedsolomon/ReedSolomonDecoder';\nimport BitMatrixParser from './BitMatrixParser';\nimport DataBlock from './DataBlock';\nimport DecodedBitStreamParser from './DecodedBitStreamParser';\nimport QRCodeDecoderMetaData from './QRCodeDecoderMetaData';\n/*import java.util.Map;*/\n/**\n * <p>The main class which implements QR Code decoding -- as opposed to locating and extracting\n * the QR Code from an image.</p>\n *\n * @author Sean Owen\n */\nvar Decoder = /** @class */ (function () {\n    function Decoder() {\n        this.rsDecoder = new ReedSolomonDecoder(GenericGF.QR_CODE_FIELD_256);\n    }\n    // public decode(image: boolean[][]): DecoderResult /*throws ChecksumException, FormatException*/ {\n    //   return decode(image, null)\n    // }\n    /**\n     * <p>Convenience method that can decode a QR Code represented as a 2D array of booleans.\n     * \"true\" is taken to mean a black module.</p>\n     *\n     * @param image booleans representing white/black QR Code modules\n     * @param hints decoding hints that should be used to influence decoding\n     * @return text and bytes encoded within the QR Code\n     * @throws FormatException if the QR Code cannot be decoded\n     * @throws ChecksumException if error correction fails\n     */\n    Decoder.prototype.decodeBooleanArray = function (image, hints) {\n        return this.decodeBitMatrix(BitMatrix.parseFromBooleanArray(image), hints);\n    };\n    // public decodeBitMatrix(bits: BitMatrix): DecoderResult /*throws ChecksumException, FormatException*/ {\n    //   return decode(bits, null)\n    // }\n    /**\n     * <p>Decodes a QR Code represented as a {@link BitMatrix}. A 1 or \"true\" is taken to mean a black module.</p>\n     *\n     * @param bits booleans representing white/black QR Code modules\n     * @param hints decoding hints that should be used to influence decoding\n     * @return text and bytes encoded within the QR Code\n     * @throws FormatException if the QR Code cannot be decoded\n     * @throws ChecksumException if error correction fails\n     */\n    Decoder.prototype.decodeBitMatrix = function (bits, hints) {\n        // Construct a parser and read version, error-correction level\n        var parser = new BitMatrixParser(bits);\n        var ex = null;\n        try {\n            return this.decodeBitMatrixParser(parser, hints);\n        }\n        catch (e /*: FormatException, ChecksumException*/) {\n            ex = e;\n        }\n        try {\n            // Revert the bit matrix\n            parser.remask();\n            // Will be attempting a mirrored reading of the version and format info.\n            parser.setMirror(true);\n            // Preemptively read the version.\n            parser.readVersion();\n            // Preemptively read the format information.\n            parser.readFormatInformation();\n            /*\n             * Since we're here, this means we have successfully detected some kind\n             * of version and format information when mirrored. This is a good sign,\n             * that the QR code may be mirrored, and we should try once more with a\n             * mirrored content.\n             */\n            // Prepare for a mirrored reading.\n            parser.mirror();\n            var result = this.decodeBitMatrixParser(parser, hints);\n            // Success! Notify the caller that the code was mirrored.\n            result.setOther(new QRCodeDecoderMetaData(true));\n            return result;\n        }\n        catch (e /*FormatException | ChecksumException*/) {\n            // Throw the exception from the original reading\n            if (ex !== null) {\n                throw ex;\n            }\n            throw e;\n        }\n    };\n    Decoder.prototype.decodeBitMatrixParser = function (parser, hints) {\n        var e_1, _a, e_2, _b;\n        var version = parser.readVersion();\n        var ecLevel = parser.readFormatInformation().getErrorCorrectionLevel();\n        // Read codewords\n        var codewords = parser.readCodewords();\n        // Separate into data blocks\n        var dataBlocks = DataBlock.getDataBlocks(codewords, version, ecLevel);\n        // Count total number of data bytes\n        var totalBytes = 0;\n        try {\n            for (var dataBlocks_1 = __values(dataBlocks), dataBlocks_1_1 = dataBlocks_1.next(); !dataBlocks_1_1.done; dataBlocks_1_1 = dataBlocks_1.next()) {\n                var dataBlock = dataBlocks_1_1.value;\n                totalBytes += dataBlock.getNumDataCodewords();\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (dataBlocks_1_1 && !dataBlocks_1_1.done && (_a = dataBlocks_1.return)) _a.call(dataBlocks_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        var resultBytes = new Uint8Array(totalBytes);\n        var resultOffset = 0;\n        try {\n            // Error-correct and copy data blocks together into a stream of bytes\n            for (var dataBlocks_2 = __values(dataBlocks), dataBlocks_2_1 = dataBlocks_2.next(); !dataBlocks_2_1.done; dataBlocks_2_1 = dataBlocks_2.next()) {\n                var dataBlock = dataBlocks_2_1.value;\n                var codewordBytes = dataBlock.getCodewords();\n                var numDataCodewords = dataBlock.getNumDataCodewords();\n                this.correctErrors(codewordBytes, numDataCodewords);\n                for (var i = 0; i < numDataCodewords; i++) {\n                    resultBytes[resultOffset++] = codewordBytes[i];\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (dataBlocks_2_1 && !dataBlocks_2_1.done && (_b = dataBlocks_2.return)) _b.call(dataBlocks_2);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        // Decode the contents of that stream of bytes\n        return DecodedBitStreamParser.decode(resultBytes, version, ecLevel, hints);\n    };\n    /**\n     * <p>Given data and error-correction codewords received, possibly corrupted by errors, attempts to\n     * correct the errors in-place using Reed-Solomon error correction.</p>\n     *\n     * @param codewordBytes data and error correction codewords\n     * @param numDataCodewords number of codewords that are data bytes\n     * @throws ChecksumException if error correction fails\n     */\n    Decoder.prototype.correctErrors = function (codewordBytes, numDataCodewords /*int*/) {\n        // const numCodewords = codewordBytes.length;\n        // First read into an array of ints\n        var codewordsInts = new Int32Array(codewordBytes);\n        // TYPESCRIPTPORT: not realy necessary to transform to ints? could redesign everything to work with unsigned bytes?\n        // const codewordsInts = new Int32Array(numCodewords)\n        // for (let i = 0; i < numCodewords; i++) {\n        //   codewordsInts[i] = codewordBytes[i] & 0xFF\n        // }\n        try {\n            this.rsDecoder.decode(codewordsInts, codewordBytes.length - numDataCodewords);\n        }\n        catch (ignored /*: ReedSolomonException*/) {\n            throw new ChecksumException();\n        }\n        // Copy back into array of bytes -- only need to worry about the bytes that were data\n        // We don't care about errors in the error-correction codewords\n        for (var i = 0; i < numDataCodewords; i++) {\n            codewordBytes[i] = /*(byte) */ codewordsInts[i];\n        }\n    };\n    return Decoder;\n}());\nexport default Decoder;\n//# sourceMappingURL=Decoder.js.map"]},"metadata":{},"sourceType":"module"}