{"ast":null,"code":"/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport Token from './Token';\nimport Integer from '../../util/Integer';\n\nvar SimpleToken = function (_super) {\n  __extends(SimpleToken, _super);\n\n  function SimpleToken(previous, value, bitCount) {\n    var _this = _super.call(this, previous) || this;\n\n    _this.value = value;\n    _this.bitCount = bitCount;\n    return _this;\n  }\n  /**\n   * @Override\n   */\n\n\n  SimpleToken.prototype.appendTo = function (bitArray, text) {\n    bitArray.appendBits(this.value, this.bitCount);\n  };\n\n  SimpleToken.prototype.add = function (value, bitCount) {\n    return new SimpleToken(this, value, bitCount);\n  };\n\n  SimpleToken.prototype.addBinaryShift = function (start, byteCount) {\n    // no-op can't binary shift a simple token\n    console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');\n    return new SimpleToken(this, start, byteCount);\n  };\n  /**\n   * @Override\n   */\n\n\n  SimpleToken.prototype.toString = function () {\n    var value = this.value & (1 << this.bitCount) - 1;\n    value |= 1 << this.bitCount;\n    return '<' + Integer.toBinaryString(value | 1 << this.bitCount).substring(1) + '>';\n  };\n\n  return SimpleToken;\n}(Token);\n\nexport default SimpleToken;","map":{"version":3,"sources":["../../../../../src/core/aztec/encoder/SimpleToken.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcE;;;;;;;;;;;;;;;;;;;;;;;;;AAOF,OAAO,KAAP,MAAkB,SAAlB;AACA,OAAO,OAAP,MAAoB,oBAApB;;AAIA,IAAA,WAAA,GAAA,UAAA,MAAA,EAAA;AAAmD,EAAA,SAAA,CAAA,WAAA,EAAA,MAAA,CAAA;;AAMjD,WAAA,WAAA,CAAY,QAAZ,EAA6B,KAA7B,EAAyC,QAAzC,EAAsD;AAAtD,QAAA,KAAA,GACE,MAAA,CAAA,IAAA,CAAA,IAAA,EAAM,QAAN,KAAe,IADjB;;AAEE,IAAA,KAAI,CAAC,KAAL,GAAoB,KAApB;AACA,IAAA,KAAI,CAAC,QAAL,GAAuB,QAAvB;;AACD;AAED;;AAEG;;;AACH,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAA,UAAS,QAAT,EAA6B,IAA7B,EAAuD;AACrD,IAAA,QAAQ,CAAC,UAAT,CAAoB,KAAK,KAAzB,EAAgC,KAAK,QAArC;AACD,GAFD;;AAIiB,EAAA,WAAA,CAAA,SAAA,CAAA,GAAA,GAAjB,UAAqB,KAArB,EAAiC,QAAjC,EAA8C;AAC5C,WAAO,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,QAA7B,CAAP;AACD,GAFgB;;AAIA,EAAA,WAAA,CAAA,SAAA,CAAA,cAAA,GAAjB,UAAgC,KAAhC,EAA4C,SAA5C,EAA0D;AACxD;AACA,IAAA,OAAO,CAAC,IAAR,CAAa,yEAAb;AACA,WAAO,IAAI,WAAJ,CAAgB,IAAhB,EAAsB,KAAtB,EAA6B,SAA7B,CAAP;AACD,GAJgB;AAMjB;;AAEG;;;AACI,EAAA,WAAA,CAAA,SAAA,CAAA,QAAA,GAAP,YAAA;AACE,QAAI,KAAK,GAAQ,KAAK,KAAL,GAAc,CAAC,KAAK,KAAK,QAAX,IAAuB,CAAtD;AACA,IAAA,KAAK,IAAI,KAAK,KAAK,QAAnB;AACA,WAAO,MAAM,OAAO,CAAC,cAAR,CAAuB,KAAK,GAAI,KAAK,KAAK,QAA1C,EAAqD,SAArD,CAA+D,CAA/D,CAAN,GAA0E,GAAjF;AACD,GAJM;;AAMT,SAAA,WAAA;AAAC,CAtCD,CAAmD,KAAnD,CAAA","sourceRoot":"","sourcesContent":["/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport Token from './Token';\nimport Integer from '../../util/Integer';\nvar SimpleToken = /** @class */ (function (_super) {\n    __extends(SimpleToken, _super);\n    function SimpleToken(previous, value, bitCount) {\n        var _this = _super.call(this, previous) || this;\n        _this.value = value;\n        _this.bitCount = bitCount;\n        return _this;\n    }\n    /**\n     * @Override\n     */\n    SimpleToken.prototype.appendTo = function (bitArray, text) {\n        bitArray.appendBits(this.value, this.bitCount);\n    };\n    SimpleToken.prototype.add = function (value, bitCount) {\n        return new SimpleToken(this, value, bitCount);\n    };\n    SimpleToken.prototype.addBinaryShift = function (start, byteCount) {\n        // no-op can't binary shift a simple token\n        console.warn('addBinaryShift on SimpleToken, this simply returns a copy of this token');\n        return new SimpleToken(this, start, byteCount);\n    };\n    /**\n     * @Override\n     */\n    SimpleToken.prototype.toString = function () {\n        var value = this.value & ((1 << this.bitCount) - 1);\n        value |= 1 << this.bitCount;\n        return '<' + Integer.toBinaryString(value | (1 << this.bitCount)).substring(1) + '>';\n    };\n    return SimpleToken;\n}(Token));\nexport default SimpleToken;\n//# sourceMappingURL=SimpleToken.js.map"]},"metadata":{},"sourceType":"module"}