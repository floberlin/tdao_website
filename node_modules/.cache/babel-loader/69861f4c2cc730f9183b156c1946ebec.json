{"ast":null,"code":"/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n\nimport UPCEANReader from './UPCEANReader';\nimport StringBuilder from '../util/StringBuilder';\nimport NotFoundException from '../NotFoundException';\nimport BarcodeFormat from '../BarcodeFormat'; // package com.google.zxing.oned;\n// import com.google.zxing.BarcodeFormat;\n// import com.google.zxing.FormatException;\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.common.BitArray;\n\n/**\n * <p>Implements decoding of the UPC-E format.</p>\n * <p><a href=\"http://www.barcodeisland.com/upce.phtml\">This</a> is a great reference for\n * UPC-E information.</p>\n *\n * @author Sean Owen\n *\n * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCEReader.java\n *\n * @experimental\n */\n\nvar UPCEReader = function (_super) {\n  __extends(UPCEReader, _super);\n\n  function UPCEReader() {\n    var _this = _super.call(this) || this;\n\n    _this.decodeMiddleCounters = new Int32Array(4);\n    return _this;\n  }\n  /**\n   * @throws NotFoundException\n   */\n  // @Override\n\n\n  UPCEReader.prototype.decodeMiddle = function (row, startRange, result) {\n    var e_1, _a;\n\n    var counters = this.decodeMiddleCounters.map(function (x) {\n      return x;\n    });\n    counters[0] = 0;\n    counters[1] = 0;\n    counters[2] = 0;\n    counters[3] = 0;\n    var end = row.getSize();\n    var rowOffset = startRange[1];\n    var lgPatternFound = 0;\n\n    for (var x = 0; x < 6 && rowOffset < end; x++) {\n      var bestMatch = UPCEReader.decodeDigit(row, counters, rowOffset, UPCEReader.L_AND_G_PATTERNS);\n      result += String.fromCharCode('0'.charCodeAt(0) + bestMatch % 10);\n\n      try {\n        for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n          var counter = counters_1_1.value;\n          rowOffset += counter;\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      if (bestMatch >= 10) {\n        lgPatternFound |= 1 << 5 - x;\n      }\n    }\n\n    UPCEReader.determineNumSysAndCheckDigit(new StringBuilder(result), lgPatternFound);\n    return rowOffset;\n  };\n  /**\n   * @throws NotFoundException\n   */\n  // @Override\n\n\n  UPCEReader.prototype.decodeEnd = function (row, endStart) {\n    return UPCEReader.findGuardPatternWithoutCounters(row, endStart, true, UPCEReader.MIDDLE_END_PATTERN);\n  };\n  /**\n   * @throws FormatException\n   */\n  // @Override\n\n\n  UPCEReader.prototype.checkChecksum = function (s) {\n    return UPCEANReader.checkChecksum(UPCEReader.convertUPCEtoUPCA(s));\n  };\n  /**\n   * @throws NotFoundException\n   */\n\n\n  UPCEReader.determineNumSysAndCheckDigit = function (resultString, lgPatternFound) {\n    for (var numSys = 0; numSys <= 1; numSys++) {\n      for (var d = 0; d < 10; d++) {\n        if (lgPatternFound === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[numSys][d]) {\n          resultString.insert(0, '0' + numSys);\n          resultString.append('0' + d);\n          return;\n        }\n      }\n    }\n\n    throw NotFoundException.getNotFoundInstance();\n  }; // @Override\n\n\n  UPCEReader.prototype.getBarcodeFormat = function () {\n    return BarcodeFormat.UPC_E;\n  };\n  /**\n   * Expands a UPC-E value back into its full, equivalent UPC-A code value.\n   *\n   * @param upce UPC-E code as string of digits\n   * @return equivalent UPC-A code as string of digits\n   */\n\n\n  UPCEReader.convertUPCEtoUPCA = function (upce) {\n    // the following line is equivalent to upce.getChars(1, 7, upceChars, 0);\n    var upceChars = upce.slice(1, 7).split('').map(function (x) {\n      return x.charCodeAt(0);\n    });\n    var result = new StringBuilder();\n    result.append(upce.charAt(0));\n    var lastChar = upceChars[5];\n\n    switch (lastChar) {\n      case 0:\n      case 1:\n      case 2:\n        result.appendChars(upceChars, 0, 2);\n        result.append(lastChar);\n        result.append('0000');\n        result.appendChars(upceChars, 2, 3);\n        break;\n\n      case 3:\n        result.appendChars(upceChars, 0, 3);\n        result.append('00000');\n        result.appendChars(upceChars, 3, 2);\n        break;\n\n      case 4:\n        result.appendChars(upceChars, 0, 4);\n        result.append('00000');\n        result.append(upceChars[4]);\n        break;\n\n      default:\n        result.appendChars(upceChars, 0, 5);\n        result.append('0000');\n        result.append(lastChar);\n        break;\n    } // Only append check digit in conversion if supplied\n\n\n    if (upce.length >= 8) {\n      result.append(upce.charAt(7));\n    }\n\n    return result.toString();\n  };\n  /**\n   * The pattern that marks the middle, and end, of a UPC-E pattern.\n   * There is no \"second half\" to a UPC-E barcode.\n   */\n\n\n  UPCEReader.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]); // For an UPC-E barcode, the final digit is represented by the parities used\n  // to encode the middle six digits, according to the table below.\n  //\n  //                Parity of next 6 digits\n  //    Digit   0     1     2     3     4     5\n  //       0    Even   Even  Even Odd  Odd   Odd\n  //       1    Even   Even  Odd  Even Odd   Odd\n  //       2    Even   Even  Odd  Odd  Even  Odd\n  //       3    Even   Even  Odd  Odd  Odd   Even\n  //       4    Even   Odd   Even Even Odd   Odd\n  //       5    Even   Odd   Odd  Even Even  Odd\n  //       6    Even   Odd   Odd  Odd  Even  Even\n  //       7    Even   Odd   Even Odd  Even  Odd\n  //       8    Even   Odd   Even Odd  Odd   Even\n  //       9    Even   Odd   Odd  Even Odd   Even\n  //\n  // The encoding is represented by the following array, which is a bit pattern\n  // using Odd = 0 and Even = 1. For example, 5 is represented by:\n  //\n  //              Odd Even Even Odd Odd Even\n  // in binary:\n  //                0    1    1   0   0    1   == 0x19\n  //\n\n  /**\n   * See {@link #L_AND_G_PATTERNS}; these values similarly represent patterns of\n   * even-odd parity encodings of digits that imply both the number system (0 or 1)\n   * used, and the check digit.\n   */\n\n  UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [Int32Array.from([0x38, 0x34, 0x32, 0x31, 0x2C, 0x26, 0x23, 0x2A, 0x29, 0x25]), Int32Array.from([0x07, 0x0B, 0x0D, 0x0E, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1])];\n  return UPCEReader;\n}(UPCEANReader);\n\nexport default UPCEReader;","map":{"version":3,"sources":["../../../../src/core/oned/UPCEReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2008 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport UPCEANReader from './UPCEANReader';\nimport StringBuilder from '../util/StringBuilder';\nimport NotFoundException from '../NotFoundException';\nimport BarcodeFormat from '../BarcodeFormat';\n// package com.google.zxing.oned;\n// import com.google.zxing.BarcodeFormat;\n// import com.google.zxing.FormatException;\n// import com.google.zxing.NotFoundException;\n// import com.google.zxing.common.BitArray;\n/**\n * <p>Implements decoding of the UPC-E format.</p>\n * <p><a href=\"http://www.barcodeisland.com/upce.phtml\">This</a> is a great reference for\n * UPC-E information.</p>\n *\n * @author Sean Owen\n *\n * @source https://github.com/zxing/zxing/blob/3c96923276dd5785d58eb970b6ba3f80d36a9505/core/src/main/java/com/google/zxing/oned/UPCEReader.java\n *\n * @experimental\n */\nvar UPCEReader = /** @class */ (function (_super) {\n    __extends(UPCEReader, _super);\n    function UPCEReader() {\n        var _this = _super.call(this) || this;\n        _this.decodeMiddleCounters = new Int32Array(4);\n        return _this;\n    }\n    /**\n     * @throws NotFoundException\n     */\n    // @Override\n    UPCEReader.prototype.decodeMiddle = function (row, startRange, result) {\n        var e_1, _a;\n        var counters = this.decodeMiddleCounters.map(function (x) { return x; });\n        counters[0] = 0;\n        counters[1] = 0;\n        counters[2] = 0;\n        counters[3] = 0;\n        var end = row.getSize();\n        var rowOffset = startRange[1];\n        var lgPatternFound = 0;\n        for (var x = 0; x < 6 && rowOffset < end; x++) {\n            var bestMatch = UPCEReader.decodeDigit(row, counters, rowOffset, UPCEReader.L_AND_G_PATTERNS);\n            result += String.fromCharCode(('0'.charCodeAt(0) + bestMatch % 10));\n            try {\n                for (var counters_1 = (e_1 = void 0, __values(counters)), counters_1_1 = counters_1.next(); !counters_1_1.done; counters_1_1 = counters_1.next()) {\n                    var counter = counters_1_1.value;\n                    rowOffset += counter;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (counters_1_1 && !counters_1_1.done && (_a = counters_1.return)) _a.call(counters_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            if (bestMatch >= 10) {\n                lgPatternFound |= 1 << (5 - x);\n            }\n        }\n        UPCEReader.determineNumSysAndCheckDigit(new StringBuilder(result), lgPatternFound);\n        return rowOffset;\n    };\n    /**\n     * @throws NotFoundException\n     */\n    // @Override\n    UPCEReader.prototype.decodeEnd = function (row, endStart) {\n        return UPCEReader.findGuardPatternWithoutCounters(row, endStart, true, UPCEReader.MIDDLE_END_PATTERN);\n    };\n    /**\n     * @throws FormatException\n     */\n    // @Override\n    UPCEReader.prototype.checkChecksum = function (s) {\n        return UPCEANReader.checkChecksum(UPCEReader.convertUPCEtoUPCA(s));\n    };\n    /**\n     * @throws NotFoundException\n     */\n    UPCEReader.determineNumSysAndCheckDigit = function (resultString, lgPatternFound) {\n        for (var numSys = 0; numSys <= 1; numSys++) {\n            for (var d = 0; d < 10; d++) {\n                if (lgPatternFound === this.NUMSYS_AND_CHECK_DIGIT_PATTERNS[numSys][d]) {\n                    resultString.insert(0, /*(char)*/ ('0' + numSys));\n                    resultString.append(/*(char)*/ ('0' + d));\n                    return;\n                }\n            }\n        }\n        throw NotFoundException.getNotFoundInstance();\n    };\n    // @Override\n    UPCEReader.prototype.getBarcodeFormat = function () {\n        return BarcodeFormat.UPC_E;\n    };\n    /**\n     * Expands a UPC-E value back into its full, equivalent UPC-A code value.\n     *\n     * @param upce UPC-E code as string of digits\n     * @return equivalent UPC-A code as string of digits\n     */\n    UPCEReader.convertUPCEtoUPCA = function (upce) {\n        // the following line is equivalent to upce.getChars(1, 7, upceChars, 0);\n        var upceChars = upce.slice(1, 7).split('').map(function (x) { return x.charCodeAt(0); });\n        var result = new StringBuilder( /*12*/);\n        result.append(upce.charAt(0));\n        var lastChar = upceChars[5];\n        switch (lastChar) {\n            case 0:\n            case 1:\n            case 2:\n                result.appendChars(upceChars, 0, 2);\n                result.append(lastChar);\n                result.append('0000');\n                result.appendChars(upceChars, 2, 3);\n                break;\n            case 3:\n                result.appendChars(upceChars, 0, 3);\n                result.append('00000');\n                result.appendChars(upceChars, 3, 2);\n                break;\n            case 4:\n                result.appendChars(upceChars, 0, 4);\n                result.append('00000');\n                result.append(upceChars[4]);\n                break;\n            default:\n                result.appendChars(upceChars, 0, 5);\n                result.append('0000');\n                result.append(lastChar);\n                break;\n        }\n        // Only append check digit in conversion if supplied\n        if (upce.length >= 8) {\n            result.append(upce.charAt(7));\n        }\n        return result.toString();\n    };\n    /**\n     * The pattern that marks the middle, and end, of a UPC-E pattern.\n     * There is no \"second half\" to a UPC-E barcode.\n     */\n    UPCEReader.MIDDLE_END_PATTERN = Int32Array.from([1, 1, 1, 1, 1, 1]);\n    // For an UPC-E barcode, the final digit is represented by the parities used\n    // to encode the middle six digits, according to the table below.\n    //\n    //                Parity of next 6 digits\n    //    Digit   0     1     2     3     4     5\n    //       0    Even   Even  Even Odd  Odd   Odd\n    //       1    Even   Even  Odd  Even Odd   Odd\n    //       2    Even   Even  Odd  Odd  Even  Odd\n    //       3    Even   Even  Odd  Odd  Odd   Even\n    //       4    Even   Odd   Even Even Odd   Odd\n    //       5    Even   Odd   Odd  Even Even  Odd\n    //       6    Even   Odd   Odd  Odd  Even  Even\n    //       7    Even   Odd   Even Odd  Even  Odd\n    //       8    Even   Odd   Even Odd  Odd   Even\n    //       9    Even   Odd   Odd  Even Odd   Even\n    //\n    // The encoding is represented by the following array, which is a bit pattern\n    // using Odd = 0 and Even = 1. For example, 5 is represented by:\n    //\n    //              Odd Even Even Odd Odd Even\n    // in binary:\n    //                0    1    1   0   0    1   == 0x19\n    //\n    /**\n     * See {@link #L_AND_G_PATTERNS}; these values similarly represent patterns of\n     * even-odd parity encodings of digits that imply both the number system (0 or 1)\n     * used, and the check digit.\n     */\n    UPCEReader.NUMSYS_AND_CHECK_DIGIT_PATTERNS = [\n        Int32Array.from([0x38, 0x34, 0x32, 0x31, 0x2C, 0x26, 0x23, 0x2A, 0x29, 0x25]),\n        Int32Array.from([0x07, 0x0B, 0x0D, 0x0E, 0x13, 0x19, 0x1C, 0x15, 0x16, 0x1]),\n    ];\n    return UPCEReader;\n}(UPCEANReader));\nexport default UPCEReader;\n//# sourceMappingURL=UPCEReader.js.map"]},"metadata":{},"sourceType":"module"}