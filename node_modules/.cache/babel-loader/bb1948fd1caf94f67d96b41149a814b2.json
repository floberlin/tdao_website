{"ast":null,"code":"import UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\n\nclass CalendarDate {\n  constructor() {\n    let aArgs = arguments,\n        // eslint-disable-line\n    oJSDate,\n        oNow,\n        sCalendarType;\n\n    switch (aArgs.length) {\n      case 0:\n        // defaults to the current date\n        oNow = new Date();\n        return this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n\n      case 1: // CalendarDate\n\n      case 2:\n        // CalendarDate, sCalendarType\n        if (!(aArgs[0] instanceof CalendarDate)) {\n          throw new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n        }\n\n        sCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType; // Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n        // source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\n        oJSDate = new Date(aArgs[0].valueOf()); // Make this date really local. Now getters are safe.\n\n        oJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n        oJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n\n      case 3: // year, month, date\n\n      case 4:\n        // year, month, date, sCalendarType\n        checkNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n        checkNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n        checkNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n        oJSDate = new Date(0, 0, 1);\n        oJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n        if (aArgs[3]) {\n          sCalendarType = aArgs[3];\n        }\n\n        this._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n        break;\n\n      default:\n        throw new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\" + \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n    }\n  }\n\n  getYear() {\n    return this._oUDate.getUTCFullYear();\n  }\n\n  setYear(year) {\n    checkNumericLike(year, `Invalid year: ${year}`);\n\n    this._oUDate.setUTCFullYear(year);\n\n    return this;\n  }\n\n  getMonth() {\n    return this._oUDate.getUTCMonth();\n  }\n  /**\n   * Sets the given month as ordinal month of the year.\n   * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n   * equivalent month names for the given calendar).\n   * If the specified value is is outside of the expected range, this method attempts to update the date information\n   * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n   * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n   * 0 will result in the previous month's last day.\n   * -1 will result in the day before the previous month's last day.\n   * 32 will result in:\n   * - first day of the next month if the current month has 31 days.\n   * - second day of the next month if the current month has 30 days.\n   * Other value will result in adding or subtracting days according to the given value.\n   * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n   */\n\n\n  setMonth(month, date) {\n    checkNumericLike(month, `Invalid month: ${month}`);\n\n    if (date || date === 0) {\n      checkNumericLike(date, `Invalid date: ${date}`);\n\n      this._oUDate.setUTCMonth(month, date);\n    } else {\n      this._oUDate.setUTCMonth(month);\n    }\n\n    return this;\n  }\n\n  getDate() {\n    return this._oUDate.getUTCDate();\n  }\n\n  setDate(date) {\n    checkNumericLike(date, `Invalid date: ${date}`);\n\n    this._oUDate.setUTCDate(date);\n\n    return this;\n  }\n\n  getDay() {\n    return this._oUDate.getUTCDay();\n  }\n\n  getCalendarType() {\n    return this._oUDate.sCalendarType;\n  }\n\n  isBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() < oCalendarDate.valueOf();\n  }\n\n  isAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() > oCalendarDate.valueOf();\n  }\n\n  isSameOrBefore(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() <= oCalendarDate.valueOf();\n  }\n\n  isSameOrAfter(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() >= oCalendarDate.valueOf();\n  }\n\n  isSame(oCalendarDate) {\n    checkCalendarDate(oCalendarDate);\n    return this.valueOf() === oCalendarDate.valueOf();\n  }\n\n  toLocalJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oLocalDate = new Date(this._oUDate.getTime()); // Make this date really local. Now getters are safe.\n\n    oLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n    oLocalDate.setHours(0, 0, 0, 0);\n    return oLocalDate;\n  }\n\n  toUTCJSDate() {\n    // Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n    // this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n    const oUTCDate = new Date(this._oUDate.getTime());\n    oUTCDate.setUTCHours(0, 0, 0, 0);\n    return oUTCDate;\n  }\n\n  toString() {\n    return `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n  }\n\n  valueOf() {\n    return this._oUDate.getTime();\n  }\n\n  static fromLocalJSDate(oJSDate, sCalendarType) {\n    // Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n    // because Date object in the test is different than the Date object in the application (due to the iframe).\n    // We can use jQuery.type or this method:\n    function isValidDate(date) {\n      return date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n    }\n\n    if (!isValidDate(oJSDate)) {\n      throw new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n    }\n\n    return new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n  }\n\n  static fromTimestamp(iTimestamp, sCalendarType) {\n    const oCalDate = new CalendarDate(0, 0, 1);\n    oCalDate._oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n    return oCalDate;\n  }\n\n}\n\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n  if (sCalendarType) {\n    return UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n  }\n\n  return new UniversalDate(createUTCDate(oDate).getTime());\n}\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\n\n\nfunction createUTCDate(oDate) {\n  const oUTCDate = new Date(Date.UTC(0, 0, 1));\n  oUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n  return oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate) {\n  if (!(oCalendarDate instanceof CalendarDate)) {\n    throw new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);\n  }\n}\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\n\n\nfunction checkNumericLike(value, message) {\n  if (value === undefined || value === Infinity || isNaN(value)) {\n    // eslint-disable-line\n    throw message;\n  }\n}\n\nexport default CalendarDate;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-localization/dist/dates/CalendarDate.js"],"names":["UniversalDate","CalendarDate","constructor","aArgs","arguments","oJSDate","oNow","sCalendarType","length","Date","getFullYear","getMonth","getDate","Error","_oUDate","valueOf","setFullYear","getUTCFullYear","getUTCMonth","getUTCDate","setHours","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","createUniversalUTCDate","checkNumericLike","getYear","setYear","year","setUTCFullYear","setMonth","month","date","setUTCMonth","setDate","setUTCDate","getDay","getUTCDay","getCalendarType","isBefore","oCalendarDate","checkCalendarDate","isAfter","isSameOrBefore","isSameOrAfter","isSame","toLocalJSDate","oLocalDate","getTime","toUTCJSDate","oUTCDate","setUTCHours","toString","fromLocalJSDate","isValidDate","Object","prototype","call","isNaN","fromTimestamp","iTimestamp","oCalDate","getInstance","oDate","createUTCDate","UTC","value","message","undefined","Infinity"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,sCAA1B;;AAEA,MAAMC,YAAN,CAAmB;AAClBC,EAAAA,WAAW,GAAG;AACb,QAAIC,KAAK,GAAGC,SAAZ;AAAA,QAAuB;AACtBC,IAAAA,OADD;AAAA,QAECC,IAFD;AAAA,QAGCC,aAHD;;AAKA,YAAQJ,KAAK,CAACK,MAAd;AACA,WAAK,CAAL;AAAQ;AACPF,QAAAA,IAAI,GAAG,IAAIG,IAAJ,EAAP;AACA,eAAO,KAAKP,WAAL,CAAiBI,IAAI,CAACI,WAAL,EAAjB,EAAqCJ,IAAI,CAACK,QAAL,EAArC,EAAsDL,IAAI,CAACM,OAAL,EAAtD,CAAP;;AAED,WAAK,CAAL,CALA,CAKQ;;AACR,WAAK,CAAL;AAAQ;AACP,YAAI,EAAET,KAAK,CAAC,CAAD,CAAL,YAAoBF,YAAtB,CAAJ,EAAyC;AACxC,gBAAM,IAAIY,KAAJ,CAAU,6FAAV,CAAN;AACA;;AACDN,QAAAA,aAAa,GAAGJ,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB,GAAsBA,KAAK,CAAC,CAAD,CAAL,CAASW,OAAT,CAAiBP,aAAvD,CAJD,CAKC;AACA;;AACAF,QAAAA,OAAO,GAAG,IAAII,IAAJ,CAASN,KAAK,CAAC,CAAD,CAAL,CAASY,OAAT,EAAT,CAAV,CAPD,CASC;;AACAV,QAAAA,OAAO,CAACW,WAAR,CAAoBX,OAAO,CAACY,cAAR,EAApB,EAA8CZ,OAAO,CAACa,WAAR,EAA9C,EAAqEb,OAAO,CAACc,UAAR,EAArE;AACAd,QAAAA,OAAO,CAACe,QAAR,CAAiBf,OAAO,CAACgB,WAAR,EAAjB,EAAwChB,OAAO,CAACiB,aAAR,EAAxC,EAAiEjB,OAAO,CAACkB,aAAR,EAAjE,EAA0FlB,OAAO,CAACmB,kBAAR,EAA1F;AAEA,aAAKV,OAAL,GAAeW,sBAAsB,CAACpB,OAAD,EAAUE,aAAV,CAArC;AACA;;AAED,WAAK,CAAL,CAtBA,CAsBQ;;AACR,WAAK,CAAL;AAAQ;AACPmB,QAAAA,gBAAgB,CAACvB,KAAK,CAAC,CAAD,CAAN,EAAY,iBAAgBA,KAAK,CAAC,CAAD,CAAI,EAArC,CAAhB;AACAuB,QAAAA,gBAAgB,CAACvB,KAAK,CAAC,CAAD,CAAN,EAAY,kBAAiBA,KAAK,CAAC,CAAD,CAAI,EAAtC,CAAhB;AACAuB,QAAAA,gBAAgB,CAACvB,KAAK,CAAC,CAAD,CAAN,EAAY,iBAAgBA,KAAK,CAAC,CAAD,CAAI,EAArC,CAAhB;AAEAE,QAAAA,OAAO,GAAG,IAAII,IAAJ,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAV;AACAJ,QAAAA,OAAO,CAACW,WAAR,CAAoBb,KAAK,CAAC,CAAD,CAAzB,EAA8BA,KAAK,CAAC,CAAD,CAAnC,EAAwCA,KAAK,CAAC,CAAD,CAA7C,EAND,CAMoD;;AAEnD,YAAIA,KAAK,CAAC,CAAD,CAAT,EAAc;AACbI,UAAAA,aAAa,GAAGJ,KAAK,CAAC,CAAD,CAArB;AACA;;AACD,aAAKW,OAAL,GAAeW,sBAAsB,CAACpB,OAAD,EAAUE,aAAV,CAArC;AACA;;AAED;AACC,cAAM,IAAIM,KAAJ,CAAW,GAAE,wFAChB,kDAAmD,GAAEV,KAAM,EADxD,CAAN;AAtCD;AAyCA;;AAEDwB,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKb,OAAL,CAAaG,cAAb,EAAP;AACA;;AAEDW,EAAAA,OAAO,CAACC,IAAD,EAAO;AACbH,IAAAA,gBAAgB,CAACG,IAAD,EAAQ,iBAAgBA,IAAK,EAA7B,CAAhB;;AACA,SAAKf,OAAL,CAAagB,cAAb,CAA4BD,IAA5B;;AACA,WAAO,IAAP;AACA;;AAEDlB,EAAAA,QAAQ,GAAG;AACV,WAAO,KAAKG,OAAL,CAAaI,WAAb,EAAP;AACA;AAED;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACCa,EAAAA,QAAQ,CAACC,KAAD,EAAQC,IAAR,EAAc;AACrBP,IAAAA,gBAAgB,CAACM,KAAD,EAAS,kBAAiBA,KAAM,EAAhC,CAAhB;;AACA,QAAIC,IAAI,IAAIA,IAAI,KAAK,CAArB,EAAwB;AACvBP,MAAAA,gBAAgB,CAACO,IAAD,EAAQ,iBAAgBA,IAAK,EAA7B,CAAhB;;AACA,WAAKnB,OAAL,CAAaoB,WAAb,CAAyBF,KAAzB,EAAgCC,IAAhC;AACA,KAHD,MAGO;AACN,WAAKnB,OAAL,CAAaoB,WAAb,CAAyBF,KAAzB;AACA;;AACD,WAAO,IAAP;AACA;;AAEDpB,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKE,OAAL,CAAaK,UAAb,EAAP;AACA;;AAEDgB,EAAAA,OAAO,CAACF,IAAD,EAAO;AACbP,IAAAA,gBAAgB,CAACO,IAAD,EAAQ,iBAAgBA,IAAK,EAA7B,CAAhB;;AACA,SAAKnB,OAAL,CAAasB,UAAb,CAAwBH,IAAxB;;AACA,WAAO,IAAP;AACA;;AAEDI,EAAAA,MAAM,GAAG;AACR,WAAO,KAAKvB,OAAL,CAAawB,SAAb,EAAP;AACA;;AAEDC,EAAAA,eAAe,GAAG;AACjB,WAAO,KAAKzB,OAAL,CAAaP,aAApB;AACA;;AAEDiC,EAAAA,QAAQ,CAACC,aAAD,EAAgB;AACvBC,IAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAO,KAAK1B,OAAL,KAAiB0B,aAAa,CAAC1B,OAAd,EAAxB;AACA;;AAED4B,EAAAA,OAAO,CAACF,aAAD,EAAgB;AACtBC,IAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAO,KAAK1B,OAAL,KAAiB0B,aAAa,CAAC1B,OAAd,EAAxB;AACA;;AAED6B,EAAAA,cAAc,CAACH,aAAD,EAAgB;AAC7BC,IAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAO,KAAK1B,OAAL,MAAkB0B,aAAa,CAAC1B,OAAd,EAAzB;AACA;;AAED8B,EAAAA,aAAa,CAACJ,aAAD,EAAgB;AAC5BC,IAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAO,KAAK1B,OAAL,MAAkB0B,aAAa,CAAC1B,OAAd,EAAzB;AACA;;AAED+B,EAAAA,MAAM,CAACL,aAAD,EAAgB;AACrBC,IAAAA,iBAAiB,CAACD,aAAD,CAAjB;AACA,WAAO,KAAK1B,OAAL,OAAmB0B,aAAa,CAAC1B,OAAd,EAA1B;AACA;;AAEDgC,EAAAA,aAAa,GAAG;AACf;AACA;AACA,UAAMC,UAAU,GAAG,IAAIvC,IAAJ,CAAS,KAAKK,OAAL,CAAamC,OAAb,EAAT,CAAnB,CAHe,CAKf;;AACAD,IAAAA,UAAU,CAAChC,WAAX,CAAuBgC,UAAU,CAAC/B,cAAX,EAAvB,EAAoD+B,UAAU,CAAC9B,WAAX,EAApD,EAA8E8B,UAAU,CAAC7B,UAAX,EAA9E;AACA6B,IAAAA,UAAU,CAAC5B,QAAX,CAAoB,CAApB,EAAuB,CAAvB,EAA0B,CAA1B,EAA6B,CAA7B;AAEA,WAAO4B,UAAP;AACA;;AAEDE,EAAAA,WAAW,GAAG;AACb;AACA;AACA,UAAMC,QAAQ,GAAG,IAAI1C,IAAJ,CAAS,KAAKK,OAAL,CAAamC,OAAb,EAAT,CAAjB;AACAE,IAAAA,QAAQ,CAACC,WAAT,CAAqB,CAArB,EAAwB,CAAxB,EAA2B,CAA3B,EAA8B,CAA9B;AAEA,WAAOD,QAAP;AACA;;AAEDE,EAAAA,QAAQ,GAAG;AACV,WAAQ,GAAE,KAAKvC,OAAL,CAAaP,aAAc,KAAI,KAAKoB,OAAL,EAAe,IAAG,KAAKhB,QAAL,KAAkB,CAAE,IAAG,KAAKC,OAAL,EAAe,EAAjG;AACA;;AAEDG,EAAAA,OAAO,GAAG;AACT,WAAO,KAAKD,OAAL,CAAamC,OAAb,EAAP;AACA;;AAEqB,SAAfK,eAAe,CAACjD,OAAD,EAAUE,aAAV,EAAyB;AAC9C;AACA;AACA;AACA,aAASgD,WAAT,CAAqBtB,IAArB,EAA2B;AAC1B,aAAOA,IAAI,IAAIuB,MAAM,CAACC,SAAP,CAAiBJ,QAAjB,CAA0BK,IAA1B,CAA+BzB,IAA/B,MAAyC,eAAjD,IAAoE,CAAC0B,KAAK,CAAC1B,IAAD,CAAjF,CAD0B,CAC+D;AACzF;;AACD,QAAI,CAACsB,WAAW,CAAClD,OAAD,CAAhB,EAA2B;AAC1B,YAAM,IAAIQ,KAAJ,CAAW,qDAAoDR,OAAQ,IAAvE,CAAN;AACA;;AACD,WAAO,IAAIJ,YAAJ,CAAiBI,OAAO,CAACK,WAAR,EAAjB,EAAwCL,OAAO,CAACM,QAAR,EAAxC,EAA4DN,OAAO,CAACO,OAAR,EAA5D,EAA+EL,aAA/E,CAAP;AACA;;AAEmB,SAAbqD,aAAa,CAACC,UAAD,EAAatD,aAAb,EAA4B;AAC/C,UAAMuD,QAAQ,GAAG,IAAI7D,YAAJ,CAAiB,CAAjB,EAAoB,CAApB,EAAuB,CAAvB,CAAjB;AACA6D,IAAAA,QAAQ,CAAChD,OAAT,GAAmBd,aAAa,CAAC+D,WAAd,CAA0B,IAAItD,IAAJ,CAASoD,UAAT,CAA1B,EAAgDtD,aAAhD,CAAnB;AACA,WAAOuD,QAAP;AACA;;AAnLiB;;AAsLnB,SAASrC,sBAAT,CAAgCuC,KAAhC,EAAuCzD,aAAvC,EAAsD;AACrD,MAAIA,aAAJ,EAAmB;AAClB,WAAOP,aAAa,CAAC+D,WAAd,CAA0BE,aAAa,CAACD,KAAD,CAAvC,EAAgDzD,aAAhD,CAAP;AACA;;AACD,SAAO,IAAIP,aAAJ,CAAkBiE,aAAa,CAACD,KAAD,CAAb,CAAqBf,OAArB,EAAlB,CAAP;AACA;AAED;AACA;AACA;AACA;AACA;;;AACA,SAASgB,aAAT,CAAuBD,KAAvB,EAA8B;AAC7B,QAAMb,QAAQ,GAAG,IAAI1C,IAAJ,CAASA,IAAI,CAACyD,GAAL,CAAS,CAAT,EAAY,CAAZ,EAAe,CAAf,CAAT,CAAjB;AAEAf,EAAAA,QAAQ,CAACrB,cAAT,CAAwBkC,KAAK,CAACtD,WAAN,EAAxB,EAA6CsD,KAAK,CAACrD,QAAN,EAA7C,EAA+DqD,KAAK,CAACpD,OAAN,EAA/D;AAEA,SAAOuC,QAAP;AACA;;AAED,SAAST,iBAAT,CAA2BD,aAA3B,EAA0C;AACzC,MAAI,EAAEA,aAAa,YAAYxC,YAA3B,CAAJ,EAA8C;AAC7C,UAAM,IAAIY,KAAJ,CAAW,2BAA0B4B,aAAc,mDAAnD,CAAN;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASf,gBAAT,CAA0ByC,KAA1B,EAAiCC,OAAjC,EAA0C;AACzC,MAAID,KAAK,KAAKE,SAAV,IAAuBF,KAAK,KAAKG,QAAjC,IAA6CX,KAAK,CAACQ,KAAD,CAAtD,EAA+D;AAAE;AAChE,UAAMC,OAAN;AACA;AACD;;AAED,eAAenE,YAAf","sourcesContent":["import UniversalDate from \"../sap/ui/core/date/UniversalDate.js\";\n\nclass CalendarDate {\n\tconstructor() {\n\t\tlet aArgs = arguments, // eslint-disable-line\n\t\t\toJSDate,\n\t\t\toNow,\n\t\t\tsCalendarType;\n\n\t\tswitch (aArgs.length) {\n\t\tcase 0: // defaults to the current date\n\t\t\toNow = new Date();\n\t\t\treturn this.constructor(oNow.getFullYear(), oNow.getMonth(), oNow.getDate());\n\n\t\tcase 1: // CalendarDate\n\t\tcase 2: // CalendarDate, sCalendarType\n\t\t\tif (!(aArgs[0] instanceof CalendarDate)) {\n\t\t\t\tthrow new Error(\"Invalid arguments: the first argument must be of type sap.ui.unified.calendar.CalendarDate.\");\n\t\t\t}\n\t\t\tsCalendarType = aArgs[1] ? aArgs[1] : aArgs[0]._oUDate.sCalendarType;\n\t\t\t// Use source.valueOf() (returns the same point of time regardless calendar type) instead of\n\t\t\t// source's getters to avoid non-gregorian Year, Month and Date may be used to construct a Gregorian date\n\t\t\toJSDate = new Date(aArgs[0].valueOf());\n\n\t\t\t// Make this date really local. Now getters are safe.\n\t\t\toJSDate.setFullYear(oJSDate.getUTCFullYear(), oJSDate.getUTCMonth(), oJSDate.getUTCDate());\n\t\t\toJSDate.setHours(oJSDate.getUTCHours(), oJSDate.getUTCMinutes(), oJSDate.getUTCSeconds(), oJSDate.getUTCMilliseconds());\n\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tcase 3: // year, month, date\n\t\tcase 4: // year, month, date, sCalendarType\n\t\t\tcheckNumericLike(aArgs[0], `Invalid year: ${aArgs[0]}`);\n\t\t\tcheckNumericLike(aArgs[1], `Invalid month: ${aArgs[1]}`);\n\t\t\tcheckNumericLike(aArgs[2], `Invalid date: ${aArgs[2]}`);\n\n\t\t\toJSDate = new Date(0, 0, 1);\n\t\t\toJSDate.setFullYear(aArgs[0], aArgs[1], aArgs[2]); // 2 digits year is not supported. If so, it is considered as full year as well.\n\n\t\t\tif (aArgs[3]) {\n\t\t\t\tsCalendarType = aArgs[3];\n\t\t\t}\n\t\t\tthis._oUDate = createUniversalUTCDate(oJSDate, sCalendarType);\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\tthrow new Error(`${\"Invalid arguments. Accepted arguments are: 1) oCalendarDate, (optional)calendarType\"\n\t\t\t\t+ \"or 2) year, month, date, (optional) calendarType\"}${aArgs}`);\n\t\t}\n\t}\n\n\tgetYear() {\n\t\treturn this._oUDate.getUTCFullYear();\n\t}\n\n\tsetYear(year) {\n\t\tcheckNumericLike(year, `Invalid year: ${year}`);\n\t\tthis._oUDate.setUTCFullYear(year);\n\t\treturn this;\n\t}\n\n\tgetMonth() {\n\t\treturn this._oUDate.getUTCMonth();\n\t}\n\n\t/**\n\t * Sets the given month as ordinal month of the year.\n\t * @param {int} month An integer between 0 and 11, representing the months January through December( or their\n\t * equivalent month names for the given calendar).\n\t * If the specified value is is outside of the expected range, this method attempts to update the date information\n\t * accordingly. For example, if 12 is given as a month, the year will be incremented by 1, and 1 will be used for month.\n\t * @param {int} [date] An integer between 1 and 31, representing the day of the month, but other values are allowed.\n\t * 0 will result in the previous month's last day.\n\t * -1 will result in the day before the previous month's last day.\n\t * 32 will result in:\n\t * - first day of the next month if the current month has 31 days.\n\t * - second day of the next month if the current month has 30 days.\n\t * Other value will result in adding or subtracting days according to the given value.\n\t * @returns {sap.ui.unified.calendar.CalendarDate} <code>this</code> for method chaining.\n\t */\n\tsetMonth(month, date) {\n\t\tcheckNumericLike(month, `Invalid month: ${month}`);\n\t\tif (date || date === 0) {\n\t\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\t\tthis._oUDate.setUTCMonth(month, date);\n\t\t} else {\n\t\t\tthis._oUDate.setUTCMonth(month);\n\t\t}\n\t\treturn this;\n\t}\n\n\tgetDate() {\n\t\treturn this._oUDate.getUTCDate();\n\t}\n\n\tsetDate(date) {\n\t\tcheckNumericLike(date, `Invalid date: ${date}`);\n\t\tthis._oUDate.setUTCDate(date);\n\t\treturn this;\n\t}\n\n\tgetDay() {\n\t\treturn this._oUDate.getUTCDay();\n\t}\n\n\tgetCalendarType() {\n\t\treturn this._oUDate.sCalendarType;\n\t}\n\n\tisBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() < oCalendarDate.valueOf();\n\t}\n\n\tisAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() > oCalendarDate.valueOf();\n\t}\n\n\tisSameOrBefore(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() <= oCalendarDate.valueOf();\n\t}\n\n\tisSameOrAfter(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() >= oCalendarDate.valueOf();\n\t}\n\n\tisSame(oCalendarDate) {\n\t\tcheckCalendarDate(oCalendarDate);\n\t\treturn this.valueOf() === oCalendarDate.valueOf();\n\t}\n\n\ttoLocalJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oLocalDate = new Date(this._oUDate.getTime());\n\n\t\t// Make this date really local. Now getters are safe.\n\t\toLocalDate.setFullYear(oLocalDate.getUTCFullYear(), oLocalDate.getUTCMonth(), oLocalDate.getUTCDate());\n\t\toLocalDate.setHours(0, 0, 0, 0);\n\n\t\treturn oLocalDate;\n\t}\n\n\ttoUTCJSDate() {\n\t\t// Use this._oUDate.getTime()(returns the same point of time regardless calendar type)  instead of\n\t\t// this._oUDate's getters to avoid non-gregorian Year, Month and Date to be used to construct a Gregorian date\n\t\tconst oUTCDate = new Date(this._oUDate.getTime());\n\t\toUTCDate.setUTCHours(0, 0, 0, 0);\n\n\t\treturn oUTCDate;\n\t}\n\n\ttoString() {\n\t\treturn `${this._oUDate.sCalendarType}: ${this.getYear()}/${this.getMonth() + 1}/${this.getDate()}`;\n\t}\n\n\tvalueOf() {\n\t\treturn this._oUDate.getTime();\n\t}\n\n\tstatic fromLocalJSDate(oJSDate, sCalendarType) {\n\t\t// Cross frame check for a date should be performed here otherwise setDateValue would fail in OPA tests\n\t\t// because Date object in the test is different than the Date object in the application (due to the iframe).\n\t\t// We can use jQuery.type or this method:\n\t\tfunction isValidDate(date) {\n\t\t\treturn date && Object.prototype.toString.call(date) === \"[object Date]\" && !isNaN(date); // eslint-disable-line\n\t\t}\n\t\tif (!isValidDate(oJSDate)) {\n\t\t\tthrow new Error(`Date parameter must be a JavaScript Date object: [${oJSDate}].`);\n\t\t}\n\t\treturn new CalendarDate(oJSDate.getFullYear(), oJSDate.getMonth(), oJSDate.getDate(), sCalendarType);\n\t}\n\n\tstatic fromTimestamp(iTimestamp, sCalendarType) {\n\t\tconst oCalDate = new CalendarDate(0, 0, 1);\n\t\toCalDate._oUDate = UniversalDate.getInstance(new Date(iTimestamp), sCalendarType);\n\t\treturn oCalDate;\n\t}\n}\n\nfunction createUniversalUTCDate(oDate, sCalendarType) {\n\tif (sCalendarType) {\n\t\treturn UniversalDate.getInstance(createUTCDate(oDate), sCalendarType);\n\t}\n\treturn new UniversalDate(createUTCDate(oDate).getTime());\n}\n\n/**\n * Creates a JavaScript UTC Date corresponding to the given JavaScript Date.\n * @param {Date} oDate JavaScript date object. Time related information is cut.\n * @returns {Date} JavaScript date created from the date object, but this time considered as UTC date information.\n */\nfunction createUTCDate(oDate) {\n\tconst oUTCDate = new Date(Date.UTC(0, 0, 1));\n\n\toUTCDate.setUTCFullYear(oDate.getFullYear(), oDate.getMonth(), oDate.getDate());\n\n\treturn oUTCDate;\n}\n\nfunction checkCalendarDate(oCalendarDate) {\n\tif (!(oCalendarDate instanceof CalendarDate)) {\n\t\tthrow new Error(`Invalid calendar date: [${oCalendarDate}]. Expected: sap.ui.unified.calendar.CalendarDate`);\n\t}\n}\n\n/**\n * Verifies the given value is numeric like, i.e. 3, \"3\" and throws an error if it is not.\n * @param {any} value The value of any type to check. If null or undefined, this method throws an error.\n * @param {string} message The message to be used if an error is to be thrown\n * @throws will throw an error if the value is null or undefined or is not like a number\n */\nfunction checkNumericLike(value, message) {\n\tif (value === undefined || value === Infinity || isNaN(value)) { // eslint-disable-line\n\t\tthrow message;\n\t}\n}\n\nexport default CalendarDate;\n"]},"metadata":{},"sourceType":"module"}