{"ast":null,"code":"/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = {\n  aliceblue: \"f0f8ff\",\n  antiquewhite: \"faebd7\",\n  aqua: \"00ffff\",\n  aquamarine: \"7fffd4\",\n  azure: \"f0ffff\",\n  beige: \"f5f5dc\",\n  bisque: \"ffe4c4\",\n  black: \"000000\",\n  blanchedalmond: \"ffebcd\",\n  blue: \"0000ff\",\n  blueviolet: \"8a2be2\",\n  brown: \"a52a2a\",\n  burlywood: \"deb887\",\n  cadetblue: \"5f9ea0\",\n  chartreuse: \"7fff00\",\n  chocolate: \"d2691e\",\n  coral: \"ff7f50\",\n  cornflowerblue: \"6495ed\",\n  cornsilk: \"fff8dc\",\n  crimson: \"dc143c\",\n  cyan: \"00ffff\",\n  darkblue: \"00008b\",\n  darkcyan: \"008b8b\",\n  darkgoldenrod: \"b8860b\",\n  darkgray: \"a9a9a9\",\n  darkgrey: \"a9a9a9\",\n  darkgreen: \"006400\",\n  darkkhaki: \"bdb76b\",\n  darkmagenta: \"8b008b\",\n  darkolivegreen: \"556b2f\",\n  darkorange: \"ff8c00\",\n  darkorchid: \"9932cc\",\n  darkred: \"8b0000\",\n  darksalmon: \"e9967a\",\n  darkseagreen: \"8fbc8f\",\n  darkslateblue: \"483d8b\",\n  darkslategray: \"2f4f4f\",\n  darkslategrey: \"2f4f4f\",\n  darkturquoise: \"00ced1\",\n  darkviolet: \"9400d3\",\n  deeppink: \"ff1493\",\n  deepskyblue: \"00bfff\",\n  dimgray: \"696969\",\n  dimgrey: \"696969\",\n  dodgerblue: \"1e90ff\",\n  firebrick: \"b22222\",\n  floralwhite: \"fffaf0\",\n  forestgreen: \"228b22\",\n  fuchsia: \"ff00ff\",\n  gainsboro: \"dcdcdc\",\n  ghostwhite: \"f8f8ff\",\n  gold: \"ffd700\",\n  goldenrod: \"daa520\",\n  gray: \"808080\",\n  grey: \"808080\",\n  green: \"008000\",\n  greenyellow: \"adff2f\",\n  honeydew: \"f0fff0\",\n  hotpink: \"ff69b4\",\n  indianred: \"cd5c5c\",\n  indigo: \"4b0082\",\n  ivory: \"fffff0\",\n  khaki: \"f0e68c\",\n  lavender: \"e6e6fa\",\n  lavenderblush: \"fff0f5\",\n  lawngreen: \"7cfc00\",\n  lemonchiffon: \"fffacd\",\n  lightblue: \"add8e6\",\n  lightcoral: \"f08080\",\n  lightcyan: \"e0ffff\",\n  lightgoldenrodyellow: \"fafad2\",\n  lightgray: \"d3d3d3\",\n  lightgrey: \"d3d3d3\",\n  lightgreen: \"90ee90\",\n  lightpink: \"ffb6c1\",\n  lightsalmon: \"ffa07a\",\n  lightseagreen: \"20b2aa\",\n  lightskyblue: \"87cefa\",\n  lightslategray: \"778899\",\n  lightslategrey: \"778899\",\n  lightsteelblue: \"b0c4de\",\n  lightyellow: \"ffffe0\",\n  lime: \"00ff00\",\n  limegreen: \"32cd32\",\n  linen: \"faf0e6\",\n  magenta: \"ff00ff\",\n  maroon: \"800000\",\n  mediumaquamarine: \"66cdaa\",\n  mediumblue: \"0000cd\",\n  mediumorchid: \"ba55d3\",\n  mediumpurple: \"9370db\",\n  mediumseagreen: \"3cb371\",\n  mediumslateblue: \"7b68ee\",\n  mediumspringgreen: \"00fa9a\",\n  mediumturquoise: \"48d1cc\",\n  mediumvioletred: \"c71585\",\n  midnightblue: \"191970\",\n  mintcream: \"f5fffa\",\n  mistyrose: \"ffe4e1\",\n  moccasin: \"ffe4b5\",\n  navajowhite: \"ffdead\",\n  navy: \"000080\",\n  oldlace: \"fdf5e6\",\n  olive: \"808000\",\n  olivedrab: \"6b8e23\",\n  orange: \"ffa500\",\n  orangered: \"ff4500\",\n  orchid: \"da70d6\",\n  palegoldenrod: \"eee8aa\",\n  palegreen: \"98fb98\",\n  paleturquoise: \"afeeee\",\n  palevioletred: \"db7093\",\n  papayawhip: \"ffefd5\",\n  peachpuff: \"ffdab9\",\n  peru: \"cd853f\",\n  pink: \"ffc0cb\",\n  plum: \"dda0dd\",\n  powderblue: \"b0e0e6\",\n  purple: \"800080\",\n  red: \"ff0000\",\n  rosybrown: \"bc8f8f\",\n  royalblue: \"4169e1\",\n  saddlebrown: \"8b4513\",\n  salmon: \"fa8072\",\n  sandybrown: \"f4a460\",\n  seagreen: \"2e8b57\",\n  seashell: \"fff5ee\",\n  sienna: \"a0522d\",\n  silver: \"c0c0c0\",\n  skyblue: \"87ceeb\",\n  slateblue: \"6a5acd\",\n  slategray: \"708090\",\n  slategrey: \"708090\",\n  snow: \"fffafa\",\n  springgreen: \"00ff7f\",\n  steelblue: \"4682b4\",\n  tan: \"d2b48c\",\n  teal: \"008080\",\n  thistle: \"d8bfd8\",\n  tomato: \"ff6347\",\n  turquoise: \"40e0d0\",\n  violet: \"ee82ee\",\n  wheat: \"f5deb3\",\n  white: \"ffffff\",\n  whitesmoke: \"f5f5f5\",\n  yellow: \"ffff00\",\n  yellowgreen: \"9acd32\",\n  transparent: \"00000000\"\n};\n\nconst getRGBColor = color => {\n  if (color.startsWith(\"rgba\")) {\n    return RGBAToRGB(color);\n  }\n\n  if (color.startsWith(\"rgb\")) {\n    return RGBToRGB(color);\n  } // HEX\n\n\n  if (color.indexOf(\"#\") === 0) {\n    // Shorthand Syntax\n    if (color.length === 4) {\n      color = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n    } else {\n      color = color.slice(1, color.length);\n    }\n  } // Css Color\n\n\n  if (Object.keys(CSSColors).includes(color)) {\n    color = CSSColors[color];\n  }\n\n  return HEXToRGB(color);\n};\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\n\n\nconst RGBAToRGB = color => {\n  const openingBracketIndex = color.indexOf(\"(\"),\n        commasIndexes = [];\n\n  for (let i = 0; i < color.length; i++) {\n    if (color[i] === \",\") {\n      commasIndexes.push(i);\n    }\n  }\n\n  return {\n    r: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n    g: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n    b: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim())\n  };\n};\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\n\n\nconst RGBToRGB = color => {\n  const openingBracketIndex = color.indexOf(\"(\"),\n        closingBraketIndex = color.indexOf(\")\"),\n        commasIndexes = [];\n\n  for (let i = 0; i < color.length; i++) {\n    if (color[i] === \",\") {\n      commasIndexes.push(i);\n    }\n  }\n\n  return {\n    r: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n    g: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n    b: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim())\n  };\n};\n\nconst HSLToRGB = (color = {\n  h: undefined,\n  s: undefined,\n  l: undefined\n}) => {\n  // Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n  const C = (1 - Math.abs(2 * color.l - 1)) * color.s,\n        X = C * (1 - Math.abs(color.h / 60 % 2 - 1)),\n        m = color.l - C / 2;\n  let tempColor = {};\n\n  switch (Math.round(color.h / 60)) {\n    // 0 ≤ H < 60\n    case 0:\n      tempColor = {\n        r: C,\n        g: X,\n        b: 0\n      };\n      break;\n    // 60 ≤ H < 120\n\n    case 1:\n      tempColor = {\n        r: X,\n        g: C,\n        b: 0\n      };\n      break;\n    // 120 ≤ H < 180\n\n    case 2:\n      tempColor = {\n        r: 0,\n        g: C,\n        b: X\n      };\n      break;\n    // 180 ≤ H < 240\n\n    case 3:\n      tempColor = {\n        r: 0,\n        g: X,\n        b: C\n      };\n      break;\n    // 240 ≤ H < 300\n\n    case 4:\n      tempColor = {\n        r: X,\n        g: 0,\n        b: C\n      };\n      break;\n    // 300 ≤ H < 360\n\n    default:\n      tempColor = {\n        r: C,\n        g: 0,\n        b: X\n      };\n  }\n\n  return {\n    r: Math.floor((tempColor.r + m) * 255),\n    g: Math.floor((tempColor.g + m) * 255),\n    b: Math.floor((tempColor.b + m) * 255)\n  };\n};\n\nconst HEXToRGB = hex => {\n  // Please make sure you pass a valid 6 digit hex color\n  // In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n  const rgbValues = {\n    r: hex.substr(0, 2),\n    g: hex.substr(2, 2),\n    b: hex.substr(4, 2)\n  };\n  const rgbKeys = Object.keys(rgbValues);\n  rgbKeys.forEach(key => {\n    rgbValues[key] = parseInt(rgbValues[key], 16);\n  });\n  return rgbValues;\n};\n\nconst RGBToHSL = (color = {\n  r: undefined,\n  g: undefined,\n  b: undefined\n}) => {\n  const R = color.r / 255,\n        G = color.g / 255,\n        B = color.b / 255,\n        max = Math.max(R, G, B),\n        min = Math.min(R, G, B),\n        delta = max - min;\n  let h, s; // Hue calculation\n\n  if (delta === 0) {\n    h = 0;\n  } else if (max === R) {\n    h = 60 * ((G - B) / delta % 6);\n  } else if (max === G) {\n    h = 60 * ((B - R) / delta + 2);\n  } else if (max === B) {\n    h = 60 * ((R - G) / delta + 4);\n  } // Lightness calculation\n\n\n  const l = (max + min) / 2; // Saturation calculation\n\n  if (delta === 0) {\n    s = 0;\n  } else {\n    s = delta / (1 - Math.abs(2 * l - 1));\n  }\n\n  return {\n    h,\n    s,\n    l\n  };\n};\n\nexport { getRGBColor, HSLToRGB, HEXToRGB, RGBToHSL };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/util/ColorConversion.js"],"names":["CSSColors","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgrey","darkgreen","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","gold","goldenrod","gray","grey","green","greenyellow","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgrey","lightgreen","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","transparent","getRGBColor","color","startsWith","RGBAToRGB","RGBToRGB","indexOf","length","slice","Object","keys","includes","HEXToRGB","openingBracketIndex","commasIndexes","i","push","r","parseInt","trim","g","b","closingBraketIndex","HSLToRGB","h","undefined","s","l","C","Math","abs","X","m","tempColor","round","floor","hex","rgbValues","substr","rgbKeys","forEach","key","RGBToHSL","R","G","B","max","min","delta"],"mappings":"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","sourcesContent":["/**\n *\n * @param {String} color Color in one of the following formats: RGBA or HEX\n */\n\n/**\n * Map of CSS colors to hex representation\n */\nconst CSSColors = {\n\taliceblue: \"f0f8ff\",\n\tantiquewhite: \"faebd7\",\n\taqua: \"00ffff\",\n\taquamarine: \"7fffd4\",\n\tazure: \"f0ffff\",\n\tbeige: \"f5f5dc\",\n\tbisque: \"ffe4c4\",\n\tblack: \"000000\",\n\tblanchedalmond: \"ffebcd\",\n\tblue: \"0000ff\",\n\tblueviolet: \"8a2be2\",\n\tbrown: \"a52a2a\",\n\tburlywood: \"deb887\",\n\tcadetblue: \"5f9ea0\",\n\tchartreuse: \"7fff00\",\n\tchocolate: \"d2691e\",\n\tcoral: \"ff7f50\",\n\tcornflowerblue: \"6495ed\",\n\tcornsilk: \"fff8dc\",\n\tcrimson: \"dc143c\",\n\tcyan: \"00ffff\",\n\tdarkblue: \"00008b\",\n\tdarkcyan: \"008b8b\",\n\tdarkgoldenrod: \"b8860b\",\n\tdarkgray: \"a9a9a9\",\n\tdarkgrey: \"a9a9a9\",\n\tdarkgreen: \"006400\",\n\tdarkkhaki: \"bdb76b\",\n\tdarkmagenta: \"8b008b\",\n\tdarkolivegreen: \"556b2f\",\n\tdarkorange: \"ff8c00\",\n\tdarkorchid: \"9932cc\",\n\tdarkred: \"8b0000\",\n\tdarksalmon: \"e9967a\",\n\tdarkseagreen: \"8fbc8f\",\n\tdarkslateblue: \"483d8b\",\n\tdarkslategray: \"2f4f4f\",\n\tdarkslategrey: \"2f4f4f\",\n\tdarkturquoise: \"00ced1\",\n\tdarkviolet: \"9400d3\",\n\tdeeppink: \"ff1493\",\n\tdeepskyblue: \"00bfff\",\n\tdimgray: \"696969\",\n\tdimgrey: \"696969\",\n\tdodgerblue: \"1e90ff\",\n\tfirebrick: \"b22222\",\n\tfloralwhite: \"fffaf0\",\n\tforestgreen: \"228b22\",\n\tfuchsia: \"ff00ff\",\n\tgainsboro: \"dcdcdc\",\n\tghostwhite: \"f8f8ff\",\n\tgold: \"ffd700\",\n\tgoldenrod: \"daa520\",\n\tgray: \"808080\",\n\tgrey: \"808080\",\n\tgreen: \"008000\",\n\tgreenyellow: \"adff2f\",\n\thoneydew: \"f0fff0\",\n\thotpink: \"ff69b4\",\n\tindianred: \"cd5c5c\",\n\tindigo: \"4b0082\",\n\tivory: \"fffff0\",\n\tkhaki: \"f0e68c\",\n\tlavender: \"e6e6fa\",\n\tlavenderblush: \"fff0f5\",\n\tlawngreen: \"7cfc00\",\n\tlemonchiffon: \"fffacd\",\n\tlightblue: \"add8e6\",\n\tlightcoral: \"f08080\",\n\tlightcyan: \"e0ffff\",\n\tlightgoldenrodyellow: \"fafad2\",\n\tlightgray: \"d3d3d3\",\n\tlightgrey: \"d3d3d3\",\n\tlightgreen: \"90ee90\",\n\tlightpink: \"ffb6c1\",\n\tlightsalmon: \"ffa07a\",\n\tlightseagreen: \"20b2aa\",\n\tlightskyblue: \"87cefa\",\n\tlightslategray: \"778899\",\n\tlightslategrey: \"778899\",\n\tlightsteelblue: \"b0c4de\",\n\tlightyellow: \"ffffe0\",\n\tlime: \"00ff00\",\n\tlimegreen: \"32cd32\",\n\tlinen: \"faf0e6\",\n\tmagenta: \"ff00ff\",\n\tmaroon: \"800000\",\n\tmediumaquamarine: \"66cdaa\",\n\tmediumblue: \"0000cd\",\n\tmediumorchid: \"ba55d3\",\n\tmediumpurple: \"9370db\",\n\tmediumseagreen: \"3cb371\",\n\tmediumslateblue: \"7b68ee\",\n\tmediumspringgreen: \"00fa9a\",\n\tmediumturquoise: \"48d1cc\",\n\tmediumvioletred: \"c71585\",\n\tmidnightblue: \"191970\",\n\tmintcream: \"f5fffa\",\n\tmistyrose: \"ffe4e1\",\n\tmoccasin: \"ffe4b5\",\n\tnavajowhite: \"ffdead\",\n\tnavy: \"000080\",\n\toldlace: \"fdf5e6\",\n\tolive: \"808000\",\n\tolivedrab: \"6b8e23\",\n\torange: \"ffa500\",\n\torangered: \"ff4500\",\n\torchid: \"da70d6\",\n\tpalegoldenrod: \"eee8aa\",\n\tpalegreen: \"98fb98\",\n\tpaleturquoise: \"afeeee\",\n\tpalevioletred: \"db7093\",\n\tpapayawhip: \"ffefd5\",\n\tpeachpuff: \"ffdab9\",\n\tperu: \"cd853f\",\n\tpink: \"ffc0cb\",\n\tplum: \"dda0dd\",\n\tpowderblue: \"b0e0e6\",\n\tpurple: \"800080\",\n\tred: \"ff0000\",\n\trosybrown: \"bc8f8f\",\n\troyalblue: \"4169e1\",\n\tsaddlebrown: \"8b4513\",\n\tsalmon: \"fa8072\",\n\tsandybrown: \"f4a460\",\n\tseagreen: \"2e8b57\",\n\tseashell: \"fff5ee\",\n\tsienna: \"a0522d\",\n\tsilver: \"c0c0c0\",\n\tskyblue: \"87ceeb\",\n\tslateblue: \"6a5acd\",\n\tslategray: \"708090\",\n\tslategrey: \"708090\",\n\tsnow: \"fffafa\",\n\tspringgreen: \"00ff7f\",\n\tsteelblue: \"4682b4\",\n\ttan: \"d2b48c\",\n\tteal: \"008080\",\n\tthistle: \"d8bfd8\",\n\ttomato: \"ff6347\",\n\tturquoise: \"40e0d0\",\n\tviolet: \"ee82ee\",\n\twheat: \"f5deb3\",\n\twhite: \"ffffff\",\n\twhitesmoke: \"f5f5f5\",\n\tyellow: \"ffff00\",\n\tyellowgreen: \"9acd32\",\n\ttransparent: \"00000000\",\n};\n\nconst getRGBColor = color => {\n\tif (color.startsWith(\"rgba\")) {\n\t\treturn RGBAToRGB(color);\n\t}\n\n\tif (color.startsWith(\"rgb\")) {\n\t\treturn RGBToRGB(color);\n\t}\n\n\t// HEX\n\tif (color.indexOf(\"#\") === 0) {\n\t\t// Shorthand Syntax\n\t\tif (color.length === 4) {\n\t\t\tcolor = `${color[1]}${color[1]}${color[2]}${color[2]}${color[3]}${color[3]}`;\n\t\t} else {\n\t\t\tcolor = color.slice(1, color.length);\n\t\t}\n\t}\n\n\t// Css Color\n\tif (Object.keys(CSSColors).includes(color)) {\n\t\tcolor = CSSColors[color];\n\t}\n\n\treturn HEXToRGB(color);\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgba(0, 0, 0, 1)\n */\nconst RGBAToRGB = color => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, commasIndexes[2]).trim()),\n\t};\n};\n\n/**\n * Return an object with the properties for each of the main colors(red, green, blue)\n * @param {String} color Receives a color in the following format: \"rgb(0, 0, 0)\n */\nconst RGBToRGB = color => {\n\tconst openingBracketIndex = color.indexOf(\"(\"),\n\t\tclosingBraketIndex = color.indexOf(\")\"),\n\t\tcommasIndexes = [];\n\n\tfor (let i = 0; i < color.length; i++) {\n\t\tif (color[i] === \",\") {\n\t\t\tcommasIndexes.push(i);\n\t\t}\n\t}\n\n\treturn {\n\t\tr: parseInt(color.slice(openingBracketIndex + 1, commasIndexes[0]).trim()),\n\t\tg: parseInt(color.slice(commasIndexes[0] + 1, commasIndexes[1]).trim()),\n\t\tb: parseInt(color.slice(commasIndexes[1] + 1, closingBraketIndex).trim()),\n\t};\n};\n\nconst HSLToRGB = (color = {\n\th: undefined,\n\ts: undefined,\n\tl: undefined,\n}) => {\n\t// Formula taken from https://www.rapidtables.com/convert/color/hsl-to-rgb.html\n\tconst C = (1 - Math.abs((2 * color.l) - 1)) * color.s,\n\t\tX = C * (1 - Math.abs(((color.h / 60) % 2) - 1)),\n\t\tm = color.l - C / 2;\n\n\tlet tempColor = {};\n\tswitch (Math.round(color.h / 60)) {\n\t// 0 ≤ H < 60\n\tcase 0:\n\t\ttempColor = {\n\t\t\tr: C,\n\t\t\tg: X,\n\t\t\tb: 0,\n\t\t};\n\t\tbreak;\n\n\t// 60 ≤ H < 120\n\tcase 1:\n\t\ttempColor = {\n\t\t\tr: X,\n\t\t\tg: C,\n\t\t\tb: 0,\n\t\t};\n\t\tbreak;\n\n\t// 120 ≤ H < 180\n\tcase 2:\n\t\ttempColor = {\n\t\t\tr: 0,\n\t\t\tg: C,\n\t\t\tb: X,\n\t\t};\n\t\tbreak;\n\n\t// 180 ≤ H < 240\n\tcase 3:\n\t\ttempColor = {\n\t\t\tr: 0,\n\t\t\tg: X,\n\t\t\tb: C,\n\t\t};\n\t\tbreak;\n\n\t// 240 ≤ H < 300\n\tcase 4:\n\t\ttempColor = {\n\t\t\tr: X,\n\t\t\tg: 0,\n\t\t\tb: C,\n\t\t};\n\t\tbreak;\n\n\t// 300 ≤ H < 360\n\tdefault:\n\t\ttempColor = {\n\t\t\tr: C,\n\t\t\tg: 0,\n\t\t\tb: X,\n\t\t};\n\t}\n\n\treturn {\n\t\tr: Math.floor((tempColor.r + m) * 255),\n\t\tg: Math.floor((tempColor.g + m) * 255),\n\t\tb: Math.floor((tempColor.b + m) * 255),\n\t};\n};\n\nconst HEXToRGB = hex => {\n\t// Please make sure you pass a valid 6 digit hex color\n\t// In the implementation of this method we assume that the hex argument is a 6 digit valid hex color\n\n\tconst rgbValues = {\n\t\tr: hex.substr(0, 2),\n\t\tg: hex.substr(2, 2),\n\t\tb: hex.substr(4, 2),\n\t};\n\n\tconst rgbKeys = Object.keys(rgbValues);\n\n\trgbKeys.forEach(key => {\n\t\trgbValues[key] = parseInt(rgbValues[key], 16);\n\t});\n\n\treturn rgbValues;\n};\n\nconst RGBToHSL = (color = {\n\tr: undefined,\n\tg: undefined,\n\tb: undefined,\n}) => {\n\tconst R = color.r / 255,\n\t\tG = color.g / 255,\n\t\tB = color.b / 255,\n\t\tmax = Math.max(R, G, B),\n\t\tmin = Math.min(R, G, B),\n\t\tdelta = max - min;\n\n\tlet h,\n\t\ts;\n\n\t// Hue calculation\n\tif (delta === 0) {\n\t\th = 0;\n\t} else if (max === R) {\n\t\th = 60 * (((G - B) / delta) % 6);\n\t} else if (max === G) {\n\t\th = 60 * (((B - R) / delta) + 2);\n\t} else if (max === B) {\n\t\th = 60 * (((R - G) / delta) + 4);\n\t}\n\n\t// Lightness calculation\n\tconst l = (max + min) / 2;\n\n\t// Saturation calculation\n\tif (delta === 0) {\n\t\ts = 0;\n\t} else {\n\t\ts = delta / (1 - Math.abs(2 * l - 1));\n\t}\n\n\treturn {\n\t\th,\n\t\ts,\n\t\tl,\n\t};\n};\n\nexport {\n\tgetRGBColor,\n\tHSLToRGB,\n\tHEXToRGB,\n\tRGBToHSL,\n};\n"]},"metadata":{},"sourceType":"module"}