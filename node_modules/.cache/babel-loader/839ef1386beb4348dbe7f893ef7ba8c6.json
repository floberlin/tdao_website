{"ast":null,"code":"import _toConsumableArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport getLocale from \"../locale/getLocale.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage } from \"../config/Language.js\"; // contains package names for which the warning has been shown\n\nvar warningShown = new Set();\nvar reportedErrors = new Set();\nvar bundleData = new Map();\nvar bundlePromises = new Map();\nvar loaders = new Map();\n/**\n *\n * @param {string} packageName for which package this loader can fetch data\n * @param {function} loader async function that will be passed a localeId and should return a JSON object\n * @param {Array} localeIds Array of locale IDs that this loader can handle\n */\n\nvar registerI18nLoader = function registerI18nLoader(packageName, localeId, loader) {\n  // register loader by key\n  var bundleKey = \"\".concat(packageName, \"/\").concat(localeId);\n  loaders.set(bundleKey, loader);\n};\n\nvar _setI18nBundleData = function _setI18nBundleData(packageName, data) {\n  bundleData.set(packageName, data);\n};\n\nvar getI18nBundleData = function getI18nBundleData(packageName) {\n  return bundleData.get(packageName);\n};\n/**\n * @public\n * @deprecated\n */\n\n\nvar registerI18nBundle = function registerI18nBundle(_packageName, _bundle) {\n  throw new Error(\"This method has been removed. Use `registerI18nLoader` instead.\");\n};\n\nvar _hasLoader = function _hasLoader(packageName, localeId) {\n  var bundleKey = \"\".concat(packageName, \"/\").concat(localeId);\n  return loaders.has(bundleKey);\n}; // load bundle over the network once\n\n\nvar _loadMessageBundleOnce = function _loadMessageBundleOnce(packageName, localeId) {\n  var bundleKey = \"\".concat(packageName, \"/\").concat(localeId);\n  var loadMessageBundle = loaders.get(bundleKey);\n\n  if (!bundlePromises.get(bundleKey)) {\n    bundlePromises.set(bundleKey, loadMessageBundle(localeId));\n  }\n\n  return bundlePromises.get(bundleKey);\n};\n\nvar _showAssetsWarningOnce = function _showAssetsWarningOnce(packageName) {\n  if (!warningShown.has(packageName)) {\n    console.warn(\"[\".concat(packageName, \"]: Message bundle assets are not configured. Falling back to English texts.\"),\n    /* eslint-disable-line */\n    \" Add `import \\\"\".concat(packageName, \"/dist/Assets.js\\\"` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \\\"Assets\\\" in the documentation for more information.\"));\n    /* eslint-disable-line */\n\n    warningShown.add(packageName);\n  }\n};\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\n\n\nvar fetchI18nBundle = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(packageName) {\n    var language, region, localeId, fetchDefaultLanguage, data;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            language = getLocale().getLanguage();\n            region = getLocale().getRegion();\n            localeId = normalizeLocale(language + (region ? \"-\".concat(region) : \"\"));\n\n            while (localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId)) {\n              localeId = nextFallbackLocale(localeId);\n            } // use default language unless configured to always fetch it from the network\n\n\n            fetchDefaultLanguage = getFetchDefaultLanguage();\n\n            if (!(localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage)) {\n              _context.next = 8;\n              break;\n            }\n\n            _setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)\n\n\n            return _context.abrupt(\"return\");\n\n          case 8:\n            if (_hasLoader(packageName, localeId)) {\n              _context.next = 11;\n              break;\n            }\n\n            _showAssetsWarningOnce(packageName);\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            _context.prev = 11;\n            _context.next = 14;\n            return _loadMessageBundleOnce(packageName, localeId);\n\n          case 14:\n            data = _context.sent;\n\n            _setI18nBundleData(packageName, data);\n\n            _context.next = 21;\n            break;\n\n          case 18:\n            _context.prev = 18;\n            _context.t0 = _context[\"catch\"](11);\n\n            if (!reportedErrors.has(_context.t0.message)) {\n              reportedErrors.add(_context.t0.message);\n              console.error(_context.t0.message);\n              /* eslint-disable-line */\n            }\n\n          case 21:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[11, 18]]);\n  }));\n\n  return function fetchI18nBundle(_x) {\n    return _ref.apply(this, arguments);\n  };\n}(); // When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles\n\n\nattachLanguageChange(function () {\n  var allPackages = _toConsumableArray(bundleData.keys());\n\n  return Promise.all(allPackages.map(fetchI18nBundle));\n});\nexport { registerI18nLoader, fetchI18nBundle, registerI18nBundle, getI18nBundleData };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js"],"names":["getLocale","attachLanguageChange","normalizeLocale","nextFallbackLocale","DEFAULT_LANGUAGE","getFetchDefaultLanguage","warningShown","Set","reportedErrors","bundleData","Map","bundlePromises","loaders","registerI18nLoader","packageName","localeId","loader","bundleKey","set","_setI18nBundleData","data","getI18nBundleData","get","registerI18nBundle","_packageName","_bundle","Error","_hasLoader","has","_loadMessageBundleOnce","loadMessageBundle","_showAssetsWarningOnce","console","warn","add","fetchI18nBundle","language","getLanguage","region","getRegion","fetchDefaultLanguage","message","error","allPackages","keys","Promise","all","map"],"mappings":";;;AAAA,OAAOA,SAAP,MAAsB,wBAAtB;AACA,SAASC,oBAAT,QAAqC,6BAArC;AACA,OAAOC,eAAP,MAA4B,8BAA5B;AACA,OAAOC,kBAAP,MAA+B,iCAA/B;AACA,SAASC,gBAAT,QAAiC,iCAAjC;AACA,SAASC,uBAAT,QAAwC,uBAAxC,C,CAEA;;AACA,IAAMC,YAAY,GAAG,IAAIC,GAAJ,EAArB;AACA,IAAMC,cAAc,GAAG,IAAID,GAAJ,EAAvB;AAEA,IAAME,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,IAAMC,cAAc,GAAG,IAAID,GAAJ,EAAvB;AACA,IAAME,OAAO,GAAG,IAAIF,GAAJ,EAAhB;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,WAAD,EAAcC,QAAd,EAAwBC,MAAxB,EAAmC;AAC7D;AACA,MAAMC,SAAS,aAAMH,WAAN,cAAqBC,QAArB,CAAf;AACAH,EAAAA,OAAO,CAACM,GAAR,CAAYD,SAAZ,EAAuBD,MAAvB;AACA,CAJD;;AAMA,IAAMG,kBAAkB,GAAG,SAArBA,kBAAqB,CAACL,WAAD,EAAcM,IAAd,EAAuB;AACjDX,EAAAA,UAAU,CAACS,GAAX,CAAeJ,WAAf,EAA4BM,IAA5B;AACA,CAFD;;AAIA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAP,WAAW,EAAI;AACxC,SAAOL,UAAU,CAACa,GAAX,CAAeR,WAAf,CAAP;AACA,CAFD;AAIA;AACA;AACA;AACA;;;AACA,IAAMS,kBAAkB,GAAG,SAArBA,kBAAqB,CAACC,YAAD,EAAeC,OAAf,EAA2B;AACrD,QAAM,IAAIC,KAAJ,CAAU,iEAAV,CAAN;AACA,CAFD;;AAIA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACb,WAAD,EAAcC,QAAd,EAA2B;AAC7C,MAAME,SAAS,aAAMH,WAAN,cAAqBC,QAArB,CAAf;AACA,SAAOH,OAAO,CAACgB,GAAR,CAAYX,SAAZ,CAAP;AACA,CAHD,C,CAKA;;;AACA,IAAMY,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACf,WAAD,EAAcC,QAAd,EAA2B;AACzD,MAAME,SAAS,aAAMH,WAAN,cAAqBC,QAArB,CAAf;AACA,MAAMe,iBAAiB,GAAGlB,OAAO,CAACU,GAAR,CAAYL,SAAZ,CAA1B;;AAEA,MAAI,CAACN,cAAc,CAACW,GAAf,CAAmBL,SAAnB,CAAL,EAAoC;AACnCN,IAAAA,cAAc,CAACO,GAAf,CAAmBD,SAAnB,EAA8Ba,iBAAiB,CAACf,QAAD,CAA/C;AACA;;AAED,SAAOJ,cAAc,CAACW,GAAf,CAAmBL,SAAnB,CAAP;AACA,CATD;;AAWA,IAAMc,sBAAsB,GAAG,SAAzBA,sBAAyB,CAAAjB,WAAW,EAAI;AAC7C,MAAI,CAACR,YAAY,CAACsB,GAAb,CAAiBd,WAAjB,CAAL,EAAoC;AACnCkB,IAAAA,OAAO,CAACC,IAAR,YAAiBnB,WAAjB;AAA2G;AAA3G,6BACkBA,WADlB;AAC4M;;AAC5MR,IAAAA,YAAY,CAAC4B,GAAb,CAAiBpB,WAAjB;AACA;AACD,CAND;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMqB,eAAe;AAAA,sEAAG,iBAAMrB,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBsB,YAAAA,QADiB,GACNpC,SAAS,GAAGqC,WAAZ,EADM;AAEjBC,YAAAA,MAFiB,GAERtC,SAAS,GAAGuC,SAAZ,EAFQ;AAGnBxB,YAAAA,QAHmB,GAGRb,eAAe,CAACkC,QAAQ,IAAIE,MAAM,cAAOA,MAAP,MAAV,CAAT,CAHP;;AAKvB,mBAAOvB,QAAQ,KAAKX,gBAAb,IAAiC,CAACuB,UAAU,CAACb,WAAD,EAAcC,QAAd,CAAnD,EAA4E;AAC3EA,cAAAA,QAAQ,GAAGZ,kBAAkB,CAACY,QAAD,CAA7B;AACA,aAPsB,CASvB;;;AACMyB,YAAAA,oBAViB,GAUMnC,uBAAuB,EAV7B;;AAAA,kBAWnBU,QAAQ,KAAKX,gBAAb,IAAiC,CAACoC,oBAXf;AAAA;AAAA;AAAA;;AAYtBrB,YAAAA,kBAAkB,CAACL,WAAD,EAAc,IAAd,CAAlB,CAZsB,CAYiB;;;AAZjB;;AAAA;AAAA,gBAgBlBa,UAAU,CAACb,WAAD,EAAcC,QAAd,CAhBQ;AAAA;AAAA;AAAA;;AAiBtBgB,YAAAA,sBAAsB,CAACjB,WAAD,CAAtB;;AAjBsB;;AAAA;AAAA;AAAA;AAAA,mBAsBHe,sBAAsB,CAACf,WAAD,EAAcC,QAAd,CAtBnB;;AAAA;AAsBhBK,YAAAA,IAtBgB;;AAuBtBD,YAAAA,kBAAkB,CAACL,WAAD,EAAcM,IAAd,CAAlB;;AAvBsB;AAAA;;AAAA;AAAA;AAAA;;AAyBtB,gBAAI,CAACZ,cAAc,CAACoB,GAAf,CAAmB,YAAEa,OAArB,CAAL,EAAoC;AACnCjC,cAAAA,cAAc,CAAC0B,GAAf,CAAmB,YAAEO,OAArB;AACAT,cAAAA,OAAO,CAACU,KAAR,CAAc,YAAED,OAAhB;AAA0B;AAC1B;;AA5BqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAfN,eAAe;AAAA;AAAA;AAAA,GAArB,C,CAgCA;;;AACAlC,oBAAoB,CAAC,YAAM;AAC1B,MAAM0C,WAAW,sBAAOlC,UAAU,CAACmC,IAAX,EAAP,CAAjB;;AACA,SAAOC,OAAO,CAACC,GAAR,CAAYH,WAAW,CAACI,GAAZ,CAAgBZ,eAAhB,CAAZ,CAAP;AACA,CAHmB,CAApB;AAKA,SACCtB,kBADD,EAECsB,eAFD,EAGCZ,kBAHD,EAICF,iBAJD","sourcesContent":["import getLocale from \"../locale/getLocale.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage } from \"../config/Language.js\";\n\n// contains package names for which the warning has been shown\nconst warningShown = new Set();\nconst reportedErrors = new Set();\n\nconst bundleData = new Map();\nconst bundlePromises = new Map();\nconst loaders = new Map();\n\n/**\n *\n * @param {string} packageName for which package this loader can fetch data\n * @param {function} loader async function that will be passed a localeId and should return a JSON object\n * @param {Array} localeIds Array of locale IDs that this loader can handle\n */\nconst registerI18nLoader = (packageName, localeId, loader) => {\n\t// register loader by key\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tloaders.set(bundleKey, loader);\n};\n\nconst _setI18nBundleData = (packageName, data) => {\n\tbundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n\treturn bundleData.get(packageName);\n};\n\n/**\n * @public\n * @deprecated\n */\nconst registerI18nBundle = (_packageName, _bundle) => {\n\tthrow new Error(\"This method has been removed. Use `registerI18nLoader` instead.\");\n};\n\nconst _hasLoader = (packageName, localeId) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\treturn loaders.has(bundleKey);\n};\n\n// load bundle over the network once\nconst _loadMessageBundleOnce = (packageName, localeId) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tconst loadMessageBundle = loaders.get(bundleKey);\n\n\tif (!bundlePromises.get(bundleKey)) {\n\t\tbundlePromises.set(bundleKey, loadMessageBundle(localeId));\n\t}\n\n\treturn bundlePromises.get(bundleKey);\n};\n\nconst _showAssetsWarningOnce = packageName => {\n\tif (!warningShown.has(packageName)) {\n\t\tconsole.warn(`[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */\n\t\t` Add \\`import \"${packageName}/dist/Assets.js\"\\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \"Assets\" in the documentation for more information.`); /* eslint-disable-line */\n\t\twarningShown.add(packageName);\n\t}\n};\n\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\nconst fetchI18nBundle = async packageName => {\n\tconst language = getLocale().getLanguage();\n\tconst region = getLocale().getRegion();\n\tlet localeId = normalizeLocale(language + (region ? `-${region}` : ``));\n\n\twhile (localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId)) {\n\t\tlocaleId = nextFallbackLocale(localeId);\n\t}\n\n\t// use default language unless configured to always fetch it from the network\n\tconst fetchDefaultLanguage = getFetchDefaultLanguage();\n\tif (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage) {\n\t\t_setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)\n\t\treturn;\n\t}\n\n\tif (!_hasLoader(packageName, localeId)) {\n\t\t_showAssetsWarningOnce(packageName);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst data = await _loadMessageBundleOnce(packageName, localeId);\n\t\t_setI18nBundleData(packageName, data);\n\t} catch (e) {\n\t\tif (!reportedErrors.has(e.message)) {\n\t\t\treportedErrors.add(e.message);\n\t\t\tconsole.error(e.message); /* eslint-disable-line */\n\t\t}\n\t}\n};\n\n// When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles\nattachLanguageChange(() => {\n\tconst allPackages = [...bundleData.keys()];\n\treturn Promise.all(allPackages.map(fetchI18nBundle));\n});\n\nexport {\n\tregisterI18nLoader,\n\tfetchI18nBundle,\n\tregisterI18nBundle,\n\tgetI18nBundleData,\n};\n"]},"metadata":{},"sourceType":"module"}