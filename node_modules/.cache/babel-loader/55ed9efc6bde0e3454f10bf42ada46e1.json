{"ast":null,"code":"import assert from '../assert.js';\nvar rMessageFormat = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\\{([0-9]+(?:\\s*,[^{}]*)?)\\}|[{}]/g;\n\nvar fnFormatMessage = function (sPattern, aValues) {\n  assert(typeof sPattern === 'string' || sPattern instanceof String, 'pattern must be string');\n\n  if (arguments.length > 2 || aValues != null && !Array.isArray(aValues)) {\n    aValues = Array.prototype.slice.call(arguments, 1);\n  }\n\n  aValues = aValues || [];\n  return sPattern.replace(rMessageFormat, function ($0, $1, $2, $3, offset) {\n    if ($1) {\n      return '\\'';\n    } else if ($2) {\n      return $2.replace(/''/g, '\\'');\n    } else if ($3) {\n      return String(aValues[parseInt($3)]);\n    }\n\n    throw new Error('formatMessage: pattern syntax error at pos. ' + offset);\n  });\n};\n\nexport default fnFormatMessage;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-localization/dist/sap/base/strings/formatMessage.js"],"names":["assert","rMessageFormat","fnFormatMessage","sPattern","aValues","String","arguments","length","Array","isArray","prototype","slice","call","replace","$0","$1","$2","$3","offset","parseInt","Error"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,cAAnB;AACA,IAAIC,cAAc,GAAG,oEAArB;;AACA,IAAIC,eAAe,GAAG,UAAUC,QAAV,EAAoBC,OAApB,EAA6B;AAC/CJ,EAAAA,MAAM,CAAC,OAAOG,QAAP,KAAoB,QAApB,IAAgCA,QAAQ,YAAYE,MAArD,EAA6D,wBAA7D,CAAN;;AACA,MAAIC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBH,OAAO,IAAI,IAAX,IAAmB,CAACI,KAAK,CAACC,OAAN,CAAcL,OAAd,CAAhD,EAAwE;AACpEA,IAAAA,OAAO,GAAGI,KAAK,CAACE,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BN,SAA3B,EAAsC,CAAtC,CAAV;AACH;;AACDF,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,SAAOD,QAAQ,CAACU,OAAT,CAAiBZ,cAAjB,EAAiC,UAAUa,EAAV,EAAcC,EAAd,EAAkBC,EAAlB,EAAsBC,EAAtB,EAA0BC,MAA1B,EAAkC;AACtE,QAAIH,EAAJ,EAAQ;AACJ,aAAO,IAAP;AACH,KAFD,MAEO,IAAIC,EAAJ,EAAQ;AACX,aAAOA,EAAE,CAACH,OAAH,CAAW,KAAX,EAAkB,IAAlB,CAAP;AACH,KAFM,MAEA,IAAII,EAAJ,EAAQ;AACX,aAAOZ,MAAM,CAACD,OAAO,CAACe,QAAQ,CAACF,EAAD,CAAT,CAAR,CAAb;AACH;;AACD,UAAM,IAAIG,KAAJ,CAAU,iDAAiDF,MAA3D,CAAN;AACH,GATM,CAAP;AAUH,CAhBD;;AAiBA,eAAehB,eAAf","sourcesContent":["import assert from '../assert.js';\nvar rMessageFormat = /('')|'([^']+(?:''[^']*)*)(?:'|$)|\\{([0-9]+(?:\\s*,[^{}]*)?)\\}|[{}]/g;\nvar fnFormatMessage = function (sPattern, aValues) {\n    assert(typeof sPattern === 'string' || sPattern instanceof String, 'pattern must be string');\n    if (arguments.length > 2 || aValues != null && !Array.isArray(aValues)) {\n        aValues = Array.prototype.slice.call(arguments, 1);\n    }\n    aValues = aValues || [];\n    return sPattern.replace(rMessageFormat, function ($0, $1, $2, $3, offset) {\n        if ($1) {\n            return '\\'';\n        } else if ($2) {\n            return $2.replace(/''/g, '\\'');\n        } else if ($3) {\n            return String(aValues[parseInt($3)]);\n        }\n        throw new Error('formatMessage: pattern syntax error at pos. ' + offset);\n    });\n};\nexport default fnFormatMessage;"]},"metadata":{},"sourceType":"module"}