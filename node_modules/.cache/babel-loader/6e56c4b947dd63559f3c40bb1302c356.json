{"ast":null,"code":"class RadioButtonGroup {\n  static hasGroup(groupName) {\n    return this.groups.has(groupName);\n  }\n\n  static getGroup(groupName) {\n    return this.groups.get(groupName);\n  }\n\n  static getCheckedRadioFromGroup(groupName) {\n    return this.checkedRadios.get(groupName);\n  }\n\n  static removeGroup(groupName) {\n    this.checkedRadios.delete(groupName);\n    return this.groups.delete(groupName);\n  }\n\n  static addToGroup(radioBtn, groupName) {\n    if (this.hasGroup(groupName)) {\n      this.enforceSingleSelection(radioBtn, groupName);\n      this.getGroup(groupName).push(radioBtn);\n    } else {\n      this.createGroup(radioBtn, groupName);\n    }\n\n    this.updateTabOrder(groupName);\n  }\n\n  static removeFromGroup(radioBtn, groupName) {\n    if (!this.hasGroup(groupName)) {\n      return;\n    }\n\n    const group = this.getGroup(groupName);\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName); // Remove the radio button from the given group\n\n    group.forEach((_radioBtn, idx, arr) => {\n      if (radioBtn._id === _radioBtn._id) {\n        return arr.splice(idx, 1);\n      }\n    });\n\n    if (checkedRadio === radioBtn) {\n      this.checkedRadios.set(groupName, null);\n    } // Remove the group if it is empty\n\n\n    if (!group.length) {\n      this.removeGroup(groupName);\n    }\n\n    this.updateTabOrder(groupName);\n  }\n\n  static createGroup(radioBtn, groupName) {\n    if (radioBtn.checked) {\n      this.checkedRadios.set(groupName, radioBtn);\n    }\n\n    this.groups.set(groupName, [radioBtn]);\n  }\n\n  static selectNextItem(item, groupName) {\n    const group = this.getGroup(groupName),\n          groupLength = group.length,\n          currentItemPosition = group.indexOf(item);\n\n    if (groupLength <= 1) {\n      return;\n    }\n\n    const nextItemToSelect = this._nextSelectable(currentItemPosition, group);\n\n    this.updateSelectionInGroup(nextItemToSelect, groupName);\n  }\n\n  static updateTabOrder(groupName) {\n    if (!this.hasGroup(groupName)) {\n      return;\n    }\n\n    const group = this.getGroup(groupName);\n    const hasCheckedRadio = group.some(radioBtn => radioBtn.checked);\n    group.filter(radioBtn => !radioBtn.disabled).forEach((radioBtn, idx) => {\n      if (hasCheckedRadio) {\n        radioBtn._tabIndex = radioBtn.checked ? \"0\" : \"-1\";\n      } else {\n        radioBtn._tabIndex = idx === 0 ? \"0\" : \"-1\";\n      }\n    });\n  }\n\n  static selectPreviousItem(item, groupName) {\n    const group = this.getGroup(groupName),\n          groupLength = group.length,\n          currentItemPosition = group.indexOf(item);\n\n    if (groupLength <= 1) {\n      return;\n    }\n\n    const previousItemToSelect = this._previousSelectable(currentItemPosition, group);\n\n    this.updateSelectionInGroup(previousItemToSelect, groupName);\n  }\n\n  static selectItem(item, groupName) {\n    this.updateSelectionInGroup(item, groupName);\n    this.updateTabOrder(groupName);\n  }\n\n  static updateSelectionInGroup(radioBtnToSelect, groupName) {\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n    this._deselectRadio(checkedRadio);\n\n    this._selectRadio(radioBtnToSelect);\n\n    this.checkedRadios.set(groupName, radioBtnToSelect);\n  }\n\n  static _deselectRadio(radioBtn) {\n    if (radioBtn) {\n      radioBtn.checked = false;\n    }\n  }\n\n  static _selectRadio(radioBtn) {\n    if (radioBtn) {\n      radioBtn.focus();\n      radioBtn.checked = true;\n      radioBtn._checked = true;\n      radioBtn.fireEvent(\"change\");\n    }\n  }\n\n  static _nextSelectable(pos, group) {\n    const groupLength = group.length;\n    let nextRadioToSelect = null;\n\n    if (pos === groupLength - 1) {\n      if (group[0].disabled || group[0].readonly) {\n        return this._nextSelectable(1, group);\n      }\n\n      nextRadioToSelect = group[0];\n    } else if (group[pos + 1].disabled || group[pos + 1].readonly) {\n      return this._nextSelectable(pos + 1, group);\n    } else {\n      nextRadioToSelect = group[pos + 1];\n    }\n\n    return nextRadioToSelect;\n  }\n\n  static _previousSelectable(pos, group) {\n    const groupLength = group.length;\n    let previousRadioToSelect = null;\n\n    if (pos === 0) {\n      if (group[groupLength - 1].disabled || group[groupLength - 1].readonly) {\n        return this._previousSelectable(groupLength - 1, group);\n      }\n\n      previousRadioToSelect = group[groupLength - 1];\n    } else if (group[pos - 1].disabled || group[pos - 1].readonly) {\n      return this._previousSelectable(pos - 1, group);\n    } else {\n      previousRadioToSelect = group[pos - 1];\n    }\n\n    return previousRadioToSelect;\n  }\n\n  static enforceSingleSelection(radioBtn, groupName) {\n    const checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n    if (radioBtn.checked) {\n      if (!checkedRadio) {\n        this.checkedRadios.set(groupName, radioBtn);\n      } else if (radioBtn !== checkedRadio) {\n        this._deselectRadio(checkedRadio);\n\n        this.checkedRadios.set(groupName, radioBtn);\n      }\n    } else if (radioBtn === checkedRadio) {\n      this.checkedRadios.set(groupName, null);\n    }\n\n    this.updateTabOrder(groupName);\n  }\n\n  static get groups() {\n    if (!this._groups) {\n      this._groups = new Map();\n    }\n\n    return this._groups;\n  }\n\n  static get checkedRadios() {\n    if (!this._checkedRadios) {\n      this._checkedRadios = new Map();\n    }\n\n    return this._checkedRadios;\n  }\n\n}\n\nexport default RadioButtonGroup;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/RadioButtonGroup.js"],"names":["RadioButtonGroup","hasGroup","groupName","groups","has","getGroup","get","getCheckedRadioFromGroup","checkedRadios","removeGroup","delete","addToGroup","radioBtn","enforceSingleSelection","push","createGroup","updateTabOrder","removeFromGroup","group","checkedRadio","forEach","_radioBtn","idx","arr","_id","splice","set","length","checked","selectNextItem","item","groupLength","currentItemPosition","indexOf","nextItemToSelect","_nextSelectable","updateSelectionInGroup","hasCheckedRadio","some","filter","disabled","_tabIndex","selectPreviousItem","previousItemToSelect","_previousSelectable","selectItem","radioBtnToSelect","_deselectRadio","_selectRadio","focus","_checked","fireEvent","pos","nextRadioToSelect","readonly","previousRadioToSelect","_groups","Map","_checkedRadios"],"mappings":"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","sourcesContent":["class RadioButtonGroup {\n\tstatic hasGroup(groupName) {\n\t\treturn this.groups.has(groupName);\n\t}\n\n\tstatic getGroup(groupName) {\n\t\treturn this.groups.get(groupName);\n\t}\n\n\tstatic getCheckedRadioFromGroup(groupName) {\n\t\treturn this.checkedRadios.get(groupName);\n\t}\n\n\tstatic removeGroup(groupName) {\n\t\tthis.checkedRadios.delete(groupName);\n\t\treturn this.groups.delete(groupName);\n\t}\n\n\tstatic addToGroup(radioBtn, groupName) {\n\t\tif (this.hasGroup(groupName)) {\n\t\t\tthis.enforceSingleSelection(radioBtn, groupName);\n\t\t\tthis.getGroup(groupName).push(radioBtn);\n\t\t} else {\n\t\t\tthis.createGroup(radioBtn, groupName);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic removeFromGroup(radioBtn, groupName) {\n\t\tif (!this.hasGroup(groupName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this.getGroup(groupName);\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\t// Remove the radio button from the given group\n\t\tgroup.forEach((_radioBtn, idx, arr) => {\n\t\t\tif (radioBtn._id === _radioBtn._id) {\n\t\t\t\treturn arr.splice(idx, 1);\n\t\t\t}\n\t\t});\n\n\t\tif (checkedRadio === radioBtn) {\n\t\t\tthis.checkedRadios.set(groupName, null);\n\t\t}\n\n\t\t// Remove the group if it is empty\n\t\tif (!group.length) {\n\t\t\tthis.removeGroup(groupName);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic createGroup(radioBtn, groupName) {\n\t\tif (radioBtn.checked) {\n\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t}\n\n\t\tthis.groups.set(groupName, [radioBtn]);\n\t}\n\n\tstatic selectNextItem(item, groupName) {\n\t\tconst group = this.getGroup(groupName),\n\t\t\tgroupLength = group.length,\n\t\t\tcurrentItemPosition = group.indexOf(item);\n\n\t\tif (groupLength <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst nextItemToSelect = this._nextSelectable(currentItemPosition, group);\n\n\t\tthis.updateSelectionInGroup(nextItemToSelect, groupName);\n\t}\n\n\tstatic updateTabOrder(groupName) {\n\t\tif (!this.hasGroup(groupName)) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst group = this.getGroup(groupName);\n\t\tconst hasCheckedRadio = group.some(radioBtn => radioBtn.checked);\n\n\t\tgroup.filter(radioBtn => !radioBtn.disabled).forEach((radioBtn, idx) => {\n\t\t\tif (hasCheckedRadio) {\n\t\t\t\tradioBtn._tabIndex = radioBtn.checked ? \"0\" : \"-1\";\n\t\t\t} else {\n\t\t\t\tradioBtn._tabIndex = idx === 0 ? \"0\" : \"-1\";\n\t\t\t}\n\t\t});\n\t}\n\n\tstatic selectPreviousItem(item, groupName) {\n\t\tconst group = this.getGroup(groupName),\n\t\t\tgroupLength = group.length,\n\t\t\tcurrentItemPosition = group.indexOf(item);\n\n\t\tif (groupLength <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst previousItemToSelect = this._previousSelectable(currentItemPosition, group);\n\n\t\tthis.updateSelectionInGroup(previousItemToSelect, groupName);\n\t}\n\n\tstatic selectItem(item, groupName) {\n\t\tthis.updateSelectionInGroup(item, groupName);\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic updateSelectionInGroup(radioBtnToSelect, groupName) {\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\tthis._deselectRadio(checkedRadio);\n\t\tthis._selectRadio(radioBtnToSelect);\n\t\tthis.checkedRadios.set(groupName, radioBtnToSelect);\n\t}\n\n\tstatic _deselectRadio(radioBtn) {\n\t\tif (radioBtn) {\n\t\t\tradioBtn.checked = false;\n\t\t}\n\t}\n\n\tstatic _selectRadio(radioBtn) {\n\t\tif (radioBtn) {\n\t\t\tradioBtn.focus();\n\t\t\tradioBtn.checked = true;\n\t\t\tradioBtn._checked = true;\n\t\t\tradioBtn.fireEvent(\"change\");\n\t\t}\n\t}\n\n\tstatic _nextSelectable(pos, group) {\n\t\tconst groupLength = group.length;\n\t\tlet nextRadioToSelect = null;\n\n\t\tif (pos === groupLength - 1) {\n\t\t\tif (group[0].disabled || group[0].readonly) {\n\t\t\t\treturn this._nextSelectable(1, group);\n\t\t\t}\n\t\t\tnextRadioToSelect = group[0];\n\t\t} else if (group[pos + 1].disabled || group[pos + 1].readonly) {\n\t\t\treturn this._nextSelectable(pos + 1, group);\n\t\t} else {\n\t\t\tnextRadioToSelect = group[pos + 1];\n\t\t}\n\n\t\treturn nextRadioToSelect;\n\t}\n\n\tstatic _previousSelectable(pos, group) {\n\t\tconst groupLength = group.length;\n\t\tlet previousRadioToSelect = null;\n\t\tif (pos === 0) {\n\t\t\tif (group[groupLength - 1].disabled || group[groupLength - 1].readonly) {\n\t\t\t\treturn this._previousSelectable(groupLength - 1, group);\n\t\t\t}\n\t\t\tpreviousRadioToSelect = group[groupLength - 1];\n\t\t} else if (group[pos - 1].disabled || group[pos - 1].readonly) {\n\t\t\treturn this._previousSelectable(pos - 1, group);\n\t\t} else {\n\t\t\tpreviousRadioToSelect = group[pos - 1];\n\t\t}\n\n\t\treturn previousRadioToSelect;\n\t}\n\n\tstatic enforceSingleSelection(radioBtn, groupName) {\n\t\tconst checkedRadio = this.getCheckedRadioFromGroup(groupName);\n\n\t\tif (radioBtn.checked) {\n\t\t\tif (!checkedRadio) {\n\t\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t\t} else if (radioBtn !== checkedRadio) {\n\t\t\t\tthis._deselectRadio(checkedRadio);\n\t\t\t\tthis.checkedRadios.set(groupName, radioBtn);\n\t\t\t}\n\t\t} else if (radioBtn === checkedRadio) {\n\t\t\tthis.checkedRadios.set(groupName, null);\n\t\t}\n\n\t\tthis.updateTabOrder(groupName);\n\t}\n\n\tstatic get groups() {\n\t\tif (!this._groups) {\n\t\t\tthis._groups = new Map();\n\t\t}\n\t\treturn this._groups;\n\t}\n\n\tstatic get checkedRadios() {\n\t\tif (!this._checkedRadios) {\n\t\t\tthis._checkedRadios = new Map();\n\t\t}\n\t\treturn this._checkedRadios;\n\t}\n}\n\nexport default RadioButtonGroup;\n"]},"metadata":{},"sourceType":"module"}