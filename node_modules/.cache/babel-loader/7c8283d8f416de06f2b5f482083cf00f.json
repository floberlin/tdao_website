{"ast":null,"code":"var generateTimeItemsArray = function generateTimeItemsArray(x) {\n  var step = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var array = [];\n\n  for (var i = 0; i < x; i++) {\n    if (i % step === 0) {\n      var tempString = i.toString();\n\n      if (tempString.length === 1) {\n        tempString = \"0\".concat(tempString);\n      }\n\n      array.push(tempString);\n    }\n  }\n\n  return array;\n};\n\nvar getHours = function getHours(config, max) {\n  var hoursValueArray = [];\n\n  if (config.isTwelveHoursFormat) {\n    hoursValueArray = generateTimeItemsArray(max || 12, 1);\n  } else {\n    hoursValueArray = generateTimeItemsArray(max || 24, 1);\n  }\n\n  if (config.minHour === 1) {\n    for (var i = 0; i < hoursValueArray.length; i++) {\n      var tempValue = hoursValueArray[i] * 1 + 1;\n\n      if (tempValue.toString().length === 1) {\n        hoursValueArray[i] = \"0\".concat(tempValue.toString());\n      } else {\n        hoursValueArray[i] = tempValue.toString();\n      }\n    }\n  }\n\n  return hoursValueArray;\n};\n\nvar getMinutes = function getMinutes(max, step) {\n  return generateTimeItemsArray(max || 60, step);\n};\n\nvar getSeconds = function getSeconds(max, step) {\n  return generateTimeItemsArray(max || 60, step);\n};\n\nvar getHoursConfigByFormat = function getHoursConfigByFormat(type) {\n  var config = {};\n\n  if (type === \"hour0_23\") {\n    config.minHour = 0;\n    config.maxHour = 23;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour1_24\") {\n    config.minHour = 1;\n    config.maxHour = 24;\n    config.isTwelveHoursFormat = false;\n  } else if (type === \"hour0_11\") {\n    config.minHour = 0;\n    config.maxHour = 11;\n    config.isTwelveHoursFormat = true;\n  } else if (type === \"hour1_12\") {\n    config.minHour = 1;\n    config.maxHour = 12;\n    config.isTwelveHoursFormat = true;\n  }\n\n  return config;\n};\n\nvar getTimeControlsByFormat = function getTimeControlsByFormat(formatArray, hoursConfig) {\n  var timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n\n  for (var i = 0; i < formatArray.length; i++) {\n    if (hoursConfig.maxHour !== 0) {\n      timeControls[0] = true;\n    }\n\n    if (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n      timeControls[0] = true;\n    }\n\n    if (formatArray[i].type === \"minute\") {\n      timeControls[1] = true;\n    }\n\n    if (formatArray[i].type === \"second\") {\n      timeControls[2] = true;\n    }\n\n    if (formatArray[i].type === \"amPmMarker\") {\n      timeControls[3] = true;\n    }\n  }\n\n  return timeControls;\n};\n\nexport { getHours, getMinutes, getSeconds, getHoursConfigByFormat, getTimeControlsByFormat };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/timepicker-utils/TimeSlider.js"],"names":["generateTimeItemsArray","x","step","array","i","tempString","toString","length","push","getHours","config","max","hoursValueArray","isTwelveHoursFormat","minHour","tempValue","getMinutes","getSeconds","getHoursConfigByFormat","type","maxHour","getTimeControlsByFormat","formatArray","hoursConfig","timeControls"],"mappings":"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","sourcesContent":["const generateTimeItemsArray = (x, step = 1) => {\n\tconst array = [];\n\tfor (let i = 0; i < x; i++) {\n\t\tif (i % step === 0) {\n\t\t\tlet tempString = i.toString();\n\t\t\tif (tempString.length === 1) {\n\t\t\t\ttempString = `0${tempString}`;\n\t\t\t}\n\n\t\t\tarray.push(tempString);\n\t\t}\n\t}\n\n\treturn array;\n};\n\nconst getHours = (config, max) => {\n\tlet hoursValueArray = [];\n\n\tif (config.isTwelveHoursFormat) {\n\t\thoursValueArray = generateTimeItemsArray(max || 12, 1);\n\t} else {\n\t\thoursValueArray = generateTimeItemsArray(max || 24, 1);\n\t}\n\n\tif (config.minHour === 1) {\n\t\tfor (let i = 0; i < hoursValueArray.length; i++) {\n\t\t\tconst tempValue = hoursValueArray[i] * 1 + 1;\n\n\t\t\tif (tempValue.toString().length === 1) {\n\t\t\t\thoursValueArray[i] = `0${tempValue.toString()}`;\n\t\t\t} else {\n\t\t\t\thoursValueArray[i] = tempValue.toString();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn hoursValueArray;\n};\n\nconst getMinutes = (max, step) => {\n\treturn generateTimeItemsArray(max || 60, step);\n};\n\nconst getSeconds = (max, step) => {\n\treturn generateTimeItemsArray(max || 60, step);\n};\n\nconst getHoursConfigByFormat = type => {\n\tconst config = {};\n\n\tif (type === \"hour0_23\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 23;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour1_24\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 24;\n\t\tconfig.isTwelveHoursFormat = false;\n\t} else if (type === \"hour0_11\") {\n\t\tconfig.minHour = 0;\n\t\tconfig.maxHour = 11;\n\t\tconfig.isTwelveHoursFormat = true;\n\t} else if (type === \"hour1_12\") {\n\t\tconfig.minHour = 1;\n\t\tconfig.maxHour = 12;\n\t\tconfig.isTwelveHoursFormat = true;\n\t}\n\n\treturn config;\n};\n\nconst getTimeControlsByFormat = (formatArray, hoursConfig) => {\n\tconst timeControls = [false, false, false, false]; // hours, minutes, seconds and am/pm\n\n\tfor (let i = 0; i < formatArray.length; i++) {\n\t\tif (hoursConfig.maxHour !== 0) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (hoursConfig.maxHour !== 0 && hoursConfig.isTwelveHoursFormat) {\n\t\t\ttimeControls[0] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"minute\") {\n\t\t\ttimeControls[1] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"second\") {\n\t\t\ttimeControls[2] = true;\n\t\t}\n\t\tif (formatArray[i].type === \"amPmMarker\") {\n\t\t\ttimeControls[3] = true;\n\t\t}\n\t}\n\n\treturn timeControls;\n};\n\nexport {\n\tgetHours,\n\tgetMinutes,\n\tgetSeconds,\n\tgetHoursConfigByFormat,\n\tgetTimeControlsByFormat,\n};\n"]},"metadata":{},"sourceType":"module"}