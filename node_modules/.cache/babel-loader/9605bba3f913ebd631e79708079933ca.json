{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar fromString = require('uint8arrays/from-string');\n\nvar responseTypes = require('./response-types.js');\n\nvar multiaddr = require('multiaddr');\n\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({\n        ID,\n        Addrs\n      }) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(({\n      ID\n    }) => ID);\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/ipfs-http-client/cjs/src/dht/map-event.js"],"names":["Object","defineProperty","exports","value","fromString","require","responseTypes","multiaddr","mapEvent","event","Type","SendingQuery","to","ID","name","type","PeerResponse","from","messageType","messageName","closer","Responses","map","Addrs","id","multiaddrs","addr","Multiaddr","providers","FinalPeer","peer","length","QueryError","error","Error","Extra","Provider","Value","AddingPeer","peers","DialingPeer"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar fromString = require('uint8arrays/from-string');\nvar responseTypes = require('./response-types.js');\nvar multiaddr = require('multiaddr');\n\nconst mapEvent = event => {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      })),\n      providers: (event.Responses || []).map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.FinalPeer) {\n    let peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      };\n    }\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer\n    };\n  }\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(({ID, Addrs}) => ({\n        id: ID,\n        multiaddrs: Addrs.map(addr => new multiaddr.Multiaddr(addr))\n      }))\n    };\n  }\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n  if (event.Type === responseTypes.AddingPeer) {\n    const peers = event.Responses.map(({ID}) => ID);\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;\n"]},"metadata":{},"sourceType":"script"}