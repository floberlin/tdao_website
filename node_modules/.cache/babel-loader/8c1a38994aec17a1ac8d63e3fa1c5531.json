{"ast":null,"code":"/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n// package com.google.zxing.aztec;\n// import com.google.zxing.BarcodeFormat;\nimport BarcodeFormat from '../BarcodeFormat'; // import com.google.zxing.EncodeHintType;\n\nimport EncodeHintType from '../EncodeHintType'; // import com.google.zxing.aztec.encoder.Encoder;\n\nimport Encoder from './encoder/Encoder'; // import com.google.zxing.common.BitMatrix;\n\nimport BitMatrix from '../common/BitMatrix'; // import java.nio.charset.Charset;\n\nimport Charset from '../util/Charset'; // import java.nio.charset.StandardCharsets;\n\nimport StandardCharsets from '../util/StandardCharsets'; // import java.util.Map;\n\nimport Integer from '../util/Integer';\nimport IllegalStateException from '../IllegalStateException';\nimport IllegalArgumentException from '../IllegalArgumentException';\nimport StringUtils from '../common/StringUtils';\n/**\n * Renders an Aztec code as a {@link BitMatrix}.\n */\n\nvar AztecWriter = function () {\n  function AztecWriter() {} // @Override\n\n\n  AztecWriter.prototype.encode = function (contents, format, width, height) {\n    return this.encodeWithHints(contents, format, width, height, null);\n  }; // @Override\n\n\n  AztecWriter.prototype.encodeWithHints = function (contents, format, width, height, hints) {\n    var charset = StandardCharsets.ISO_8859_1;\n    var eccPercent = Encoder.DEFAULT_EC_PERCENT;\n    var layers = Encoder.DEFAULT_AZTEC_LAYERS;\n\n    if (hints != null) {\n      if (hints.has(EncodeHintType.CHARACTER_SET)) {\n        charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());\n      }\n\n      if (hints.has(EncodeHintType.ERROR_CORRECTION)) {\n        eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\n      }\n\n      if (hints.has(EncodeHintType.AZTEC_LAYERS)) {\n        layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());\n      }\n    }\n\n    return AztecWriter.encodeLayers(contents, format, width, height, charset, eccPercent, layers);\n  };\n\n  AztecWriter.encodeLayers = function (contents, format, width, height, charset, eccPercent, layers) {\n    if (format !== BarcodeFormat.AZTEC) {\n      throw new IllegalArgumentException('Can only encode AZTEC, but got ' + format);\n    }\n\n    var aztec = Encoder.encode(StringUtils.getBytes(contents, charset), eccPercent, layers);\n    return AztecWriter.renderResult(aztec, width, height);\n  };\n\n  AztecWriter.renderResult = function (code, width, height) {\n    var input = code.getMatrix();\n\n    if (input == null) {\n      throw new IllegalStateException();\n    }\n\n    var inputWidth = input.getWidth();\n    var inputHeight = input.getHeight();\n    var outputWidth = Math.max(width, inputWidth);\n    var outputHeight = Math.max(height, inputHeight);\n    var multiple = Math.min(outputWidth / inputWidth, outputHeight / inputHeight);\n    var leftPadding = (outputWidth - inputWidth * multiple) / 2;\n    var topPadding = (outputHeight - inputHeight * multiple) / 2;\n    var output = new BitMatrix(outputWidth, outputHeight);\n\n    for (var inputY\n    /*int*/\n    = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n      // Write the contents of this row of the barcode\n      for (var inputX\n      /*int*/\n      = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n        if (input.get(inputX, inputY)) {\n          output.setRegion(outputX, outputY, multiple, multiple);\n        }\n      }\n    }\n\n    return output;\n  };\n\n  return AztecWriter;\n}();\n\nexport default AztecWriter;","map":{"version":3,"sources":["../../../../src/core/aztec/AztecWriter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n* Copyright 2013 ZXing authors\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*      http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n// package com.google.zxing.aztec;\n// import com.google.zxing.BarcodeFormat;\nimport BarcodeFormat from '../BarcodeFormat';\n// import com.google.zxing.EncodeHintType;\nimport EncodeHintType from '../EncodeHintType';\n// import com.google.zxing.aztec.encoder.Encoder;\nimport Encoder from './encoder/Encoder';\n// import com.google.zxing.common.BitMatrix;\nimport BitMatrix from '../common/BitMatrix';\n// import java.nio.charset.Charset;\nimport Charset from '../util/Charset';\n// import java.nio.charset.StandardCharsets;\nimport StandardCharsets from '../util/StandardCharsets';\n// import java.util.Map;\nimport Integer from '../util/Integer';\nimport IllegalStateException from '../IllegalStateException';\nimport IllegalArgumentException from '../IllegalArgumentException';\nimport StringUtils from '../common/StringUtils';\n/**\n * Renders an Aztec code as a {@link BitMatrix}.\n */\nvar AztecWriter = /** @class */ (function () {\n    function AztecWriter() {\n    }\n    // @Override\n    AztecWriter.prototype.encode = function (contents, format, width, height) {\n        return this.encodeWithHints(contents, format, width, height, null);\n    };\n    // @Override\n    AztecWriter.prototype.encodeWithHints = function (contents, format, width, height, hints) {\n        var charset = StandardCharsets.ISO_8859_1;\n        var eccPercent = Encoder.DEFAULT_EC_PERCENT;\n        var layers = Encoder.DEFAULT_AZTEC_LAYERS;\n        if (hints != null) {\n            if (hints.has(EncodeHintType.CHARACTER_SET)) {\n                charset = Charset.forName(hints.get(EncodeHintType.CHARACTER_SET).toString());\n            }\n            if (hints.has(EncodeHintType.ERROR_CORRECTION)) {\n                eccPercent = Integer.parseInt(hints.get(EncodeHintType.ERROR_CORRECTION).toString());\n            }\n            if (hints.has(EncodeHintType.AZTEC_LAYERS)) {\n                layers = Integer.parseInt(hints.get(EncodeHintType.AZTEC_LAYERS).toString());\n            }\n        }\n        return AztecWriter.encodeLayers(contents, format, width, height, charset, eccPercent, layers);\n    };\n    AztecWriter.encodeLayers = function (contents, format, width, height, charset, eccPercent, layers) {\n        if (format !== BarcodeFormat.AZTEC) {\n            throw new IllegalArgumentException('Can only encode AZTEC, but got ' + format);\n        }\n        var aztec = Encoder.encode(StringUtils.getBytes(contents, charset), eccPercent, layers);\n        return AztecWriter.renderResult(aztec, width, height);\n    };\n    AztecWriter.renderResult = function (code, width, height) {\n        var input = code.getMatrix();\n        if (input == null) {\n            throw new IllegalStateException();\n        }\n        var inputWidth = input.getWidth();\n        var inputHeight = input.getHeight();\n        var outputWidth = Math.max(width, inputWidth);\n        var outputHeight = Math.max(height, inputHeight);\n        var multiple = Math.min(outputWidth / inputWidth, outputHeight / inputHeight);\n        var leftPadding = (outputWidth - (inputWidth * multiple)) / 2;\n        var topPadding = (outputHeight - (inputHeight * multiple)) / 2;\n        var output = new BitMatrix(outputWidth, outputHeight);\n        for (var inputY /*int*/ = 0, outputY = topPadding; inputY < inputHeight; inputY++, outputY += multiple) {\n            // Write the contents of this row of the barcode\n            for (var inputX /*int*/ = 0, outputX = leftPadding; inputX < inputWidth; inputX++, outputX += multiple) {\n                if (input.get(inputX, inputY)) {\n                    output.setRegion(outputX, outputY, multiple, multiple);\n                }\n            }\n        }\n        return output;\n    };\n    return AztecWriter;\n}());\nexport default AztecWriter;\n//# sourceMappingURL=AztecWriter.js.map"]},"metadata":{},"sourceType":"module"}