{"ast":null,"code":"import _regeneratorRuntime from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\nimport { VSD_DIALOG_TITLE_SORT, VSD_SUBMIT_BUTTON, VSD_CANCEL_BUTTON, VSD_RESET_BUTTON, VSD_SORT_ORDER, VSD_SORT_BY, VSD_ORDER_ASCENDING, VSD_ORDER_DESCENDING, VSD_FILTER_BY } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\"; // Styles\n\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n/**\n * @public\n */\n\nvar metadata = {\n  tag: \"ui5-view-settings-dialog\",\n  managedSlots: true,\n  properties:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Defines the initial sort order.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    sortDescending: {\n      type: Boolean\n    },\n\n    /**\n     * Keeps recently focused list in order to focus it on next dialog open.\n     *\n     * @type {Object}\n     * @private\n     */\n    _recentlyFocused: {\n      type: Object\n    },\n\n    /**\n     * Stores settings of the dialog before the initial open.\n     *\n     * @type {Object}\n     * @private\n     */\n    _initialSettings: {\n      type: Object\n    },\n\n    /**\n     * Stores settings of the dialog after confirmation.\n     *\n     * @type {Object}\n     * @private\n     */\n    _confirmedSettings: {\n      type: Object\n    },\n\n    /**\n     * Stores current settings of the dialog.\n     *\n     * @type {Object}\n     * @private\n     */\n    _currentSettings: {\n      type: Object\n    },\n\n    /**\n     * Defnies the current mode of the component.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _currentMode: {\n      type: ViewSettingsDialogMode,\n      defaultValue: ViewSettingsDialogMode.Sort\n    },\n\n    /**\n     * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n     *\n     * @since 1.0.0-rc.16\n     * @private\n     */\n    _filterStepTwo: {\n      type: Boolean\n    }\n  },\n  slots:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Defines the list of items against which the user could sort data.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n     * @slot sortItems\n     * @public\n     */\n    sortItems: {\n      type: HTMLElement\n    },\n\n    /**\n     * Defines the <code>filterItems</code> list.\n     * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n     *\n     * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n     * @slot filterItems\n     * @public\n     */\n    filterItems: {\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */\n  {\n    /**\n     * Fired when confirmation button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @public\n     */\n    confirm: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        filters: {\n          type: Array\n        }\n      }\n    },\n\n    /**\n     * Fired when cancel button is activated.\n     *\n     * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n     * @param {String} sortOrder The current sort order selected.\n     * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n     * @public\n     */\n    cancel: {\n      detail: {\n        sortOrder: {\n          type: String\n        },\n        sortBy: {\n          type: String\n        },\n        filters: {\n          type: Array\n        }\n      }\n    }\n  }\n};\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends UI5Element\n * @tagname ui5-view-settings-dialog\n * @since 1.0.0-rc.16\n * @public\n */\n\nvar ViewSettingsDialog = /*#__PURE__*/function (_UI5Element) {\n  _inherits(ViewSettingsDialog, _UI5Element);\n\n  var _super = _createSuper(ViewSettingsDialog);\n\n  function ViewSettingsDialog() {\n    var _this;\n\n    _classCallCheck(this, ViewSettingsDialog);\n\n    _this = _super.call(this);\n    _this._currentSettings = {\n      sortOrder: [],\n      sortBy: [],\n      filters: []\n    };\n    return _this;\n  }\n\n  _createClass(ViewSettingsDialog, [{\n    key: \"onBeforeRendering\",\n    value: function onBeforeRendering() {\n      if (this._currentSettings.filters && this._currentSettings.filters.length) {\n        this._setAdditionalTexts();\n      }\n    }\n  }, {\n    key: \"_setAdditionalTexts\",\n    value: function _setAdditionalTexts() {\n      var _this2 = this;\n\n      // Add the additional text to the filter options\n      this.filterItems.forEach(function (filter, index) {\n        var selectedCount = 0;\n\n        for (var i = 0; i < filter.values.length; i++) {\n          if (_this2._currentSettings.filters[index].filterOptions[i].selected) {\n            selectedCount++;\n          }\n        }\n\n        filter.additionalText = !selectedCount ? \"\" : selectedCount;\n      });\n    }\n  }, {\n    key: \"_selectedFilter\",\n    get: function get() {\n      for (var i = 0; i < this._currentSettings.filters.length; i++) {\n        if (this._currentSettings.filters[i].selected) {\n          return this._currentSettings.filters[i];\n        }\n      }\n\n      return \"\";\n    }\n  }, {\n    key: \"_filterByTitle\",\n    get: function get() {\n      return \"\".concat(ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY), \": \").concat(this._selectedFilter.text);\n    }\n  }, {\n    key: \"_dialogTitle\",\n    get: function get() {\n      var currentModeText = this._currentMode === ViewSettingsDialogMode.Sort ? VSD_DIALOG_TITLE_SORT : VSD_FILTER_BY;\n      return ViewSettingsDialog.i18nBundle.getText(currentModeText);\n    }\n  }, {\n    key: \"_okButtonLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n    }\n  }, {\n    key: \"_cancelButtonLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n    }\n  }, {\n    key: \"_resetButtonLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n    }\n  }, {\n    key: \"_ascendingLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n    }\n  }, {\n    key: \"_descendingLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n    }\n  }, {\n    key: \"_sortOrderLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n    }\n  }, {\n    key: \"_filterByLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n    }\n  }, {\n    key: \"_sortByLabel\",\n    get: function get() {\n      return ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n    }\n  }, {\n    key: \"_isPhone\",\n    get: function get() {\n      return isPhone();\n    }\n  }, {\n    key: \"_sortAscending\",\n    get: function get() {\n      return !this.sortDescending;\n    }\n    /**\n     * Determines disabled state of the <code>Reset</code> button.\n     */\n\n  }, {\n    key: \"_disableResetButton\",\n    get: function get() {\n      return this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n    }\n  }, {\n    key: \"_sortSetttingsAreInitial\",\n    get: function get() {\n      var _this3 = this;\n\n      var settingsAreInitial = true;\n      [\"sortBy\", \"sortOrder\"].forEach(function (sortList) {\n        _this3._currentSettings[sortList].forEach(function (item, index) {\n          if (item.selected !== _this3._initialSettings[sortList][index].selected) {\n            settingsAreInitial = false;\n          }\n        });\n      });\n      return settingsAreInitial;\n    }\n  }, {\n    key: \"_filteresAreInitial\",\n    get: function get() {\n      var _this4 = this;\n\n      var filtersAreInitial = true;\n\n      this._currentSettings.filters.forEach(function (filter, index) {\n        for (var i = 0; i < filter.filterOptions.length; i++) {\n          if (filter.filterOptions[i].selected !== _this4._initialSettings.filters[index].filterOptions[i].selected) {\n            filtersAreInitial = false;\n          }\n        }\n      });\n\n      return filtersAreInitial;\n    }\n    /**\n     * Returns the current settings (current state of all lists).\n     */\n\n  }, {\n    key: \"_settings\",\n    get: function get() {\n      return {\n        sortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n        sortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n        filters: this.filterItems.map(function (item) {\n          return {\n            text: item.text,\n            selected: false,\n            filterOptions: item.values.map(function (optionValue) {\n              return {\n                text: optionValue.text,\n                selected: optionValue.selected\n              };\n            })\n          };\n        })\n      };\n    }\n  }, {\n    key: \"initSortByItems\",\n    get: function get() {\n      return this.sortItems.map(function (item) {\n        return {\n          text: item.text,\n          selected: item.selected\n        };\n      });\n    }\n  }, {\n    key: \"initSortOrderItems\",\n    get: function get() {\n      return [{\n        text: this._ascendingLabel,\n        selected: true\n      }, {\n        text: this._descendingLabel,\n        selected: false\n      }];\n    }\n  }, {\n    key: \"isModeSort\",\n    get: function get() {\n      return this._currentMode === ViewSettingsDialogMode.Sort;\n    }\n  }, {\n    key: \"isModeFilter\",\n    get: function get() {\n      return this._currentMode === ViewSettingsDialogMode.Filter;\n    }\n  }, {\n    key: \"showBackButton\",\n    get: function get() {\n      return this.isModeFilter && this._filterStepTwo;\n    }\n  }, {\n    key: \"_sortOrderListDomRef\",\n    get: function get() {\n      return this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n    }\n  }, {\n    key: \"_sortByList\",\n    get: function get() {\n      return this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n    }\n  }, {\n    key: \"_dialogDomRef\",\n    get: function get() {\n      return this.shadowRoot.querySelector(\"[ui5-dialog]\");\n    }\n    /**\n     * Shows the dialog.\n     * @public\n     */\n\n  }, {\n    key: \"show\",\n    value: function show() {\n      if (!this._dialog) {\n        this._sortOrder = this._sortOrderListDomRef;\n        this._sortBy = this._sortByList; // Sorting\n\n        this._initialSettings = this._settings;\n        this._currentSettings = this._settings;\n        this._confirmedSettings = this._settings;\n        this._dialog = this._dialogDomRef;\n      } else {\n        this._restoreSettings(this._confirmedSettings);\n      }\n\n      this._dialog.show();\n    }\n  }, {\n    key: \"_handleModeChange\",\n    value: function _handleModeChange(event) {\n      this._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n    }\n  }, {\n    key: \"_handleFilterValueItemClick\",\n    value: function _handleFilterValueItemClick(event) {\n      // Update the component state\n      this._currentSettings.filters = this._currentSettings.filters.map(function (filter) {\n        if (filter.selected) {\n          filter.filterOptions.forEach(function (option) {\n            if (option.text === event.detail.item.innerText) {\n              option.selected = !option.selected;\n            }\n          });\n        }\n\n        return filter;\n      });\n      this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n    }\n  }, {\n    key: \"_navigateToFilters\",\n    value: function _navigateToFilters(event) {\n      this._filterStepTwo = false;\n    }\n  }, {\n    key: \"_changeCurrentFilter\",\n    value: function _changeCurrentFilter(event) {\n      this._filterStepTwo = true;\n      this._currentSettings.filters = this._currentSettings.filters.map(function (filter) {\n        filter.selected = filter.text === event.detail.item.text;\n        return filter;\n      });\n    }\n    /**\n     * Closes the dialog.\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      this._dialog && this._dialog.close();\n    }\n    /**\n     * Sets focus on recently used control within the dialog.\n     */\n\n  }, {\n    key: \"_focusRecentlyUsedControl\",\n    value: function _focusRecentlyUsedControl() {\n      if (!Object.keys(this._recentlyFocused).length) {\n        return;\n      }\n\n      var recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n          recentlyFocusedItems = this._recentlyFocused.items,\n          slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n\n      if (recentlyFocusedSelectedItems.length) {\n        recentlyFocusedSelectedItems[0].focus();\n      } else if (slottedNodesExist) {\n        this._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n      }\n    }\n    /**\n     * Stores current settings as confirmed and fires <code>confirm</code> event.\n     */\n\n  }, {\n    key: \"_confirmSettings\",\n    value: function _confirmSettings() {\n      this.close();\n      this._confirmedSettings = this._currentSettings;\n      this.fireEvent(\"confirm\", this.eventsParams);\n    }\n    /**\n     * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n     */\n\n  }, {\n    key: \"_cancelSettings\",\n    value: function _cancelSettings() {\n      this._restoreSettings(this._confirmedSettings);\n\n      this.fireEvent(\"cancel\", this.eventsParams);\n      this.close();\n    }\n  }, {\n    key: \"eventsParams\",\n    get: function get() {\n      var _currentSortOrderSelected = this._currentSettings.sortOrder.filter(function (item) {\n        return item.selected;\n      })[0],\n          _currentSortBySelected = this._currentSettings.sortBy.filter(function (item) {\n        return item.selected;\n      })[0],\n          sortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n          sortBy = _currentSortBySelected && _currentSortBySelected.text;\n\n      return {\n        sortOrder: sortOrder,\n        sortBy: sortBy,\n        filters: this.selectedFilters\n      };\n    }\n  }, {\n    key: \"selectedFilters\",\n    get: function get() {\n      var result = [];\n\n      this._currentSettings.filters.forEach(function (filter) {\n        var selectedOptions = [];\n        filter.filterOptions.forEach(function (option) {\n          if (option.selected) {\n            selectedOptions.push(option.text);\n          }\n        });\n\n        if (selectedOptions.length) {\n          result.push({});\n          result[result.length - 1][filter.text] = selectedOptions;\n        }\n      });\n\n      return result;\n    }\n    /**\n     * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n     *\n     * @param {event} evt\n     */\n\n  }, {\n    key: \"_restoreConfirmedOnEscape\",\n    value: function _restoreConfirmedOnEscape(evt) {\n      if (evt.detail.escPressed) {\n        this._cancelSettings();\n\n        this._currentMode = \"Sort\";\n        this._filterStepTwo = false;\n      }\n    }\n    /**\n     * Resets the control settings to their initial state.\n     */\n\n  }, {\n    key: \"_resetSettings\",\n    value: function _resetSettings() {\n      this._restoreSettings(this._initialSettings);\n\n      this._filterStepTwo = false;\n      this._recentlyFocused = this._sortOrder;\n\n      this._focusRecentlyUsedControl();\n    }\n    /**\n     * Sets current settings to ones passed as <code>settings</code> argument.\n     *\n     * @param {Object} settings\n     */\n\n  }, {\n    key: \"_restoreSettings\",\n    value: function _restoreSettings(settings) {\n      this._currentSettings = JSON.parse(JSON.stringify(settings));\n    }\n    /**\n     * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n     */\n\n  }, {\n    key: \"_onSortOrderChange\",\n    value: function _onSortOrderChange(event) {\n      this._recentlyFocused = this._sortOrder;\n      this._currentSettings.sortOrder = this.initSortOrderItems.map(function (item) {\n        item.selected = item.text === event.detail.item.innerText;\n        return item;\n      }); // Invalidate\n\n      this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n    }\n    /**\n     * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n     */\n\n  }, {\n    key: \"_onSortByChange\",\n    value: function _onSortByChange(event) {\n      this._recentlyFocused = this._sortBy;\n      this._currentSettings.sortBy = this.initSortByItems.map(function (item) {\n        item.selected = item.text === event.detail.item.innerText;\n        return item;\n      }); // Invalidate\n\n      this._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n    }\n  }], [{\n    key: \"render\",\n    get: function get() {\n      return litRender;\n    }\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return metadata;\n    }\n  }, {\n    key: \"dependencies\",\n    get: function get() {\n      return [Bar, Button, Dialog, Label, List, StandardListItem, GroupHeaderListItem, SegmentedButton, SegmentedButtonItem];\n    }\n  }, {\n    key: \"template\",\n    get: function get() {\n      return ViewSettingsDialogTemplate;\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return viewSettingsDialogCSS;\n    }\n  }, {\n    key: \"onDefine\",\n    value: function () {\n      var _onDefine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getI18nBundle(\"@ui5/webcomponents-fiori\");\n\n              case 2:\n                ViewSettingsDialog.i18nBundle = _context.sent;\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      function onDefine() {\n        return _onDefine.apply(this, arguments);\n      }\n\n      return onDefine;\n    }()\n  }]);\n\n  return ViewSettingsDialog;\n}(UI5Element);\n\nViewSettingsDialog.define();\nexport default ViewSettingsDialog;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-fiori/dist/ViewSettingsDialog.js"],"names":["getI18nBundle","isPhone","litRender","UI5Element","Dialog","Button","Label","GroupHeaderListItem","List","StandardListItem","SegmentedButton","SegmentedButtonItem","Bar","ViewSettingsDialogMode","VSD_DIALOG_TITLE_SORT","VSD_SUBMIT_BUTTON","VSD_CANCEL_BUTTON","VSD_RESET_BUTTON","VSD_SORT_ORDER","VSD_SORT_BY","VSD_ORDER_ASCENDING","VSD_ORDER_DESCENDING","VSD_FILTER_BY","ViewSettingsDialogTemplate","viewSettingsDialogCSS","metadata","tag","managedSlots","properties","sortDescending","type","Boolean","_recentlyFocused","Object","_initialSettings","_confirmedSettings","_currentSettings","_currentMode","defaultValue","Sort","_filterStepTwo","slots","sortItems","HTMLElement","filterItems","events","confirm","detail","sortOrder","String","sortBy","filters","Array","cancel","ViewSettingsDialog","length","_setAdditionalTexts","forEach","filter","index","selectedCount","i","values","filterOptions","selected","additionalText","i18nBundle","getText","_selectedFilter","text","currentModeText","_dialog","_sortSetttingsAreInitial","_filteresAreInitial","settingsAreInitial","sortList","item","filtersAreInitial","JSON","parse","stringify","initSortOrderItems","initSortByItems","map","optionValue","_ascendingLabel","_descendingLabel","Filter","isModeFilter","shadowRoot","querySelector","_sortOrder","_sortOrderListDomRef","_sortBy","_sortByList","_settings","_dialogDomRef","_restoreSettings","show","event","selectedItem","getAttribute","option","innerText","close","keys","recentlyFocusedSelectedItems","getSelectedItems","recentlyFocusedItems","items","slottedNodesExist","assignedNodes","focus","focusItem","fireEvent","eventsParams","_currentSortOrderSelected","_currentSortBySelected","selectedFilters","result","selectedOptions","push","evt","escPressed","_cancelSettings","_focusRecentlyUsedControl","settings","define"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,4CAA9B;AACA,SAASC,OAAT,QAAwB,wCAAxB;AACA,OAAOC,SAAP,MAAsB,sDAAtB;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,MAAP,MAAmB,mCAAnB;AACA,OAAOC,KAAP,MAAkB,kCAAlB;AACA,OAAOC,mBAAP,MAAgC,gDAAhC;AACA,OAAOC,IAAP,MAAiB,iCAAjB;AACA,OAAOC,gBAAP,MAA6B,6CAA7B;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AACA,OAAOC,mBAAP,MAAgC,gDAAhC;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,OAAOC,sBAAP,MAAmC,mCAAnC;AACA,OAAO,uCAAP;AACA,OAAO,yCAAP;AACA,OAAO,2CAAP;AAEA,SACCC,qBADD,EAECC,iBAFD,EAGCC,iBAHD,EAICC,gBAJD,EAKCC,cALD,EAMCC,WAND,EAOCC,mBAPD,EAQCC,oBARD,EASCC,aATD,QAUO,mCAVP,C,CAYA;;AACA,OAAOC,0BAAP,MAAuC,yDAAvC,C,CAEA;;AACA,OAAOC,qBAAP,MAAkC,8CAAlC;AAEA;AACA;AACA;;AACA,IAAMC,QAAQ,GAAG;AAChBC,EAAAA,GAAG,EAAE,0BADW;AAEhBC,EAAAA,YAAY,EAAE,IAFE;AAGhBC,EAAAA,UAAU;AAAE;AAAuE;AAClF;AACF;AACA;AACA;AACA;AACA;AACA;AACGC,IAAAA,cAAc,EAAE;AAChBC,MAAAA,IAAI,EAAEC;AADU,KARiE;;AAYlF;AACF;AACA;AACA;AACA;AACA;AACGC,IAAAA,gBAAgB,EAAE;AAClBF,MAAAA,IAAI,EAAEG;AADY,KAlB+D;;AAsBlF;AACF;AACA;AACA;AACA;AACA;AACGC,IAAAA,gBAAgB,EAAE;AAClBJ,MAAAA,IAAI,EAAEG;AADY,KA5B+D;;AAgClF;AACF;AACA;AACA;AACA;AACA;AACGE,IAAAA,kBAAkB,EAAE;AACpBL,MAAAA,IAAI,EAAEG;AADc,KAtC6D;;AA0ClF;AACF;AACA;AACA;AACA;AACA;AACGG,IAAAA,gBAAgB,EAAE;AAClBN,MAAAA,IAAI,EAAEG;AADY,KAhD+D;;AAoDlF;AACF;AACA;AACA;AACA;AACA;AACEI,IAAAA,YAAY,EAAE;AACbP,MAAAA,IAAI,EAAEjB,sBADO;AAEbyB,MAAAA,YAAY,EAAEzB,sBAAsB,CAAC0B;AAFxB,KA1DoE;;AA+DlF;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,cAAc,EAAE;AACfV,MAAAA,IAAI,EAAEC;AADS;AArEkE,GAHnE;AA4EhBU,EAAAA,KAAK;AAAE;AAAuE;AAC7E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,IAAAA,SAAS,EAAE;AACXZ,MAAAA,IAAI,EAAEa;AADK,KATiE;;AAa7E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,WAAW,EAAE;AACZd,MAAAA,IAAI,EAAEa;AADM;AArBgE,GA5E9D;AAqGhBE,EAAAA,MAAM;AAAE;AAAuE;AAE9E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,OAAO,EAAE;AACRC,MAAAA,MAAM,EAAE;AACPC,QAAAA,SAAS,EAAE;AAAElB,UAAAA,IAAI,EAAEmB;AAAR,SADJ;AAEPC,QAAAA,MAAM,EAAE;AAAEpB,UAAAA,IAAI,EAAEmB;AAAR,SAFD;AAGPE,QAAAA,OAAO,EAAE;AAAErB,UAAAA,IAAI,EAAEsB;AAAR;AAHF;AADA,KAVqE;;AAkB9E;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,MAAM,EAAE;AACPN,MAAAA,MAAM,EAAE;AACPC,QAAAA,SAAS,EAAE;AAAElB,UAAAA,IAAI,EAAEmB;AAAR,SADJ;AAEPC,QAAAA,MAAM,EAAE;AAAEpB,UAAAA,IAAI,EAAEmB;AAAR,SAFD;AAGPE,QAAAA,OAAO,EAAE;AAAErB,UAAAA,IAAI,EAAEsB;AAAR;AAHF;AADD;AA1BsE;AArG/D,CAAjB;AAyIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACME,kB;;;;;AACL,gCAAc;AAAA;;AAAA;;AACb;AACA,UAAKlB,gBAAL,GAAwB;AACvBY,MAAAA,SAAS,EAAE,EADY;AAEvBE,MAAAA,MAAM,EAAE,EAFe;AAGvBC,MAAAA,OAAO,EAAE;AAHc,KAAxB;AAFa;AAOb;;;;WAED,6BAAoB;AACnB,UAAI,KAAKf,gBAAL,CAAsBe,OAAtB,IAAiC,KAAKf,gBAAL,CAAsBe,OAAtB,CAA8BI,MAAnE,EAA2E;AAC1E,aAAKC,mBAAL;AACA;AACD;;;WAED,+BAAsB;AAAA;;AACrB;AACA,WAAKZ,WAAL,CAAiBa,OAAjB,CAAyB,UAACC,MAAD,EAASC,KAAT,EAAmB;AAC3C,YAAIC,aAAa,GAAG,CAApB;;AACA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACI,MAAP,CAAcP,MAAlC,EAA0CM,CAAC,EAA3C,EAA+C;AAC9C,cAAI,MAAI,CAACzB,gBAAL,CAAsBe,OAAtB,CAA8BQ,KAA9B,EAAqCI,aAArC,CAAmDF,CAAnD,EAAsDG,QAA1D,EAAoE;AACnEJ,YAAAA,aAAa;AACb;AACD;;AAEDF,QAAAA,MAAM,CAACO,cAAP,GAAwB,CAACL,aAAD,GAAiB,EAAjB,GAAsBA,aAA9C;AACA,OATD;AAUA;;;SAoCD,eAAsB;AACrB,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKzB,gBAAL,CAAsBe,OAAtB,CAA8BI,MAAlD,EAA0DM,CAAC,EAA3D,EAA+D;AAC9D,YAAI,KAAKzB,gBAAL,CAAsBe,OAAtB,CAA8BU,CAA9B,EAAiCG,QAArC,EAA+C;AAC9C,iBAAO,KAAK5B,gBAAL,CAAsBe,OAAtB,CAA8BU,CAA9B,CAAP;AACA;AACD;;AAED,aAAO,EAAP;AACA;;;SAED,eAAqB;AACpB,uBAAUP,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsC7C,aAAtC,CAAV,eAAmE,KAAK8C,eAAL,CAAqBC,IAAxF;AACA;;;SAED,eAAmB;AAClB,UAAMC,eAAe,GAAG,KAAKjC,YAAL,KAAsBxB,sBAAsB,CAAC0B,IAA7C,GAAoDzB,qBAApD,GAA4EQ,aAApG;AACA,aAAOgC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsCG,eAAtC,CAAP;AACA;;;SAED,eAAqB;AACpB,aAAOhB,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsCpD,iBAAtC,CAAP;AACA;;;SAED,eAAyB;AACxB,aAAOuC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsCnD,iBAAtC,CAAP;AACA;;;SAED,eAAwB;AACvB,aAAOsC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsClD,gBAAtC,CAAP;AACA;;;SAED,eAAsB;AACrB,aAAOqC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsC/C,mBAAtC,CAAP;AACA;;;SAED,eAAuB;AACtB,aAAOkC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsC9C,oBAAtC,CAAP;AACA;;;SAED,eAAsB;AACrB,aAAOiC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsCjD,cAAtC,CAAP;AACA;;;SAED,eAAqB;AACpB,aAAOoC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsC7C,aAAtC,CAAP;AACA;;;SAED,eAAmB;AAClB,aAAOgC,kBAAkB,CAACY,UAAnB,CAA8BC,OAA9B,CAAsChD,WAAtC,CAAP;AACA;;;SAED,eAAe;AACd,aAAOlB,OAAO,EAAd;AACA;;;SAED,eAAqB;AACpB,aAAO,CAAC,KAAK4B,cAAb;AACA;AAED;AACD;AACA;;;;SACC,eAA0B;AACzB,aAAO,KAAK0C,OAAL,IAAgB,KAAKC,wBAArB,IAAiD,KAAKC,mBAA7D;AACA;;;SAED,eAA+B;AAAA;;AAC9B,UAAIC,kBAAkB,GAAG,IAAzB;AACA,OAAC,QAAD,EAAW,WAAX,EAAwBjB,OAAxB,CAAgC,UAAAkB,QAAQ,EAAI;AAC3C,QAAA,MAAI,CAACvC,gBAAL,CAAsBuC,QAAtB,EAAgClB,OAAhC,CAAwC,UAACmB,IAAD,EAAOjB,KAAP,EAAiB;AACxD,cAAIiB,IAAI,CAACZ,QAAL,KAAkB,MAAI,CAAC9B,gBAAL,CAAsByC,QAAtB,EAAgChB,KAAhC,EAAuCK,QAA7D,EAAuE;AACtEU,YAAAA,kBAAkB,GAAG,KAArB;AACA;AACD,SAJD;AAKA,OAND;AAQA,aAAOA,kBAAP;AACA;;;SAED,eAA0B;AAAA;;AACzB,UAAIG,iBAAiB,GAAG,IAAxB;;AACA,WAAKzC,gBAAL,CAAsBe,OAAtB,CAA8BM,OAA9B,CAAsC,UAACC,MAAD,EAASC,KAAT,EAAmB;AACxD,aAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,MAAM,CAACK,aAAP,CAAqBR,MAAzC,EAAiDM,CAAC,EAAlD,EAAsD;AACrD,cAAIH,MAAM,CAACK,aAAP,CAAqBF,CAArB,EAAwBG,QAAxB,KAAqC,MAAI,CAAC9B,gBAAL,CAAsBiB,OAAtB,CAA8BQ,KAA9B,EAAqCI,aAArC,CAAmDF,CAAnD,EAAsDG,QAA/F,EAAyG;AACxGa,YAAAA,iBAAiB,GAAG,KAApB;AACA;AACD;AACD,OAND;;AAQA,aAAOA,iBAAP;AACA;AAED;AACD;AACA;;;;SACC,eAAgB;AACf,aAAO;AACN7B,QAAAA,SAAS,EAAE8B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKC,kBAApB,CAAX,CADL;AAEN/B,QAAAA,MAAM,EAAE4B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAKE,eAApB,CAAX,CAFF;AAGN/B,QAAAA,OAAO,EAAE,KAAKP,WAAL,CAAiBuC,GAAjB,CAAqB,UAAAP,IAAI,EAAI;AACrC,iBAAO;AACNP,YAAAA,IAAI,EAAEO,IAAI,CAACP,IADL;AAENL,YAAAA,QAAQ,EAAE,KAFJ;AAGND,YAAAA,aAAa,EAAEa,IAAI,CAACd,MAAL,CAAYqB,GAAZ,CAAgB,UAAAC,WAAW,EAAI;AAC7C,qBAAO;AACNf,gBAAAA,IAAI,EAAEe,WAAW,CAACf,IADZ;AAENL,gBAAAA,QAAQ,EAAEoB,WAAW,CAACpB;AAFhB,eAAP;AAIA,aALc;AAHT,WAAP;AAUA,SAXQ;AAHH,OAAP;AAgBA;;;SAED,eAAsB;AACrB,aAAO,KAAKtB,SAAL,CAAeyC,GAAf,CAAmB,UAAAP,IAAI,EAAI;AACjC,eAAO;AACNP,UAAAA,IAAI,EAAEO,IAAI,CAACP,IADL;AAENL,UAAAA,QAAQ,EAAEY,IAAI,CAACZ;AAFT,SAAP;AAIA,OALM,CAAP;AAMA;;;SAED,eAAyB;AACxB,aAAO,CACN;AACCK,QAAAA,IAAI,EAAE,KAAKgB,eADZ;AAECrB,QAAAA,QAAQ,EAAE;AAFX,OADM,EAKN;AACCK,QAAAA,IAAI,EAAE,KAAKiB,gBADZ;AAECtB,QAAAA,QAAQ,EAAE;AAFX,OALM,CAAP;AAUA;;;SAED,eAAiB;AAChB,aAAO,KAAK3B,YAAL,KAAsBxB,sBAAsB,CAAC0B,IAApD;AACA;;;SAED,eAAmB;AAClB,aAAO,KAAKF,YAAL,KAAsBxB,sBAAsB,CAAC0E,MAApD;AACA;;;SAED,eAAqB;AACpB,aAAO,KAAKC,YAAL,IAAqB,KAAKhD,cAAjC;AACA;;;SAED,eAA2B;AAC1B,aAAO,KAAKiD,UAAL,CAAgBC,aAAhB,CAA8B,wBAA9B,CAAP;AACA;;;SAED,eAAkB;AACjB,aAAO,KAAKD,UAAL,CAAgBC,aAAhB,CAA8B,qBAA9B,CAAP;AACA;;;SAED,eAAoB;AACnB,aAAO,KAAKD,UAAL,CAAgBC,aAAhB,CAA8B,cAA9B,CAAP;AACA;AAED;AACD;AACA;AACA;;;;WACC,gBAAO;AACN,UAAI,CAAC,KAAKnB,OAAV,EAAmB;AAClB,aAAKoB,UAAL,GAAkB,KAAKC,oBAAvB;AACA,aAAKC,OAAL,GAAe,KAAKC,WAApB,CAFkB,CAIlB;;AACA,aAAK5D,gBAAL,GAAwB,KAAK6D,SAA7B;AACA,aAAK3D,gBAAL,GAAwB,KAAK2D,SAA7B;AACA,aAAK5D,kBAAL,GAA0B,KAAK4D,SAA/B;AAEA,aAAKxB,OAAL,GAAe,KAAKyB,aAApB;AACA,OAVD,MAUO;AACN,aAAKC,gBAAL,CAAsB,KAAK9D,kBAA3B;AACA;;AACD,WAAKoC,OAAL,CAAa2B,IAAb;AACA;;;WAED,2BAAkBC,KAAlB,EAAyB;AACxB,WAAK9D,YAAL,GAAoBxB,sBAAsB,CAACsF,KAAK,CAACpD,MAAN,CAAaqD,YAAb,CAA0BC,YAA1B,CAAuC,MAAvC,CAAD,CAA1C;AACA;;;WAED,qCAA4BF,KAA5B,EAAmC;AAClC;AACA,WAAK/D,gBAAL,CAAsBe,OAAtB,GAAgC,KAAKf,gBAAL,CAAsBe,OAAtB,CAA8BgC,GAA9B,CAAkC,UAAAzB,MAAM,EAAI;AAC3E,YAAIA,MAAM,CAACM,QAAX,EAAqB;AACpBN,UAAAA,MAAM,CAACK,aAAP,CAAqBN,OAArB,CAA6B,UAAA6C,MAAM,EAAI;AACtC,gBAAIA,MAAM,CAACjC,IAAP,KAAgB8B,KAAK,CAACpD,MAAN,CAAa6B,IAAb,CAAkB2B,SAAtC,EAAiD;AAChDD,cAAAA,MAAM,CAACtC,QAAP,GAAkB,CAACsC,MAAM,CAACtC,QAA1B;AACA;AACD,WAJD;AAKA;;AACD,eAAON,MAAP;AACA,OAT+B,CAAhC;AAWA,WAAKtB,gBAAL,GAAwB0C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK5C,gBAApB,CAAX,CAAxB;AACA;;;WAED,4BAAmB+D,KAAnB,EAA0B;AACzB,WAAK3D,cAAL,GAAsB,KAAtB;AACA;;;WAED,8BAAqB2D,KAArB,EAA4B;AAC3B,WAAK3D,cAAL,GAAsB,IAAtB;AACA,WAAKJ,gBAAL,CAAsBe,OAAtB,GAAgC,KAAKf,gBAAL,CAAsBe,OAAtB,CAA8BgC,GAA9B,CAAkC,UAAAzB,MAAM,EAAI;AAC3EA,QAAAA,MAAM,CAACM,QAAP,GAAkBN,MAAM,CAACW,IAAP,KAAgB8B,KAAK,CAACpD,MAAN,CAAa6B,IAAb,CAAkBP,IAApD;AAEA,eAAOX,MAAP;AACA,OAJ+B,CAAhC;AAKA;AAED;AACD;AACA;;;;WACC,iBAAQ;AACP,WAAKa,OAAL,IAAgB,KAAKA,OAAL,CAAaiC,KAAb,EAAhB;AACA;AAED;AACD;AACA;;;;WACC,qCAA4B;AAC3B,UAAI,CAACvE,MAAM,CAACwE,IAAP,CAAY,KAAKzE,gBAAjB,EAAmCuB,MAAxC,EAAgD;AAC/C;AACA;;AACD,UAAMmD,4BAA4B,GAAG,KAAK1E,gBAAL,CAAsB2E,gBAAtB,EAArC;AAAA,UACGC,oBAAoB,GAAG,KAAK5E,gBAAL,CAAsB6E,KADhD;AAAA,UAEGC,iBAAiB,GAAGF,oBAAoB,CAAC,CAAD,CAApB,IAA2BA,oBAAoB,CAAC,CAAD,CAApB,CAAwBG,aAAnD,IAAoEH,oBAAoB,CAAC,CAAD,CAApB,CAAwBG,aAAxB,GAAwCxD,MAFnI;;AAIA,UAAImD,4BAA4B,CAACnD,MAAjC,EAAyC;AACxCmD,QAAAA,4BAA4B,CAAC,CAAD,CAA5B,CAAgCM,KAAhC;AACA,OAFD,MAEO,IAAIF,iBAAJ,EAAuB;AAC7B,aAAK9E,gBAAL,CAAsBiF,SAAtB,CAAgCL,oBAAoB,CAAC,CAAD,CAApB,CAAwBG,aAAxB,GAAwC,CAAxC,CAAhC;AACA;AACD;AAED;AACD;AACA;;;;WACC,4BAAmB;AAClB,WAAKP,KAAL;AACA,WAAKrE,kBAAL,GAA0B,KAAKC,gBAA/B;AAEA,WAAK8E,SAAL,CAAe,SAAf,EAA0B,KAAKC,YAA/B;AACA;AAED;AACD;AACA;;;;WACC,2BAAkB;AACjB,WAAKlB,gBAAL,CAAsB,KAAK9D,kBAA3B;;AAEA,WAAK+E,SAAL,CAAe,QAAf,EAAyB,KAAKC,YAA9B;AACA,WAAKX,KAAL;AACA;;;SAED,eAAmB;AAClB,UAAMY,yBAAyB,GAAG,KAAKhF,gBAAL,CAAsBY,SAAtB,CAAgCU,MAAhC,CAAuC,UAAAkB,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAT;AAAA,OAA3C,EAA8D,CAA9D,CAAlC;AAAA,UACCqD,sBAAsB,GAAG,KAAKjF,gBAAL,CAAsBc,MAAtB,CAA6BQ,MAA7B,CAAoC,UAAAkB,IAAI;AAAA,eAAIA,IAAI,CAACZ,QAAT;AAAA,OAAxC,EAA2D,CAA3D,CAD1B;AAAA,UAEChB,SAAS,GAAGoE,yBAAyB,IAAIA,yBAAyB,CAAC/C,IAFpE;AAAA,UAGCnB,MAAM,GAAGmE,sBAAsB,IAAIA,sBAAsB,CAAChD,IAH3D;;AAKA,aAAO;AACNrB,QAAAA,SAAS,EAATA,SADM;AAENE,QAAAA,MAAM,EAANA,MAFM;AAGNC,QAAAA,OAAO,EAAE,KAAKmE;AAHR,OAAP;AAKA;;;SAED,eAAsB;AACrB,UAAMC,MAAM,GAAG,EAAf;;AAEA,WAAKnF,gBAAL,CAAsBe,OAAtB,CAA8BM,OAA9B,CAAsC,UAAAC,MAAM,EAAI;AAC/C,YAAM8D,eAAe,GAAG,EAAxB;AAEA9D,QAAAA,MAAM,CAACK,aAAP,CAAqBN,OAArB,CAA6B,UAAA6C,MAAM,EAAI;AACtC,cAAIA,MAAM,CAACtC,QAAX,EAAqB;AACpBwD,YAAAA,eAAe,CAACC,IAAhB,CAAqBnB,MAAM,CAACjC,IAA5B;AACA;AACD,SAJD;;AAMA,YAAImD,eAAe,CAACjE,MAApB,EAA4B;AAC3BgE,UAAAA,MAAM,CAACE,IAAP,CAAY,EAAZ;AACAF,UAAAA,MAAM,CAACA,MAAM,CAAChE,MAAP,GAAgB,CAAjB,CAAN,CAA0BG,MAAM,CAACW,IAAjC,IAAyCmD,eAAzC;AACA;AACD,OAbD;;AAeA,aAAOD,MAAP;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,mCAA0BG,GAA1B,EAA+B;AAC9B,UAAIA,GAAG,CAAC3E,MAAJ,CAAW4E,UAAf,EAA2B;AAC1B,aAAKC,eAAL;;AACA,aAAKvF,YAAL,GAAoB,MAApB;AACA,aAAKG,cAAL,GAAsB,KAAtB;AACA;AACD;AAED;AACD;AACA;;;;WACC,0BAAiB;AAChB,WAAKyD,gBAAL,CAAsB,KAAK/D,gBAA3B;;AACA,WAAKM,cAAL,GAAsB,KAAtB;AACA,WAAKR,gBAAL,GAAwB,KAAK2D,UAA7B;;AACA,WAAKkC,yBAAL;AACA;AAED;AACD;AACA;AACA;AACA;;;;WACC,0BAAiBC,QAAjB,EAA2B;AAC1B,WAAK1F,gBAAL,GAAwB0C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe8C,QAAf,CAAX,CAAxB;AACA;AAED;AACD;AACA;;;;WACC,4BAAmB3B,KAAnB,EAA0B;AACzB,WAAKnE,gBAAL,GAAwB,KAAK2D,UAA7B;AACA,WAAKvD,gBAAL,CAAsBY,SAAtB,GAAkC,KAAKiC,kBAAL,CAAwBE,GAAxB,CAA4B,UAAAP,IAAI,EAAI;AACrEA,QAAAA,IAAI,CAACZ,QAAL,GAAgBY,IAAI,CAACP,IAAL,KAAc8B,KAAK,CAACpD,MAAN,CAAa6B,IAAb,CAAkB2B,SAAhD;AACA,eAAO3B,IAAP;AACA,OAHiC,CAAlC,CAFyB,CAOzB;;AACA,WAAKxC,gBAAL,GAAwB0C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK5C,gBAApB,CAAX,CAAxB;AACA;AAED;AACD;AACA;;;;WACE,yBAAgB+D,KAAhB,EAAuB;AACvB,WAAKnE,gBAAL,GAAwB,KAAK6D,OAA7B;AACA,WAAKzD,gBAAL,CAAsBc,MAAtB,GAA+B,KAAKgC,eAAL,CAAqBC,GAArB,CAAyB,UAAAP,IAAI,EAAI;AAC/DA,QAAAA,IAAI,CAACZ,QAAL,GAAgBY,IAAI,CAACP,IAAL,KAAc8B,KAAK,CAACpD,MAAN,CAAa6B,IAAb,CAAkB2B,SAAhD;AACA,eAAO3B,IAAP;AACA,OAH8B,CAA/B,CAFuB,CAOvB;;AACA,WAAKxC,gBAAL,GAAwB0C,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe,KAAK5C,gBAApB,CAAX,CAAxB;AACA;;;SAjYD,eAAoB;AACnB,aAAOlC,SAAP;AACA;;;SAED,eAAsB;AACrB,aAAOuB,QAAP;AACA;;;SAED,eAA0B;AACzB,aAAO,CACNb,GADM,EAENP,MAFM,EAGND,MAHM,EAINE,KAJM,EAKNE,IALM,EAMNC,gBANM,EAONF,mBAPM,EAQNG,eARM,EASNC,mBATM,CAAP;AAWA;;;SAED,eAAsB;AACrB,aAAOY,0BAAP;AACA;;;SAED,eAAoB;AACnB,aAAOC,qBAAP;AACA;;;;+EAED;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACuCxB,aAAa,CAAC,0BAAD,CADpD;;AAAA;AACCsD,gBAAAA,kBAAkB,CAACY,UADpB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,O;;;;;;;;;;;EA5DgC/D,U;;AAkajCmD,kBAAkB,CAACyE,MAAnB;AAEA,eAAezE,kBAAf","sourcesContent":["import { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport { isPhone } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport Dialog from \"@ui5/webcomponents/dist/Dialog.js\";\nimport Button from \"@ui5/webcomponents/dist/Button.js\";\nimport Label from \"@ui5/webcomponents/dist/Label.js\";\nimport GroupHeaderListItem from \"@ui5/webcomponents/dist/GroupHeaderListItem.js\";\nimport List from \"@ui5/webcomponents/dist/List.js\";\nimport StandardListItem from \"@ui5/webcomponents/dist/StandardListItem.js\";\nimport SegmentedButton from \"@ui5/webcomponents/dist/SegmentedButton.js\";\nimport SegmentedButtonItem from \"@ui5/webcomponents/dist/SegmentedButtonItem.js\";\nimport Bar from \"./Bar.js\";\nimport ViewSettingsDialogMode from \"./types/ViewSettingsDialogMode.js\";\nimport \"@ui5/webcomponents-icons/dist/sort.js\";\nimport \"@ui5/webcomponents-icons/dist/filter.js\";\nimport \"@ui5/webcomponents-icons/dist/nav-back.js\";\n\nimport {\n\tVSD_DIALOG_TITLE_SORT,\n\tVSD_SUBMIT_BUTTON,\n\tVSD_CANCEL_BUTTON,\n\tVSD_RESET_BUTTON,\n\tVSD_SORT_ORDER,\n\tVSD_SORT_BY,\n\tVSD_ORDER_ASCENDING,\n\tVSD_ORDER_DESCENDING,\n\tVSD_FILTER_BY,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport ViewSettingsDialogTemplate from \"./generated/templates/ViewSettingsDialogTemplate.lit.js\";\n\n// Styles\nimport viewSettingsDialogCSS from \"./generated/themes/ViewSettingsDialog.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-view-settings-dialog\",\n\tmanagedSlots: true,\n\tproperties: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the initial sort order.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\t sortDescending: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Keeps recently focused list in order to focus it on next dialog open.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _recentlyFocused: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog before the initial open.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _initialSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores settings of the dialog after confirmation.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _confirmedSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Stores current settings of the dialog.\n\t\t *\n\t\t * @type {Object}\n\t\t * @private\n\t\t */\n\t\t _currentSettings: {\n\t\t\ttype: Object,\n\t\t},\n\n\t\t/**\n\t\t * Defnies the current mode of the component.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_currentMode: {\n\t\t\ttype: ViewSettingsDialogMode,\n\t\t\tdefaultValue: ViewSettingsDialogMode.Sort,\n\t\t},\n\n\t\t/**\n\t\t * When in Filter By mode, defines whether we need to show the list of keys, or the list with values.\n\t\t *\n\t\t * @since 1.0.0-rc.16\n\t\t * @private\n\t\t */\n\t\t_filterStepTwo: {\n\t\t\ttype: Boolean,\n\t\t},\n\t},\n\tslots: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\t\t/**\n\t\t * Defines the list of items against which the user could sort data.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/SortItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.ISortItem[]}\n\t\t * @slot sortItems\n\t\t * @public\n\t\t */\n\t\t sortItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\n\t\t/**\n\t\t * Defines the <code>filterItems</code> list.\n\t\t * <b>Note:</b> If you want to use this slot, you need to import used item: <code>import \"@ui5/webcomponents-fiori/dist/FilterItem\";</code>\n\t\t *\n\t\t * @type {sap.ui.webcomponents.fiori.IFilterItem[]}\n\t\t * @slot filterItems\n\t\t * @public\n\t\t */\n\t\tfilterItems: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends  sap.ui.webcomponents.fiori.ViewSettingsDialog.prototype */ {\n\n\t\t/**\n\t\t * Fired when confirmation button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#confirm\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @public\n\t\t */\n\t\tconfirm: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\n\t\t/**\n\t\t * Fired when cancel button is activated.\n\t\t *\n\t\t * @event sap.ui.webcomponents.fiori.ViewSettingsDialog#cancel\n\t\t * @param {String} sortOrder The current sort order selected.\n\t\t * @param {String} sortBy The currently selected <code>ui5-sort-item</code> text attribute.\n\t\t * @public\n\t\t */\n\t\tcancel: {\n\t\t\tdetail: {\n\t\t\t\tsortOrder: { type: String },\n\t\t\t\tsortBy: { type: String },\n\t\t\t\tfilters: { type: Array },\n\t\t\t},\n\t\t},\n\t},\n};\n\n/**\n * @class\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The <code>ui5-view-settings-dialog</code> component helps the user to sort data within a list or a table.\n * It consists of several lists like <code>Sort order</code> which is built-in and <code>Sort By</code> and <code>Filter By</code> lists,\n * for which you must be provide items(<code>ui5-sort-item</code> & <code>ui5-filter-item</code> respectively)\n * These options can be used to create sorters for a table.\n *\n * The <code>ui5-view-settings-dialog</code> interrupts the current application processing as it is the only focused UI element and\n * the main screen is dimmed/blocked.\n * The <code>ui5-view-settings-dialog</code> is modal, which means that user action is required before returning to the parent window is possible.\n *\n * <h3>Structure</h3>\n * A <code>ui5-view-settings-dialog</code> consists of a header, content, and a footer for action buttons.\n * The <code>ui5-view-settings-dialog</code> is usually displayed at the center of the screen.\n *\n * <h3>Responsive Behavior</h3>\n * <code>ui5-view-settings-dialog</code> stretches on full screen on phones.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/ViewSettingsDialog\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.fiori.ViewSettingsDialog\n * @extends UI5Element\n * @tagname ui5-view-settings-dialog\n * @since 1.0.0-rc.16\n * @public\n */\nclass ViewSettingsDialog extends UI5Element {\n\tconstructor() {\n\t\tsuper();\n\t\tthis._currentSettings = {\n\t\t\tsortOrder: [],\n\t\t\tsortBy: [],\n\t\t\tfilters: [],\n\t\t};\n\t}\n\n\tonBeforeRendering() {\n\t\tif (this._currentSettings.filters && this._currentSettings.filters.length) {\n\t\t\tthis._setAdditionalTexts();\n\t\t}\n\t}\n\n\t_setAdditionalTexts() {\n\t\t// Add the additional text to the filter options\n\t\tthis.filterItems.forEach((filter, index) => {\n\t\t\tlet selectedCount = 0;\n\t\t\tfor (let i = 0; i < filter.values.length; i++) {\n\t\t\t\tif (this._currentSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tselectedCount++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfilter.additionalText = !selectedCount ? \"\" : selectedCount;\n\t\t});\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [\n\t\t\tBar,\n\t\t\tButton,\n\t\t\tDialog,\n\t\t\tLabel,\n\t\t\tList,\n\t\t\tStandardListItem,\n\t\t\tGroupHeaderListItem,\n\t\t\tSegmentedButton,\n\t\t\tSegmentedButtonItem,\n\t\t];\n\t}\n\n\tstatic get template() {\n\t\treturn ViewSettingsDialogTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn viewSettingsDialogCSS;\n\t}\n\n\tstatic async onDefine() {\n\t\tViewSettingsDialog.i18nBundle = await getI18nBundle(\"@ui5/webcomponents-fiori\");\n\t}\n\n\tget _selectedFilter() {\n\t\tfor (let i = 0; i < this._currentSettings.filters.length; i++) {\n\t\t\tif (this._currentSettings.filters[i].selected) {\n\t\t\t\treturn this._currentSettings.filters[i];\n\t\t\t}\n\t\t}\n\n\t\treturn \"\";\n\t}\n\n\tget _filterByTitle() {\n\t\treturn `${ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY)}: ${this._selectedFilter.text}`;\n\t}\n\n\tget _dialogTitle() {\n\t\tconst currentModeText = this._currentMode === ViewSettingsDialogMode.Sort ? VSD_DIALOG_TITLE_SORT : VSD_FILTER_BY;\n\t\treturn ViewSettingsDialog.i18nBundle.getText(currentModeText);\n\t}\n\n\tget _okButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SUBMIT_BUTTON);\n\t}\n\n\tget _cancelButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_CANCEL_BUTTON);\n\t}\n\n\tget _resetButtonLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_RESET_BUTTON);\n\t}\n\n\tget _ascendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_ASCENDING);\n\t}\n\n\tget _descendingLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_ORDER_DESCENDING);\n\t}\n\n\tget _sortOrderLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_ORDER);\n\t}\n\n\tget _filterByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_FILTER_BY);\n\t}\n\n\tget _sortByLabel() {\n\t\treturn ViewSettingsDialog.i18nBundle.getText(VSD_SORT_BY);\n\t}\n\n\tget _isPhone() {\n\t\treturn isPhone();\n\t}\n\n\tget _sortAscending() {\n\t\treturn !this.sortDescending;\n\t}\n\n\t/**\n\t * Determines disabled state of the <code>Reset</code> button.\n\t */\n\tget _disableResetButton() {\n\t\treturn this._dialog && this._sortSetttingsAreInitial && this._filteresAreInitial;\n\t}\n\n\tget _sortSetttingsAreInitial() {\n\t\tlet settingsAreInitial = true;\n\t\t[\"sortBy\", \"sortOrder\"].forEach(sortList => {\n\t\t\tthis._currentSettings[sortList].forEach((item, index) => {\n\t\t\t\tif (item.selected !== this._initialSettings[sortList][index].selected) {\n\t\t\t\t\tsettingsAreInitial = false;\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\treturn settingsAreInitial;\n\t}\n\n\tget _filteresAreInitial() {\n\t\tlet filtersAreInitial = true;\n\t\tthis._currentSettings.filters.forEach((filter, index) => {\n\t\t\tfor (let i = 0; i < filter.filterOptions.length; i++) {\n\t\t\t\tif (filter.filterOptions[i].selected !== this._initialSettings.filters[index].filterOptions[i].selected) {\n\t\t\t\t\tfiltersAreInitial = false;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn filtersAreInitial;\n\t}\n\n\t/**\n\t * Returns the current settings (current state of all lists).\n\t */\n\tget _settings() {\n\t\treturn {\n\t\t\tsortOrder: JSON.parse(JSON.stringify(this.initSortOrderItems)),\n\t\t\tsortBy: JSON.parse(JSON.stringify(this.initSortByItems)),\n\t\t\tfilters: this.filterItems.map(item => {\n\t\t\t\treturn {\n\t\t\t\t\ttext: item.text,\n\t\t\t\t\tselected: false,\n\t\t\t\t\tfilterOptions: item.values.map(optionValue => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\ttext: optionValue.text,\n\t\t\t\t\t\t\tselected: optionValue.selected,\n\t\t\t\t\t\t};\n\t\t\t\t\t}),\n\t\t\t\t};\n\t\t\t}),\n\t\t};\n\t}\n\n\tget initSortByItems() {\n\t\treturn this.sortItems.map(item => {\n\t\t\treturn {\n\t\t\t\ttext: item.text,\n\t\t\t\tselected: item.selected,\n\t\t\t};\n\t\t});\n\t}\n\n\tget initSortOrderItems() {\n\t\treturn [\n\t\t\t{\n\t\t\t\ttext: this._ascendingLabel,\n\t\t\t\tselected: true,\n\t\t\t},\n\t\t\t{\n\t\t\t\ttext: this._descendingLabel,\n\t\t\t\tselected: false,\n\t\t\t},\n\t\t];\n\t}\n\n\tget isModeSort() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Sort;\n\t}\n\n\tget isModeFilter() {\n\t\treturn this._currentMode === ViewSettingsDialogMode.Filter;\n\t}\n\n\tget showBackButton() {\n\t\treturn this.isModeFilter && this._filterStepTwo;\n\t}\n\n\tget _sortOrderListDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-order]\");\n\t}\n\n\tget _sortByList() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-list][sort-by]\");\n\t}\n\n\tget _dialogDomRef() {\n\t\treturn this.shadowRoot.querySelector(\"[ui5-dialog]\");\n\t}\n\n\t/**\n\t * Shows the dialog.\n\t * @public\n\t */\n\tshow() {\n\t\tif (!this._dialog) {\n\t\t\tthis._sortOrder = this._sortOrderListDomRef;\n\t\t\tthis._sortBy = this._sortByList;\n\n\t\t\t// Sorting\n\t\t\tthis._initialSettings = this._settings;\n\t\t\tthis._currentSettings = this._settings;\n\t\t\tthis._confirmedSettings = this._settings;\n\n\t\t\tthis._dialog = this._dialogDomRef;\n\t\t} else {\n\t\t\tthis._restoreSettings(this._confirmedSettings);\n\t\t}\n\t\tthis._dialog.show();\n\t}\n\n\t_handleModeChange(event) {\n\t\tthis._currentMode = ViewSettingsDialogMode[event.detail.selectedItem.getAttribute(\"mode\")];\n\t}\n\n\t_handleFilterValueItemClick(event) {\n\t\t// Update the component state\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tif (filter.selected) {\n\t\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\t\tif (option.text === event.detail.item.innerText) {\n\t\t\t\t\t\toption.selected = !option.selected;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\treturn filter;\n\t\t});\n\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t_navigateToFilters(event) {\n\t\tthis._filterStepTwo = false;\n\t}\n\n\t_changeCurrentFilter(event) {\n\t\tthis._filterStepTwo = true;\n\t\tthis._currentSettings.filters = this._currentSettings.filters.map(filter => {\n\t\t\tfilter.selected = filter.text === event.detail.item.text;\n\n\t\t\treturn filter;\n\t\t});\n\t}\n\n\t/**\n\t * Closes the dialog.\n\t */\n\tclose() {\n\t\tthis._dialog && this._dialog.close();\n\t}\n\n\t/**\n\t * Sets focus on recently used control within the dialog.\n\t */\n\t_focusRecentlyUsedControl() {\n\t\tif (!Object.keys(this._recentlyFocused).length) {\n\t\t\treturn;\n\t\t}\n\t\tconst recentlyFocusedSelectedItems = this._recentlyFocused.getSelectedItems(),\n\t\t\t  recentlyFocusedItems = this._recentlyFocused.items,\n\t\t\t  slottedNodesExist = recentlyFocusedItems[1] && recentlyFocusedItems[1].assignedNodes && recentlyFocusedItems[1].assignedNodes().length;\n\n\t\tif (recentlyFocusedSelectedItems.length) {\n\t\t\trecentlyFocusedSelectedItems[0].focus();\n\t\t} else if (slottedNodesExist) {\n\t\t\tthis._recentlyFocused.focusItem(recentlyFocusedItems[1].assignedNodes()[0]);\n\t\t}\n\t}\n\n\t/**\n\t * Stores current settings as confirmed and fires <code>confirm</code> event.\n\t */\n\t_confirmSettings() {\n\t\tthis.close();\n\t\tthis._confirmedSettings = this._currentSettings;\n\n\t\tthis.fireEvent(\"confirm\", this.eventsParams);\n\t}\n\n\t/**\n\t * Sets current settings to recently confirmed ones and fires <code>cancel</code> event.\n\t */\n\t_cancelSettings() {\n\t\tthis._restoreSettings(this._confirmedSettings);\n\n\t\tthis.fireEvent(\"cancel\", this.eventsParams);\n\t\tthis.close();\n\t}\n\n\tget eventsParams() {\n\t\tconst _currentSortOrderSelected = this._currentSettings.sortOrder.filter(item => item.selected)[0],\n\t\t\t_currentSortBySelected = this._currentSettings.sortBy.filter(item => item.selected)[0],\n\t\t\tsortOrder = _currentSortOrderSelected && _currentSortOrderSelected.text,\n\t\t\tsortBy = _currentSortBySelected && _currentSortBySelected.text;\n\n\t\treturn {\n\t\t\tsortOrder,\n\t\t\tsortBy,\n\t\t\tfilters: this.selectedFilters,\n\t\t};\n\t}\n\n\tget selectedFilters() {\n\t\tconst result = [];\n\n\t\tthis._currentSettings.filters.forEach(filter => {\n\t\t\tconst selectedOptions = [];\n\n\t\t\tfilter.filterOptions.forEach(option => {\n\t\t\t\tif (option.selected) {\n\t\t\t\t\tselectedOptions.push(option.text);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif (selectedOptions.length) {\n\t\t\t\tresult.push({});\n\t\t\t\tresult[result.length - 1][filter.text] = selectedOptions;\n\t\t\t}\n\t\t});\n\n\t\treturn result;\n\t}\n\n\t/**\n\t * If the dialog is closed by [ESC] key, do the same as if the <code>Cancel</code> button is pressed.\n\t *\n\t * @param {event} evt\n\t */\n\t_restoreConfirmedOnEscape(evt) {\n\t\tif (evt.detail.escPressed) {\n\t\t\tthis._cancelSettings();\n\t\t\tthis._currentMode = \"Sort\";\n\t\t\tthis._filterStepTwo = false;\n\t\t}\n\t}\n\n\t/**\n\t * Resets the control settings to their initial state.\n\t */\n\t_resetSettings() {\n\t\tthis._restoreSettings(this._initialSettings);\n\t\tthis._filterStepTwo = false;\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._focusRecentlyUsedControl();\n\t}\n\n\t/**\n\t * Sets current settings to ones passed as <code>settings</code> argument.\n\t *\n\t * @param {Object} settings\n\t */\n\t_restoreSettings(settings) {\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(settings));\n\t}\n\n\t/**\n\t * Stores <code>Sort Order</code> list as recently used control and its selected item in current state.\n\t */\n\t_onSortOrderChange(event) {\n\t\tthis._recentlyFocused = this._sortOrder;\n\t\tthis._currentSettings.sortOrder = this.initSortOrderItems.map(item => {\n\t\t\titem.selected = item.text === event.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n\n\t/**\n\t * Stores <code>Sort By</code> list as recently used control and its selected item in current state.\n\t */\n\t _onSortByChange(event) {\n\t\tthis._recentlyFocused = this._sortBy;\n\t\tthis._currentSettings.sortBy = this.initSortByItems.map(item => {\n\t\t\titem.selected = item.text === event.detail.item.innerText;\n\t\t\treturn item;\n\t\t});\n\n\t\t// Invalidate\n\t\tthis._currentSettings = JSON.parse(JSON.stringify(this._currentSettings));\n\t}\n}\n\nViewSettingsDialog.define();\n\nexport default ViewSettingsDialog;\n"]},"metadata":{},"sourceType":"module"}