{"ast":null,"code":"import CalendarDate from \"./CalendarDate.js\";\n/**\n * Adds or subtracts a given amount of days/months/years from a date.\n * If minDate or maxDate are given, the result will be enforced within these limits\n *\n * @param date CalendarDate instance\n * @param amount how many days/months/years to add (can be a negative number)\n * @param unit what to modify: \"day\", \"month\" or \"year\"\n * @param minDate minimum date to enforce\n * @param maxDate maximum date to enforce\n */\n\nvar modifyDateBy = function modifyDateBy(date, amount, unit) {\n  var minDate = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n  var maxDate = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n  var newDate = new CalendarDate(date);\n\n  if (unit === \"day\") {\n    newDate.setDate(date.getDate() + amount);\n  } else if (unit === \"month\") {\n    newDate.setMonth(date.getMonth() + amount);\n    var stillSameMonth = amount === -1 && newDate.getMonth() === date.getMonth(); // f.e. PageUp remained in the same month\n\n    var monthSkipped = amount === 1 && newDate.getMonth() - date.getMonth() > 1; // f.e. PageDown skipped a whole month\n\n    if (stillSameMonth || monthSkipped) {\n      // Select the last day of the month in any of these 2 scenarios\n      newDate.setDate(0);\n    }\n  } else {\n    newDate.setYear(date.getYear() + amount);\n\n    if (newDate.getMonth() !== date.getMonth()) {\n      // f.e. 29th Feb to next/prev year\n      newDate.setDate(0); // Select the last day of the month\n    }\n  }\n\n  if (minDate && newDate.valueOf() < minDate.valueOf()) {\n    return new CalendarDate(minDate);\n  }\n\n  if (maxDate && newDate.valueOf() > maxDate.valueOf()) {\n    return new CalendarDate(maxDate);\n  }\n\n  return newDate;\n};\n\nexport default modifyDateBy;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-localization/dist/dates/modifyDateBy.js"],"names":["CalendarDate","modifyDateBy","date","amount","unit","minDate","maxDate","newDate","setDate","getDate","setMonth","getMonth","stillSameMonth","monthSkipped","setYear","getYear","valueOf"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,mBAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,IAAD,EAAOC,MAAP,EAAeC,IAAf,EAAwD;AAAA,MAAnCC,OAAmC,uEAAzB,IAAyB;AAAA,MAAnBC,OAAmB,uEAAT,IAAS;AAC5E,MAAMC,OAAO,GAAG,IAAIP,YAAJ,CAAiBE,IAAjB,CAAhB;;AACA,MAAIE,IAAI,KAAK,KAAb,EAAoB;AACnBG,IAAAA,OAAO,CAACC,OAAR,CAAgBN,IAAI,CAACO,OAAL,KAAiBN,MAAjC;AACA,GAFD,MAEO,IAAIC,IAAI,KAAK,OAAb,EAAsB;AAC5BG,IAAAA,OAAO,CAACG,QAAR,CAAiBR,IAAI,CAACS,QAAL,KAAkBR,MAAnC;AACA,QAAMS,cAAc,GAAGT,MAAM,KAAK,CAAC,CAAZ,IAAiBI,OAAO,CAACI,QAAR,OAAuBT,IAAI,CAACS,QAAL,EAA/D,CAF4B,CAEoD;;AAChF,QAAME,YAAY,GAAGV,MAAM,KAAK,CAAX,IAAgBI,OAAO,CAACI,QAAR,KAAqBT,IAAI,CAACS,QAAL,EAArB,GAAuC,CAA5E,CAH4B,CAGmD;;AAC/E,QAAIC,cAAc,IAAIC,YAAtB,EAAoC;AAAE;AACrCN,MAAAA,OAAO,CAACC,OAAR,CAAgB,CAAhB;AACA;AACD,GAPM,MAOA;AACND,IAAAA,OAAO,CAACO,OAAR,CAAgBZ,IAAI,CAACa,OAAL,KAAiBZ,MAAjC;;AACA,QAAII,OAAO,CAACI,QAAR,OAAuBT,IAAI,CAACS,QAAL,EAA3B,EAA4C;AAAE;AAC7CJ,MAAAA,OAAO,CAACC,OAAR,CAAgB,CAAhB,EAD2C,CACvB;AACpB;AACD;;AAED,MAAIH,OAAO,IAAIE,OAAO,CAACS,OAAR,KAAoBX,OAAO,CAACW,OAAR,EAAnC,EAAsD;AACrD,WAAO,IAAIhB,YAAJ,CAAiBK,OAAjB,CAAP;AACA;;AAED,MAAIC,OAAO,IAAIC,OAAO,CAACS,OAAR,KAAoBV,OAAO,CAACU,OAAR,EAAnC,EAAsD;AACrD,WAAO,IAAIhB,YAAJ,CAAiBM,OAAjB,CAAP;AACA;;AAED,SAAOC,OAAP;AACA,CA3BD;;AA6BA,eAAeN,YAAf","sourcesContent":["import CalendarDate from \"./CalendarDate.js\";\n\n/**\n * Adds or subtracts a given amount of days/months/years from a date.\n * If minDate or maxDate are given, the result will be enforced within these limits\n *\n * @param date CalendarDate instance\n * @param amount how many days/months/years to add (can be a negative number)\n * @param unit what to modify: \"day\", \"month\" or \"year\"\n * @param minDate minimum date to enforce\n * @param maxDate maximum date to enforce\n */\nconst modifyDateBy = (date, amount, unit, minDate = null, maxDate = null) => {\n\tconst newDate = new CalendarDate(date);\n\tif (unit === \"day\") {\n\t\tnewDate.setDate(date.getDate() + amount);\n\t} else if (unit === \"month\") {\n\t\tnewDate.setMonth(date.getMonth() + amount);\n\t\tconst stillSameMonth = amount === -1 && newDate.getMonth() === date.getMonth(); // f.e. PageUp remained in the same month\n\t\tconst monthSkipped = amount === 1 && newDate.getMonth() - date.getMonth() > 1; // f.e. PageDown skipped a whole month\n\t\tif (stillSameMonth || monthSkipped) { // Select the last day of the month in any of these 2 scenarios\n\t\t\tnewDate.setDate(0);\n\t\t}\n\t} else {\n\t\tnewDate.setYear(date.getYear() + amount);\n\t\tif (newDate.getMonth() !== date.getMonth()) { // f.e. 29th Feb to next/prev year\n\t\t\tnewDate.setDate(0); // Select the last day of the month\n\t\t}\n\t}\n\n\tif (minDate && newDate.valueOf() < minDate.valueOf()) {\n\t\treturn new CalendarDate(minDate);\n\t}\n\n\tif (maxDate && newDate.valueOf() > maxDate.valueOf()) {\n\t\treturn new CalendarDate(maxDate);\n\t}\n\n\treturn newDate;\n};\n\nexport default modifyDateBy;\n"]},"metadata":{},"sourceType":"module"}