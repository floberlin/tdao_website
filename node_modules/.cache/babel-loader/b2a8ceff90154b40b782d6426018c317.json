{"ast":null,"code":"import BitArray from '../../../common/BitArray';\n\nvar BitArrayBuilder = function () {\n  function BitArrayBuilder() {}\n\n  BitArrayBuilder.buildBitArray = function (pairs) {\n    var charNumber = pairs.length * 2 - 1;\n\n    if (pairs[pairs.length - 1].getRightChar() == null) {\n      charNumber -= 1;\n    }\n\n    var size = 12 * charNumber;\n    var binary = new BitArray(size);\n    var accPos = 0;\n    var firstPair = pairs[0];\n    var firstValue = firstPair.getRightChar().getValue();\n\n    for (var i = 11; i >= 0; --i) {\n      if ((firstValue & 1 << i) != 0) {\n        binary.set(accPos);\n      }\n\n      accPos++;\n    }\n\n    for (var i = 1; i < pairs.length; ++i) {\n      var currentPair = pairs[i];\n      var leftValue = currentPair.getLeftChar().getValue();\n\n      for (var j = 11; j >= 0; --j) {\n        if ((leftValue & 1 << j) != 0) {\n          binary.set(accPos);\n        }\n\n        accPos++;\n      }\n\n      if (currentPair.getRightChar() != null) {\n        var rightValue = currentPair.getRightChar().getValue();\n\n        for (var j = 11; j >= 0; --j) {\n          if ((rightValue & 1 << j) != 0) {\n            binary.set(accPos);\n          }\n\n          accPos++;\n        }\n      }\n    }\n\n    return binary;\n  };\n\n  return BitArrayBuilder;\n}();\n\nexport default BitArrayBuilder;","map":{"version":3,"sources":["../../../../../../src/core/oned/rss/expanded/BitArrayBuilder.ts"],"names":[],"mappings":"AAAA,OAAO,QAAP,MAAqB,0BAArB;;AAGA,IAAA,eAAA,GAAA,YAAA;AAAA,WAAA,eAAA,GAAA,CA8CC;;AA5CQ,EAAA,eAAA,CAAA,aAAA,GAAP,UAAqB,KAArB,EAA+C;AAC7C,QAAI,UAAU,GAAY,KAAK,CAAC,MAAN,GAAe,CAAhB,GAAqB,CAA9C;;AACA,QAAI,KAAK,CAAC,KAAK,CAAC,MAAN,GAAe,CAAhB,CAAL,CAAwB,YAAxB,MAA0C,IAA9C,EAAoD;AAClD,MAAA,UAAU,IAAI,CAAd;AACD;;AAED,QAAI,IAAI,GAAW,KAAK,UAAxB;AAEA,QAAI,MAAM,GAAG,IAAI,QAAJ,CAAa,IAAb,CAAb;AACA,QAAI,MAAM,GAAG,CAAb;AAEA,QAAI,SAAS,GAAiB,KAAK,CAAC,CAAD,CAAnC;AACA,QAAI,UAAU,GAAG,SAAS,CAAC,YAAV,GAAyB,QAAzB,EAAjB;;AACA,SAAK,IAAI,CAAC,GAAG,EAAb,EAAiB,CAAC,IAAI,CAAtB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,UAAI,CAAC,UAAU,GAAI,KAAK,CAApB,KAA2B,CAA/B,EAAkC;AAChC,QAAA,MAAM,CAAC,GAAP,CAAW,MAAX;AACD;;AACD,MAAA,MAAM;AACP;;AAED,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,EAAE,CAApC,EAAuC;AACrC,UAAI,WAAW,GAAiB,KAAK,CAAC,CAAD,CAArC;AAEA,UAAI,SAAS,GAAG,WAAW,CAAC,WAAZ,GAA0B,QAA1B,EAAhB;;AACA,WAAK,IAAI,CAAC,GAAG,EAAb,EAAiB,CAAC,IAAI,CAAtB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,YAAI,CAAC,SAAS,GAAI,KAAK,CAAnB,KAA0B,CAA9B,EAAiC;AAC/B,UAAA,MAAM,CAAC,GAAP,CAAW,MAAX;AACD;;AACD,QAAA,MAAM;AACP;;AAED,UAAI,WAAW,CAAC,YAAZ,MAA8B,IAAlC,EAAwC;AACtC,YAAI,UAAU,GAAG,WAAW,CAAC,YAAZ,GAA2B,QAA3B,EAAjB;;AACA,aAAK,IAAI,CAAC,GAAG,EAAb,EAAiB,CAAC,IAAI,CAAtB,EAAyB,EAAE,CAA3B,EAA8B;AAC5B,cAAI,CAAC,UAAU,GAAI,KAAK,CAApB,KAA2B,CAA/B,EAAkC;AAChC,YAAA,MAAM,CAAC,GAAP,CAAW,MAAX;AACD;;AACD,UAAA,MAAM;AACP;AACF;AACF;;AACD,WAAO,MAAP;AACD,GA1CM;;AA4CT,SAAA,eAAA;AAAC,CA9CD,EAAA","sourceRoot":"","sourcesContent":["import BitArray from '../../../common/BitArray';\nvar BitArrayBuilder = /** @class */ (function () {\n    function BitArrayBuilder() {\n    }\n    BitArrayBuilder.buildBitArray = function (pairs) {\n        var charNumber = (pairs.length * 2) - 1;\n        if (pairs[pairs.length - 1].getRightChar() == null) {\n            charNumber -= 1;\n        }\n        var size = 12 * charNumber;\n        var binary = new BitArray(size);\n        var accPos = 0;\n        var firstPair = pairs[0];\n        var firstValue = firstPair.getRightChar().getValue();\n        for (var i = 11; i >= 0; --i) {\n            if ((firstValue & (1 << i)) != 0) {\n                binary.set(accPos);\n            }\n            accPos++;\n        }\n        for (var i = 1; i < pairs.length; ++i) {\n            var currentPair = pairs[i];\n            var leftValue = currentPair.getLeftChar().getValue();\n            for (var j = 11; j >= 0; --j) {\n                if ((leftValue & (1 << j)) != 0) {\n                    binary.set(accPos);\n                }\n                accPos++;\n            }\n            if (currentPair.getRightChar() != null) {\n                var rightValue = currentPair.getRightChar().getValue();\n                for (var j = 11; j >= 0; --j) {\n                    if ((rightValue & (1 << j)) != 0) {\n                        binary.set(accPos);\n                    }\n                    accPos++;\n                }\n            }\n        }\n        return binary;\n    };\n    return BitArrayBuilder;\n}());\nexport default BitArrayBuilder;\n//# sourceMappingURL=BitArrayBuilder.js.map"]},"metadata":{},"sourceType":"module"}