{"ast":null,"code":"import _toConsumableArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _wrapNativeSuper from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _objectSpread from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport merge from \"./thirdparty/merge.js\";\nimport { boot } from \"./Boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport getSingletonElementInstance from \"./util/getSingletonElementInstance.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport updateShadowRoot from \"./updateShadowRoot.js\";\nimport { renderDeferred, renderImmediately, cancelRender } from \"./Render.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport { observeDOMNode, unobserveDOMNode } from \"./DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport getEffectiveDir from \"./locale/getEffectiveDir.js\";\nimport DataType from \"./types/DataType.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { isSlot, getSlotName, getSlottedElementsList } from \"./util/SlotsHelper.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport getClassCopy from \"./util/getClassCopy.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\nimport preloadLinks from \"./theming/preloadLinks.js\";\nvar autoId = 0;\nvar elementTimeouts = new Map();\nvar uniqueDependenciesCache = new Map();\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\n\nfunction _invalidate(changeInfo) {\n  // Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n  // This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n  if (this._suppressInvalidation) {\n    return;\n  } // Call the onInvalidation hook\n\n\n  this.onInvalidation(changeInfo);\n\n  this._changedState.push(changeInfo);\n\n  renderDeferred(this);\n\n  this._eventProvider.fireEvent(\"invalidate\", _objectSpread(_objectSpread({}, changeInfo), {}, {\n    target: this\n  }));\n}\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\n\n\nvar UI5Element = /*#__PURE__*/function (_HTMLElement) {\n  _inherits(UI5Element, _HTMLElement);\n\n  var _super = _createSuper(UI5Element);\n\n  function UI5Element() {\n    var _this;\n\n    _classCallCheck(this, UI5Element);\n\n    _this = _super.call(this);\n    _this._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n\n    _this._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n\n    _this._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n\n    _this._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n\n    _this._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n\n    _this._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n\n    _this._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n\n    var deferredResolve;\n    _this._domRefReadyPromise = new Promise(function (resolve) {\n      deferredResolve = resolve;\n    });\n    _this._domRefReadyPromise._deferredResolve = deferredResolve;\n\n    _this._initializeState();\n\n    _this._upgradeAllProperties();\n\n    if (_this.constructor._needsShadowDOM()) {\n      _this.attachShadow({\n        mode: \"open\"\n      });\n    }\n\n    return _this;\n  }\n  /**\n   * Returns a unique ID for this UI5 Element\n   *\n   * @deprecated - This property is not guaranteed in future releases\n   * @protected\n   */\n\n\n  _createClass(UI5Element, [{\n    key: \"_id\",\n    get: function get() {\n      if (!this.__id) {\n        this.__id = \"ui5wc_\".concat(++autoId);\n      }\n\n      return this.__id;\n    }\n    /**\n     * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n     * @private\n     */\n\n  }, {\n    key: \"connectedCallback\",\n    value: function () {\n      var _connectedCallback = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var slotsAreManaged;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                this.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n                slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n                this._inDOM = true;\n\n                if (!slotsAreManaged) {\n                  _context.next = 7;\n                  break;\n                }\n\n                // always register the observer before yielding control to the main thread (await)\n                this._startObservingDOMChildren();\n\n                _context.next = 7;\n                return this._processChildren();\n\n              case 7:\n                if (this._inDOM) {\n                  _context.next = 9;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 9:\n                renderImmediately(this);\n\n                this._domRefReadyPromise._deferredResolve();\n\n                this._fullyConnected = true;\n\n                if (typeof this.onEnterDOM === \"function\") {\n                  this.onEnterDOM();\n                }\n\n              case 13:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function connectedCallback() {\n        return _connectedCallback.apply(this, arguments);\n      }\n\n      return connectedCallback;\n    }()\n    /**\n     * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n     * @private\n     */\n\n  }, {\n    key: \"disconnectedCallback\",\n    value: function disconnectedCallback() {\n      var slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n      this._inDOM = false;\n\n      if (slotsAreManaged) {\n        this._stopObservingDOMChildren();\n      }\n\n      if (this._fullyConnected) {\n        if (typeof this.onExitDOM === \"function\") {\n          this.onExitDOM();\n        }\n\n        this._fullyConnected = false;\n      }\n\n      if (this.staticAreaItem && this.staticAreaItem.parentElement) {\n        this.staticAreaItem.parentElement.removeChild(this.staticAreaItem);\n      }\n\n      cancelRender(this);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_startObservingDOMChildren\",\n    value: function _startObservingDOMChildren() {\n      var shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n\n      if (!shouldObserveChildren) {\n        return;\n      }\n\n      var canSlotText = this.constructor.getMetadata().canSlotText();\n      var mutationObserverOptions = {\n        childList: true,\n        subtree: canSlotText,\n        characterData: canSlotText\n      };\n      observeDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_stopObservingDOMChildren\",\n    value: function _stopObservingDOMChildren() {\n      unobserveDOMNode(this);\n    }\n    /**\n     * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n     * @private\n     */\n\n  }, {\n    key: \"_processChildren\",\n    value: function () {\n      var _processChildren2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var hasSlots;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                hasSlots = this.constructor.getMetadata().hasSlots();\n\n                if (!hasSlots) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                _context2.next = 4;\n                return this._updateSlots();\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _processChildren() {\n        return _processChildren2.apply(this, arguments);\n      }\n\n      return _processChildren;\n    }()\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_updateSlots\",\n    value: function () {\n      var _updateSlots2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this2 = this;\n\n        var slotsMap, canSlotText, domChildren, slotsCachedContentMap, propertyNameToSlotMap, _i, _Object$entries, _Object$entries$_i, slotName, slotData, propertyName, autoIncrementMap, slottedChildrenMap, allChildrenUpgraded, invalidated, _i2, _Object$entries2, _Object$entries2$_i, _slotName, _slotData, _propertyName;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                slotsMap = this.constructor.getMetadata().getSlots();\n                canSlotText = this.constructor.getMetadata().canSlotText();\n                domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n                slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n\n                propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n                // Init the _state object based on the supported slots and store the previous values\n\n                for (_i = 0, _Object$entries = Object.entries(slotsMap); _i < _Object$entries.length; _i++) {\n                  _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2), slotName = _Object$entries$_i[0], slotData = _Object$entries$_i[1];\n                  // eslint-disable-line\n                  propertyName = slotData.propertyName || slotName;\n                  propertyNameToSlotMap.set(propertyName, slotName);\n                  slotsCachedContentMap.set(propertyName, _toConsumableArray(this._state[propertyName]));\n\n                  this._clearSlot(slotName, slotData);\n                }\n\n                autoIncrementMap = new Map();\n                slottedChildrenMap = new Map();\n                allChildrenUpgraded = domChildren.map( /*#__PURE__*/function () {\n                  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(child, idx) {\n                    var slotName, slotData, validValues, nextIndex, localName, isCustomElement, isDefined, whenDefinedPromise, timeoutPromise, propertyName;\n                    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                      while (1) {\n                        switch (_context3.prev = _context3.next) {\n                          case 0:\n                            // Determine the type of the child (mainly by the slot attribute)\n                            slotName = getSlotName(child);\n                            slotData = slotsMap[slotName]; // Check if the slotName is supported\n\n                            if (!(slotData === undefined)) {\n                              _context3.next = 6;\n                              break;\n                            }\n\n                            validValues = Object.keys(slotsMap).join(\", \");\n                            console.warn(\"Unknown slotName: \".concat(slotName, \", ignoring\"), child, \"Valid values are: \".concat(validValues)); // eslint-disable-line\n\n                            return _context3.abrupt(\"return\");\n\n                          case 6:\n                            // For children that need individual slots, calculate them\n                            if (slotData.individualSlots) {\n                              nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n                              autoIncrementMap.set(slotName, nextIndex);\n                              child._individualSlot = \"\".concat(slotName, \"-\").concat(nextIndex);\n                            } // Await for not-yet-defined custom elements\n\n\n                            if (!(child instanceof HTMLElement)) {\n                              _context3.next = 19;\n                              break;\n                            }\n\n                            localName = child.localName;\n                            isCustomElement = localName.includes(\"-\");\n\n                            if (!isCustomElement) {\n                              _context3.next = 19;\n                              break;\n                            }\n\n                            isDefined = window.customElements.get(localName);\n\n                            if (isDefined) {\n                              _context3.next = 18;\n                              break;\n                            }\n\n                            whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n\n                            timeoutPromise = elementTimeouts.get(localName);\n\n                            if (!timeoutPromise) {\n                              timeoutPromise = new Promise(function (resolve) {\n                                return setTimeout(resolve, 1000);\n                              });\n                              elementTimeouts.set(localName, timeoutPromise);\n                            }\n\n                            _context3.next = 18;\n                            return Promise.race([whenDefinedPromise, timeoutPromise]);\n\n                          case 18:\n                            window.customElements.upgrade(child);\n\n                          case 19:\n                            child = _this2.constructor.getMetadata().constructor.validateSlotValue(child, slotData); // Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n\n                            if (child.isUI5Element && slotData.invalidateOnChildChange) {\n                              child.attachInvalidate(_this2._getChildChangeListener(slotName));\n                            } // Listen for the slotchange event if the child is a slot itself\n\n\n                            if (isSlot(child)) {\n                              _this2._attachSlotChange(child, slotName);\n                            }\n\n                            propertyName = slotData.propertyName || slotName;\n\n                            if (slottedChildrenMap.has(propertyName)) {\n                              slottedChildrenMap.get(propertyName).push({\n                                child: child,\n                                idx: idx\n                              });\n                            } else {\n                              slottedChildrenMap.set(propertyName, [{\n                                child: child,\n                                idx: idx\n                              }]);\n                            }\n\n                          case 24:\n                          case \"end\":\n                            return _context3.stop();\n                        }\n                      }\n                    }, _callee3);\n                  }));\n\n                  return function (_x, _x2) {\n                    return _ref.apply(this, arguments);\n                  };\n                }());\n                _context4.next = 11;\n                return Promise.all(allChildrenUpgraded);\n\n              case 11:\n                // Distribute the child in the _state object, keeping the Light DOM order,\n                // not the order elements are defined.\n                slottedChildrenMap.forEach(function (children, propertyName) {\n                  _this2._state[propertyName] = children.sort(function (a, b) {\n                    return a.idx - b.idx;\n                  }).map(function (_) {\n                    return _.child;\n                  });\n                }); // Compare the content of each slot with the cached values and invalidate for the ones that changed\n\n                invalidated = false;\n\n                for (_i2 = 0, _Object$entries2 = Object.entries(slotsMap); _i2 < _Object$entries2.length; _i2++) {\n                  _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2), _slotName = _Object$entries2$_i[0], _slotData = _Object$entries2$_i[1];\n                  // eslint-disable-line\n                  _propertyName = _slotData.propertyName || _slotName;\n\n                  if (!arraysAreEqual(slotsCachedContentMap.get(_propertyName), this._state[_propertyName])) {\n                    _invalidate.call(this, {\n                      type: \"slot\",\n                      name: propertyNameToSlotMap.get(_propertyName),\n                      reason: \"children\"\n                    });\n\n                    invalidated = true;\n                  }\n                } // If none of the slots had an invalidation due to changes to immediate children,\n                // the change is considered to be text content of the default slot\n\n\n                if (!invalidated) {\n                  _invalidate.call(this, {\n                    type: \"slot\",\n                    name: \"default\",\n                    reason: \"textcontent\"\n                  });\n                }\n\n              case 15:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function _updateSlots() {\n        return _updateSlots2.apply(this, arguments);\n      }\n\n      return _updateSlots;\n    }()\n    /**\n     * Removes all children from the slot and detaches listeners, if any\n     * @private\n     */\n\n  }, {\n    key: \"_clearSlot\",\n    value: function _clearSlot(slotName, slotData) {\n      var _this3 = this;\n\n      var propertyName = slotData.propertyName || slotName;\n      var children = this._state[propertyName];\n      children.forEach(function (child) {\n        if (child && child.isUI5Element) {\n          child.detachInvalidate(_this3._getChildChangeListener(slotName));\n        }\n\n        if (isSlot(child)) {\n          _this3._detachSlotChange(child, slotName);\n        }\n      });\n      this._state[propertyName] = [];\n    }\n    /**\n     * Attach a callback that will be executed whenever the component is invalidated\n     *\n     * @param callback\n     * @public\n     */\n\n  }, {\n    key: \"attachInvalidate\",\n    value: function attachInvalidate(callback) {\n      this._eventProvider.attachEvent(\"invalidate\", callback);\n    }\n    /**\n     * Detach the callback that is executed whenever the component is invalidated\n     *\n     * @param callback\n     * @public\n     */\n\n  }, {\n    key: \"detachInvalidate\",\n    value: function detachInvalidate(callback) {\n      this._eventProvider.detachEvent(\"invalidate\", callback);\n    }\n    /**\n     * Callback that is executed whenever a monitored child changes its state\n     *\n     * @param slotName the slot in which a child was invalidated\n     * @param childChangeInfo the changeInfo object for the child in the given slot\n     * @private\n     */\n\n  }, {\n    key: \"_onChildChange\",\n    value: function _onChildChange(slotName, childChangeInfo) {\n      if (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n        return;\n      } // The component should be invalidated as this type of change on the child is listened for\n      // However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n\n\n      _invalidate.call(this, {\n        type: \"slot\",\n        name: slotName,\n        reason: \"childchange\",\n        child: childChangeInfo.target\n      });\n    }\n    /**\n     * Do not override this method in derivatives of UI5Element\n     * @private\n     */\n\n  }, {\n    key: \"attributeChangedCallback\",\n    value: function attributeChangedCallback(name, oldValue, newValue) {\n      var properties = this.constructor.getMetadata().getProperties();\n      var realName = name.replace(/^ui5-/, \"\");\n      var nameInCamelCase = kebabToCamelCase(realName);\n\n      if (properties.hasOwnProperty(nameInCamelCase)) {\n        // eslint-disable-line\n        var propertyTypeClass = properties[nameInCamelCase].type;\n\n        if (propertyTypeClass === Boolean) {\n          newValue = newValue !== null;\n        } else if (isDescendantOf(propertyTypeClass, DataType)) {\n          newValue = propertyTypeClass.attributeToProperty(newValue);\n        }\n\n        this[nameInCamelCase] = newValue;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_updateAttribute\",\n    value: function _updateAttribute(name, newValue) {\n      if (!this.constructor.getMetadata().hasAttribute(name)) {\n        return;\n      }\n\n      var properties = this.constructor.getMetadata().getProperties();\n      var propertyTypeClass = properties[name].type;\n      var attrName = camelToKebabCase(name);\n      var attrValue = this.getAttribute(attrName);\n\n      if (propertyTypeClass === Boolean) {\n        if (newValue === true && attrValue === null) {\n          this.setAttribute(attrName, \"\");\n        } else if (newValue === false && attrValue !== null) {\n          this.removeAttribute(attrName);\n        }\n      } else if (isDescendantOf(propertyTypeClass, DataType)) {\n        this.setAttribute(attrName, propertyTypeClass.propertyToAttribute(newValue));\n      } else if (typeof newValue !== \"object\") {\n        if (attrValue !== newValue) {\n          this.setAttribute(attrName, newValue);\n        }\n      } // else { return; } // old object handling\n\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_upgradeProperty\",\n    value: function _upgradeProperty(prop) {\n      if (this.hasOwnProperty(prop)) {\n        // eslint-disable-line\n        var value = this[prop];\n        delete this[prop];\n        this[prop] = value;\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_upgradeAllProperties\",\n    value: function _upgradeAllProperties() {\n      var allProps = this.constructor.getMetadata().getPropertiesList();\n      allProps.forEach(this._upgradeProperty, this);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState() {\n      this._state = _objectSpread({}, this.constructor.getMetadata().getInitialState());\n    }\n    /**\n     * Returns a singleton event listener for the \"change\" event of a child in a given slot\n     *\n     * @param slotName the name of the slot, where the child is\n     * @returns {any}\n     * @private\n     */\n\n  }, {\n    key: \"_getChildChangeListener\",\n    value: function _getChildChangeListener(slotName) {\n      if (!this._childChangeListeners.has(slotName)) {\n        this._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n      }\n\n      return this._childChangeListeners.get(slotName);\n    }\n    /**\n     * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n     *\n     * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n     * @returns {any}\n     * @private\n     */\n\n  }, {\n    key: \"_getSlotChangeListener\",\n    value: function _getSlotChangeListener(slotName) {\n      if (!this._slotChangeListeners.has(slotName)) {\n        this._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n      }\n\n      return this._slotChangeListeners.get(slotName);\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_attachSlotChange\",\n    value: function _attachSlotChange(child, slotName) {\n      child.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_detachSlotChange\",\n    value: function _detachSlotChange(child, slotName) {\n      child.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n    }\n    /**\n     * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n     *\n     * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n     * @private\n     */\n\n  }, {\n    key: \"_onSlotChange\",\n    value: function _onSlotChange(slotName) {\n      _invalidate.call(this, {\n        type: \"slot\",\n        name: slotName,\n        reason: \"slotchange\"\n      });\n    }\n    /**\n     * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n     *\n     * @param  changeInfo An object with information about the change that caused invalidation.\n     * The object can have the following properties:\n     *  - type: (property|slot) tells what caused the invalidation\n     *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n     *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n     *\n     *  - name: the name of the property or slot that caused the invalidation\n     *\n     *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n     *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n     *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n     *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n     *      Can only trigger if the child of a slot is a slot element itself.\n     *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n     *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n     *\n     *  - newValue: the new value of the property (for type=\"property\" only)\n     *\n     *  - oldValue: the old value of the property (for type=\"property\" only)\n     *\n     *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n     *\n     * @public\n     */\n\n  }, {\n    key: \"onInvalidation\",\n    value: function onInvalidation(changeInfo) {}\n    /**\n     * Do not call this method directly, only intended to be called by js\n     * @protected\n     */\n\n  }, {\n    key: \"_render\",\n    value: function _render() {\n      var hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots(); // suppress invalidation to prevent state changes scheduling another rendering\n\n      this._suppressInvalidation = true;\n\n      if (typeof this.onBeforeRendering === \"function\") {\n        this.onBeforeRendering();\n      } // Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n\n\n      if (this._onComponentStateFinalized) {\n        this._onComponentStateFinalized();\n      } // resume normal invalidation handling\n\n\n      this._suppressInvalidation = false; // Update the shadow root with the render result\n\n      /*\n      if (this._changedState.length) {\n      \tlet element = this.localName;\n      \tif (this.id) {\n      \t\telement = `${element}#${this.id}`;\n      \t}\n      \tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n      \t\tlet res = `${x.type}`;\n      \t\tif (x.reason) {\n      \t\t\tres = `${res}(${x.reason})`;\n      \t\t}\n      \t\tres = `${res}: ${x.name}`;\n      \t\tif (x.type === \"property\") {\n      \t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n      \t\t}\n      \t\t\treturn res;\n      \t}));\n      }\n      */\n\n      this._changedState = []; // Update shadow root and static area item\n\n      if (this.constructor._needsShadowDOM()) {\n        updateShadowRoot(this);\n      }\n\n      if (this.staticAreaItem) {\n        this.staticAreaItem.update();\n      } // Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n\n\n      if (hasIndividualSlots) {\n        this._assignIndividualSlotsToChildren();\n      } // Call the onAfterRendering hook\n\n\n      if (typeof this.onAfterRendering === \"function\") {\n        this.onAfterRendering();\n      }\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_assignIndividualSlotsToChildren\",\n    value: function _assignIndividualSlotsToChildren() {\n      var domChildren = Array.from(this.children);\n      domChildren.forEach(function (child) {\n        if (child._individualSlot) {\n          child.setAttribute(\"slot\", child._individualSlot);\n        }\n      });\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_waitForDomRef\",\n    value: function _waitForDomRef() {\n      return this._domRefReadyPromise;\n    }\n    /**\n     * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n     * *Note:* For logical (abstract) elements (items, options, etc...), returns the part of the parent's DOM that represents this option\n     * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getDomRef\",\n    value: function getDomRef() {\n      // If a component set _getRealDomRef to its children, use the return value of this function\n      if (typeof this._getRealDomRef === \"function\") {\n        return this._getRealDomRef();\n      }\n\n      if (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n        return;\n      }\n\n      var children = _toConsumableArray(this.shadowRoot.children).filter(function (child) {\n        return ![\"link\", \"style\"].includes(child.localName);\n      });\n\n      if (children.length !== 1) {\n        console.warn(\"The shadow DOM for \".concat(this.constructor.getMetadata().getTag(), \" does not have a top level element, the getDomRef() method might not work as expected\")); // eslint-disable-line\n      }\n\n      return children[0];\n    }\n    /**\n     * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n     * This is the element that will receive the focus by default.\n     * @public\n     */\n\n  }, {\n    key: \"getFocusDomRef\",\n    value: function getFocusDomRef() {\n      var domRef = this.getDomRef();\n\n      if (domRef) {\n        var focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n        return focusRef || domRef;\n      }\n    }\n    /**\n     * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n     * This is the element that will receive the focus by default.\n     * @public\n     */\n\n  }, {\n    key: \"getFocusDomRefAsync\",\n    value: function () {\n      var _getFocusDomRefAsync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.next = 2;\n                return this._waitForDomRef();\n\n              case 2:\n                return _context5.abrupt(\"return\", this.getFocusDomRef());\n\n              case 3:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getFocusDomRefAsync() {\n        return _getFocusDomRefAsync.apply(this, arguments);\n      }\n\n      return getFocusDomRefAsync;\n    }()\n    /**\n     * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n     * @public\n     */\n\n  }, {\n    key: \"focus\",\n    value: function () {\n      var _focus = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var focusDomRef;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.next = 2;\n                return this._waitForDomRef();\n\n              case 2:\n                focusDomRef = this.getFocusDomRef();\n\n                if (focusDomRef && typeof focusDomRef.focus === \"function\") {\n                  focusDomRef.focus();\n                }\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function focus() {\n        return _focus.apply(this, arguments);\n      }\n\n      return focus;\n    }()\n    /**\n     *\n     * @public\n     * @param name - name of the event\n     * @param data - additional data for the event\n     * @param cancelable - true, if the user can call preventDefault on the event object\n     * @param bubbles - true, if the event bubbles\n     * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n     */\n\n  }, {\n    key: \"fireEvent\",\n    value: function fireEvent(name, data) {\n      var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var bubbles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n\n      var eventResult = this._fireEvent(name, data, cancelable, bubbles);\n\n      var camelCaseEventName = kebabToCamelCase(name);\n\n      if (camelCaseEventName !== name) {\n        return eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n      }\n\n      return eventResult;\n    }\n  }, {\n    key: \"_fireEvent\",\n    value: function _fireEvent(name, data) {\n      var cancelable = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var bubbles = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n      var noConflictEvent = new CustomEvent(\"ui5-\".concat(name), {\n        detail: data,\n        composed: false,\n        bubbles: bubbles,\n        cancelable: cancelable\n      }); // This will be false if the no-conflict event is prevented\n\n      var noConflictEventResult = this.dispatchEvent(noConflictEvent);\n\n      if (skipOriginalEvent(name)) {\n        return noConflictEventResult;\n      }\n\n      var normalEvent = new CustomEvent(name, {\n        detail: data,\n        composed: false,\n        bubbles: bubbles,\n        cancelable: cancelable\n      }); // This will be false if the normal event is prevented\n\n      var normalEventResult = this.dispatchEvent(normalEvent); // Return false if any of the two events was prevented (its result was false).\n\n      return normalEventResult && noConflictEventResult;\n    }\n    /**\n     * Returns the actual children, associated with a slot.\n     * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n     * @public\n     */\n\n  }, {\n    key: \"getSlottedNodes\",\n    value: function getSlottedNodes(slotName) {\n      return getSlottedElementsList(this[slotName]);\n    }\n    /**\n     * Determines whether the component should be rendered in RTL mode or not.\n     * Returns: \"rtl\", \"ltr\" or undefined\n     *\n     * @public\n     * @returns {String|undefined}\n     */\n\n  }, {\n    key: \"effectiveDir\",\n    get: function get() {\n      markAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n\n      return getEffectiveDir(this);\n    }\n    /**\n     * Used to duck-type UI5 elements without using instanceof\n     * @returns {boolean}\n     * @public\n     */\n\n  }, {\n    key: \"isUI5Element\",\n    get: function get() {\n      return true;\n    }\n    /**\n     * Do not override this method in derivatives of UI5Element, use metadata properties instead\n     * @private\n     */\n\n  }, {\n    key: \"getStaticAreaItemDomRef\",\n    value:\n    /**\n     * @public\n     */\n    function getStaticAreaItemDomRef() {\n      if (!this.constructor._needsStaticArea()) {\n        throw new Error(\"This component does not use the static area\");\n      }\n\n      if (!this.staticAreaItem) {\n        this.staticAreaItem = StaticAreaItem.createInstance();\n        this.staticAreaItem.setOwnerElement(this);\n      }\n\n      if (!this.staticAreaItem.parentElement) {\n        getSingletonElementInstance(\"ui5-static-area\").appendChild(this.staticAreaItem);\n      }\n\n      return this.staticAreaItem.getDomRef();\n    }\n    /**\n     * @private\n     */\n\n  }], [{\n    key: \"observedAttributes\",\n    get: function get() {\n      return this.getMetadata().getAttributesList();\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_needsShadowDOM\",\n    value: function _needsShadowDOM() {\n      return !!this.template;\n    }\n    /**\n     * @private\n     */\n\n  }, {\n    key: \"_needsStaticArea\",\n    value: function _needsStaticArea() {\n      return !!this.staticAreaTemplate;\n    }\n  }, {\n    key: \"_generateAccessors\",\n    value: function _generateAccessors() {\n      var proto = this.prototype;\n      var slotsAreManaged = this.getMetadata().slotsAreManaged(); // Properties\n\n      var properties = this.getMetadata().getProperties();\n\n      var _loop = function _loop() {\n        var _Object$entries3$_i = _slicedToArray(_Object$entries3[_i3], 2),\n            prop = _Object$entries3$_i[0],\n            propData = _Object$entries3$_i[1];\n\n        // eslint-disable-line\n        if (!isValidPropertyName(prop)) {\n          console.warn(\"\\\"\".concat(prop, \"\\\" is not a valid property name. Use a name that does not collide with DOM APIs\"));\n          /* eslint-disable-line */\n        }\n\n        if (propData.type === Boolean && propData.defaultValue) {\n          throw new Error(\"Cannot set a default value for property \\\"\".concat(prop, \"\\\". All booleans are false by default.\"));\n        }\n\n        if (propData.type === Array) {\n          throw new Error(\"Wrong type for property \\\"\".concat(prop, \"\\\". Properties cannot be of type Array - use \\\"multiple: true\\\" and set \\\"type\\\" to the single value type, such as \\\"String\\\", \\\"Object\\\", etc...\"));\n        }\n\n        if (propData.type === Object && propData.defaultValue) {\n          throw new Error(\"Cannot set a default value for property \\\"\".concat(prop, \"\\\". All properties of type \\\"Object\\\" are empty objects by default.\"));\n        }\n\n        if (propData.multiple && propData.defaultValue) {\n          throw new Error(\"Cannot set a default value for property \\\"\".concat(prop, \"\\\". All multiple properties are empty arrays by default.\"));\n        }\n\n        Object.defineProperty(proto, prop, {\n          get: function get() {\n            if (this._state[prop] !== undefined) {\n              return this._state[prop];\n            }\n\n            var propDefaultValue = propData.defaultValue;\n\n            if (propData.type === Boolean) {\n              return false;\n            } else if (propData.type === String) {\n              // eslint-disable-line\n              return propDefaultValue;\n            } else if (propData.multiple) {\n              // eslint-disable-line\n              return [];\n            } else {\n              return propDefaultValue;\n            }\n          },\n          set: function set(value) {\n            var isDifferent;\n            value = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n            var oldState = this._state[prop];\n\n            if (propData.multiple && propData.compareValues) {\n              isDifferent = !arraysAreEqual(oldState, value);\n            } else if (isDescendantOf(propData.type, DataType)) {\n              isDifferent = !propData.type.valuesAreEqual(oldState, value);\n            } else {\n              isDifferent = oldState !== value;\n            }\n\n            if (isDifferent) {\n              this._state[prop] = value;\n\n              _invalidate.call(this, {\n                type: \"property\",\n                name: prop,\n                newValue: value,\n                oldValue: oldState\n              });\n\n              this._updateAttribute(prop, value);\n            }\n          }\n        });\n      };\n\n      for (var _i3 = 0, _Object$entries3 = Object.entries(properties); _i3 < _Object$entries3.length; _i3++) {\n        _loop();\n      } // Slots\n\n\n      if (slotsAreManaged) {\n        var slots = this.getMetadata().getSlots();\n\n        var _loop2 = function _loop2() {\n          var _Object$entries4$_i = _slicedToArray(_Object$entries4[_i4], 2),\n              slotName = _Object$entries4$_i[0],\n              slotData = _Object$entries4$_i[1];\n\n          // eslint-disable-line\n          if (!isValidPropertyName(slotName)) {\n            console.warn(\"\\\"\".concat(slotName, \"\\\" is not a valid property name. Use a name that does not collide with DOM APIs\"));\n            /* eslint-disable-line */\n          }\n\n          var propertyName = slotData.propertyName || slotName;\n          Object.defineProperty(proto, propertyName, {\n            get: function get() {\n              if (this._state[propertyName] !== undefined) {\n                return this._state[propertyName];\n              }\n\n              return [];\n            },\n            set: function set() {\n              throw new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n            }\n          });\n        };\n\n        for (var _i4 = 0, _Object$entries4 = Object.entries(slots); _i4 < _Object$entries4.length; _i4++) {\n          _loop2();\n        }\n      }\n    }\n    /**\n     * Returns the metadata object for this UI5 Web Component Class\n     * @protected\n     */\n\n  }, {\n    key: \"metadata\",\n    get: function get() {\n      return {};\n    }\n    /**\n     * Returns the CSS for this UI5 Web Component Class\n     * @protected\n     */\n\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return \"\";\n    }\n    /**\n     * Returns the Static Area CSS for this UI5 Web Component Class\n     * @protected\n     */\n\n  }, {\n    key: \"staticAreaStyles\",\n    get: function get() {\n      return \"\";\n    }\n    /**\n     * Returns an array with the dependencies for this UI5 Web Component, which could be:\n     *  - composed components (used in its shadow root or static area item)\n     *  - slotted components that the component may need to communicate with\n     *\n     * @protected\n     */\n\n  }, {\n    key: \"dependencies\",\n    get: function get() {\n      return [];\n    }\n    /**\n     * Returns a list of the unique dependencies for this UI5 Web Component\n     *\n     * @public\n     */\n\n  }, {\n    key: \"getUniqueDependencies\",\n    value: function getUniqueDependencies() {\n      if (!uniqueDependenciesCache.has(this)) {\n        var filtered = this.dependencies.filter(function (dep, index, deps) {\n          return deps.indexOf(dep) === index;\n        });\n        uniqueDependenciesCache.set(this, filtered);\n      }\n\n      return uniqueDependenciesCache.get(this);\n    }\n    /**\n     * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n     *\n     * @returns {Promise<any[]>}\n     */\n\n  }, {\n    key: \"whenDependenciesDefined\",\n    value: function whenDependenciesDefined() {\n      return Promise.all(this.getUniqueDependencies().map(function (dep) {\n        return dep.define();\n      }));\n    }\n    /**\n     * Hook that will be called upon custom element definition\n     *\n     * @protected\n     * @returns {Promise<void>}\n     */\n\n  }, {\n    key: \"onDefine\",\n    value: function () {\n      var _onDefine = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                return _context7.abrupt(\"return\", Promise.resolve());\n\n              case 1:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n\n      function onDefine() {\n        return _onDefine.apply(this, arguments);\n      }\n\n      return onDefine;\n    }()\n    /**\n     * Registers a UI5 Web Component in the browser window object\n     * @public\n     * @returns {Promise<UI5Element>}\n     */\n\n  }, {\n    key: \"define\",\n    value: function () {\n      var _define = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        var tag, altTag, definedLocally, definedGlobally;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                _context8.next = 2;\n                return boot();\n\n              case 2:\n                _context8.next = 4;\n                return Promise.all([this.whenDependenciesDefined(), this.onDefine()]);\n\n              case 4:\n                tag = this.getMetadata().getTag();\n                altTag = this.getMetadata().getAltTag();\n                definedLocally = isTagRegistered(tag);\n                definedGlobally = customElements.get(tag);\n\n                if (definedGlobally && !definedLocally) {\n                  recordTagRegistrationFailure(tag);\n                } else if (!definedGlobally) {\n                  this._generateAccessors();\n\n                  registerTag(tag);\n                  window.customElements.define(tag, this);\n                  preloadLinks(this);\n\n                  if (altTag && !customElements.get(altTag)) {\n                    registerTag(altTag);\n                    window.customElements.define(altTag, getClassCopy(this, function () {\n                      console.log(\"The \".concat(altTag, \" tag is deprecated and will be removed in the next release, please use \").concat(tag, \" instead.\")); // eslint-disable-line\n                    }));\n                  }\n                }\n\n                return _context8.abrupt(\"return\", this);\n\n              case 10:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function define() {\n        return _define.apply(this, arguments);\n      }\n\n      return define;\n    }()\n    /**\n     * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n     * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n     * @public\n     * @returns {UI5ElementMetadata}\n     */\n\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata() {\n      if (this.hasOwnProperty(\"_metadata\")) {\n        // eslint-disable-line\n        return this._metadata;\n      }\n\n      var metadataObjects = [this.metadata];\n      var klass = this; // eslint-disable-line\n\n      while (klass !== UI5Element) {\n        klass = Object.getPrototypeOf(klass);\n        metadataObjects.unshift(klass.metadata);\n      }\n\n      var mergedMetadata = merge.apply(void 0, [{}].concat(metadataObjects));\n      this._metadata = new UI5ElementMetadata(mergedMetadata);\n      return this._metadata;\n    }\n  }]);\n\n  return UI5Element;\n}( /*#__PURE__*/_wrapNativeSuper(HTMLElement));\n\nexport default UI5Element;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/UI5Element.js"],"names":["merge","boot","UI5ElementMetadata","EventProvider","getSingletonElementInstance","StaticAreaItem","updateShadowRoot","renderDeferred","renderImmediately","cancelRender","registerTag","isTagRegistered","recordTagRegistrationFailure","observeDOMNode","unobserveDOMNode","skipOriginalEvent","getEffectiveDir","DataType","kebabToCamelCase","camelToKebabCase","isValidPropertyName","isDescendantOf","isSlot","getSlotName","getSlottedElementsList","arraysAreEqual","getClassCopy","markAsRtlAware","preloadLinks","autoId","elementTimeouts","Map","uniqueDependenciesCache","_invalidate","changeInfo","_suppressInvalidation","onInvalidation","_changedState","push","_eventProvider","fireEvent","target","UI5Element","_inDOM","_fullyConnected","_childChangeListeners","_slotChangeListeners","deferredResolve","_domRefReadyPromise","Promise","resolve","_deferredResolve","_initializeState","_upgradeAllProperties","constructor","_needsShadowDOM","attachShadow","mode","__id","setAttribute","getMetadata","getPureTag","slotsAreManaged","_startObservingDOMChildren","_processChildren","onEnterDOM","_stopObservingDOMChildren","onExitDOM","staticAreaItem","parentElement","removeChild","shouldObserveChildren","hasSlots","canSlotText","mutationObserverOptions","childList","subtree","characterData","bind","_updateSlots","slotsMap","getSlots","domChildren","Array","from","childNodes","children","slotsCachedContentMap","propertyNameToSlotMap","Object","entries","slotName","slotData","propertyName","set","_state","_clearSlot","autoIncrementMap","slottedChildrenMap","allChildrenUpgraded","map","child","idx","undefined","validValues","keys","join","console","warn","individualSlots","nextIndex","get","_individualSlot","HTMLElement","localName","isCustomElement","includes","isDefined","window","customElements","whenDefinedPromise","whenDefined","timeoutPromise","setTimeout","race","upgrade","validateSlotValue","isUI5Element","invalidateOnChildChange","attachInvalidate","_getChildChangeListener","_attachSlotChange","has","all","forEach","sort","a","b","_","invalidated","call","type","name","reason","detachInvalidate","_detachSlotChange","callback","attachEvent","detachEvent","childChangeInfo","shouldInvalidateOnChildChange","oldValue","newValue","properties","getProperties","realName","replace","nameInCamelCase","hasOwnProperty","propertyTypeClass","Boolean","attributeToProperty","hasAttribute","attrName","attrValue","getAttribute","removeAttribute","propertyToAttribute","prop","value","allProps","getPropertiesList","_upgradeProperty","getInitialState","_onChildChange","_onSlotChange","addEventListener","_getSlotChangeListener","removeEventListener","hasIndividualSlots","onBeforeRendering","_onComponentStateFinalized","update","_assignIndividualSlotsToChildren","onAfterRendering","_getRealDomRef","shadowRoot","length","filter","getTag","domRef","getDomRef","focusRef","querySelector","_waitForDomRef","getFocusDomRef","focusDomRef","focus","data","cancelable","bubbles","eventResult","_fireEvent","camelCaseEventName","noConflictEvent","CustomEvent","detail","composed","noConflictEventResult","dispatchEvent","normalEvent","normalEventResult","_needsStaticArea","Error","createInstance","setOwnerElement","appendChild","getAttributesList","template","staticAreaTemplate","proto","prototype","propData","defaultValue","multiple","defineProperty","propDefaultValue","String","isDifferent","validatePropertyValue","oldState","compareValues","valuesAreEqual","_updateAttribute","slots","filtered","dependencies","dep","index","deps","indexOf","getUniqueDependencies","define","whenDependenciesDefined","onDefine","tag","altTag","getAltTag","definedLocally","definedGlobally","_generateAccessors","log","_metadata","metadataObjects","metadata","klass","getPrototypeOf","unshift","mergedMetadata"],"mappings":"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","sourcesContent":["import merge from \"./thirdparty/merge.js\";\nimport { boot } from \"./Boot.js\";\nimport UI5ElementMetadata from \"./UI5ElementMetadata.js\";\nimport EventProvider from \"./EventProvider.js\";\nimport getSingletonElementInstance from \"./util/getSingletonElementInstance.js\";\nimport StaticAreaItem from \"./StaticAreaItem.js\";\nimport updateShadowRoot from \"./updateShadowRoot.js\";\nimport { renderDeferred, renderImmediately, cancelRender } from \"./Render.js\";\nimport { registerTag, isTagRegistered, recordTagRegistrationFailure } from \"./CustomElementsRegistry.js\";\nimport { observeDOMNode, unobserveDOMNode } from \"./DOMObserver.js\";\nimport { skipOriginalEvent } from \"./config/NoConflict.js\";\nimport getEffectiveDir from \"./locale/getEffectiveDir.js\";\nimport DataType from \"./types/DataType.js\";\nimport { kebabToCamelCase, camelToKebabCase } from \"./util/StringHelper.js\";\nimport isValidPropertyName from \"./util/isValidPropertyName.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { isSlot, getSlotName, getSlottedElementsList } from \"./util/SlotsHelper.js\";\nimport arraysAreEqual from \"./util/arraysAreEqual.js\";\nimport getClassCopy from \"./util/getClassCopy.js\";\nimport { markAsRtlAware } from \"./locale/RTLAwareRegistry.js\";\nimport preloadLinks from \"./theming/preloadLinks.js\";\n\nlet autoId = 0;\n\nconst elementTimeouts = new Map();\nconst uniqueDependenciesCache = new Map();\n\n/**\n * Triggers re-rendering of a UI5Element instance due to state change.\n *\n * @param  changeInfo An object with information about the change that caused invalidation.\n * @private\n */\nfunction _invalidate(changeInfo) {\n\t// Invalidation should be suppressed: 1) before the component is rendered for the first time 2) and during the execution of onBeforeRendering\n\t// This is necessary not only as an optimization, but also to avoid infinite loops on invalidation between children and parents (when invalidateOnChildChange is used)\n\tif (this._suppressInvalidation) {\n\t\treturn;\n\t}\n\n\t// Call the onInvalidation hook\n\tthis.onInvalidation(changeInfo);\n\n\tthis._changedState.push(changeInfo);\n\trenderDeferred(this);\n\tthis._eventProvider.fireEvent(\"invalidate\", { ...changeInfo, target: this });\n}\n\n/**\n * Base class for all UI5 Web Components\n *\n * @class\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.base.UI5Element\n * @extends HTMLElement\n * @public\n */\nclass UI5Element extends HTMLElement {\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._changedState = []; // Filled on each invalidation, cleared on re-render (used for debugging)\n\t\tthis._suppressInvalidation = true; // A flag telling whether all invalidations should be ignored. Initialized with \"true\" because a UI5Element can not be invalidated until it is rendered for the first time\n\t\tthis._inDOM = false; // A flag telling whether the UI5Element is currently in the DOM tree of the document or not\n\t\tthis._fullyConnected = false; // A flag telling whether the UI5Element's onEnterDOM hook was called (since it's possible to have the element removed from DOM before that)\n\t\tthis._childChangeListeners = new Map(); // used to store lazy listeners per slot for the child change event of every child inside that slot\n\t\tthis._slotChangeListeners = new Map(); // used to store lazy listeners per slot for the slotchange event of all slot children inside that slot\n\t\tthis._eventProvider = new EventProvider(); // used by parent components for listening to changes to child components\n\t\tlet deferredResolve;\n\t\tthis._domRefReadyPromise = new Promise(resolve => {\n\t\t\tdeferredResolve = resolve;\n\t\t});\n\t\tthis._domRefReadyPromise._deferredResolve = deferredResolve;\n\n\t\tthis._initializeState();\n\t\tthis._upgradeAllProperties();\n\n\t\tif (this.constructor._needsShadowDOM()) {\n\t\t\tthis.attachShadow({ mode: \"open\" });\n\t\t}\n\t}\n\n\t/**\n\t * Returns a unique ID for this UI5 Element\n\t *\n\t * @deprecated - This property is not guaranteed in future releases\n\t * @protected\n\t */\n\tget _id() {\n\t\tif (!this.__id) {\n\t\t\tthis.__id = `ui5wc_${++autoId}`;\n\t\t}\n\n\t\treturn this.__id;\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onEnterDOM\" only\n\t * @private\n\t */\n\tasync connectedCallback() {\n\t\tthis.setAttribute(this.constructor.getMetadata().getPureTag(), \"\");\n\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = true;\n\n\t\tif (slotsAreManaged) {\n\t\t\t// always register the observer before yielding control to the main thread (await)\n\t\t\tthis._startObservingDOMChildren();\n\t\t\tawait this._processChildren();\n\t\t}\n\n\t\tif (!this._inDOM) { // Component removed from DOM while _processChildren was running\n\t\t\treturn;\n\t\t}\n\n\t\trenderImmediately(this);\n\t\tthis._domRefReadyPromise._deferredResolve();\n\t\tthis._fullyConnected = true;\n\t\tif (typeof this.onEnterDOM === \"function\") {\n\t\t\tthis.onEnterDOM();\n\t\t}\n\t}\n\n\t/**\n\t * Do not call this method from derivatives of UI5Element, use \"onExitDOM\" only\n\t * @private\n\t */\n\tdisconnectedCallback() {\n\t\tconst slotsAreManaged = this.constructor.getMetadata().slotsAreManaged();\n\n\t\tthis._inDOM = false;\n\n\t\tif (slotsAreManaged) {\n\t\t\tthis._stopObservingDOMChildren();\n\t\t}\n\n\t\tif (this._fullyConnected) {\n\t\t\tif (typeof this.onExitDOM === \"function\") {\n\t\t\t\tthis.onExitDOM();\n\t\t\t}\n\t\t\tthis._fullyConnected = false;\n\t\t}\n\n\t\tif (this.staticAreaItem && this.staticAreaItem.parentElement) {\n\t\t\tthis.staticAreaItem.parentElement.removeChild(this.staticAreaItem);\n\t\t}\n\n\t\tcancelRender(this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_startObservingDOMChildren() {\n\t\tconst shouldObserveChildren = this.constructor.getMetadata().hasSlots();\n\t\tif (!shouldObserveChildren) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst mutationObserverOptions = {\n\t\t\tchildList: true,\n\t\t\tsubtree: canSlotText,\n\t\t\tcharacterData: canSlotText,\n\t\t};\n\t\tobserveDOMNode(this, this._processChildren.bind(this), mutationObserverOptions);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_stopObservingDOMChildren() {\n\t\tunobserveDOMNode(this);\n\t}\n\n\t/**\n\t * Note: this method is also manually called by \"compatibility/patchNodeValue.js\"\n\t * @private\n\t */\n\tasync _processChildren() {\n\t\tconst hasSlots = this.constructor.getMetadata().hasSlots();\n\t\tif (hasSlots) {\n\t\t\tawait this._updateSlots();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tasync _updateSlots() {\n\t\tconst slotsMap = this.constructor.getMetadata().getSlots();\n\t\tconst canSlotText = this.constructor.getMetadata().canSlotText();\n\t\tconst domChildren = Array.from(canSlotText ? this.childNodes : this.children);\n\n\t\tconst slotsCachedContentMap = new Map(); // Store here the content of each slot before the mutation occurred\n\t\tconst propertyNameToSlotMap = new Map(); // Used for reverse lookup to determine to which slot the property name corresponds\n\n\t\t// Init the _state object based on the supported slots and store the previous values\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tpropertyNameToSlotMap.set(propertyName, slotName);\n\t\t\tslotsCachedContentMap.set(propertyName, [...this._state[propertyName]]);\n\t\t\tthis._clearSlot(slotName, slotData);\n\t\t}\n\n\t\tconst autoIncrementMap = new Map();\n\t\tconst slottedChildrenMap = new Map();\n\n\t\tconst allChildrenUpgraded = domChildren.map(async (child, idx) => {\n\t\t\t// Determine the type of the child (mainly by the slot attribute)\n\t\t\tconst slotName = getSlotName(child);\n\t\t\tconst slotData = slotsMap[slotName];\n\n\t\t\t// Check if the slotName is supported\n\t\t\tif (slotData === undefined) {\n\t\t\t\tconst validValues = Object.keys(slotsMap).join(\", \");\n\t\t\t\tconsole.warn(`Unknown slotName: ${slotName}, ignoring`, child, `Valid values are: ${validValues}`); // eslint-disable-line\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// For children that need individual slots, calculate them\n\t\t\tif (slotData.individualSlots) {\n\t\t\t\tconst nextIndex = (autoIncrementMap.get(slotName) || 0) + 1;\n\t\t\t\tautoIncrementMap.set(slotName, nextIndex);\n\t\t\t\tchild._individualSlot = `${slotName}-${nextIndex}`;\n\t\t\t}\n\n\t\t\t// Await for not-yet-defined custom elements\n\t\t\tif (child instanceof HTMLElement) {\n\t\t\t\tconst localName = child.localName;\n\t\t\t\tconst isCustomElement = localName.includes(\"-\");\n\t\t\t\tif (isCustomElement) {\n\t\t\t\t\tconst isDefined = window.customElements.get(localName);\n\t\t\t\t\tif (!isDefined) {\n\t\t\t\t\t\tconst whenDefinedPromise = window.customElements.whenDefined(localName); // Class registered, but instances not upgraded yet\n\t\t\t\t\t\tlet timeoutPromise = elementTimeouts.get(localName);\n\t\t\t\t\t\tif (!timeoutPromise) {\n\t\t\t\t\t\t\ttimeoutPromise = new Promise(resolve => setTimeout(resolve, 1000));\n\t\t\t\t\t\t\telementTimeouts.set(localName, timeoutPromise);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tawait Promise.race([whenDefinedPromise, timeoutPromise]);\n\t\t\t\t\t}\n\t\t\t\t\twindow.customElements.upgrade(child);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tchild = this.constructor.getMetadata().constructor.validateSlotValue(child, slotData);\n\n\t\t\t// Listen for any invalidation on the child if invalidateOnChildChange is true or an object (ignore when false or not set)\n\t\t\tif (child.isUI5Element && slotData.invalidateOnChildChange) {\n\t\t\t\tchild.attachInvalidate(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\t// Listen for the slotchange event if the child is a slot itself\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._attachSlotChange(child, slotName);\n\t\t\t}\n\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\n\t\t\tif (slottedChildrenMap.has(propertyName)) {\n\t\t\t\tslottedChildrenMap.get(propertyName).push({ child, idx });\n\t\t\t} else {\n\t\t\t\tslottedChildrenMap.set(propertyName, [{ child, idx }]);\n\t\t\t}\n\t\t});\n\n\t\tawait Promise.all(allChildrenUpgraded);\n\n\t\t// Distribute the child in the _state object, keeping the Light DOM order,\n\t\t// not the order elements are defined.\n\t\tslottedChildrenMap.forEach((children, propertyName) => {\n\t\t\tthis._state[propertyName] = children.sort((a, b) => a.idx - b.idx).map(_ => _.child);\n\t\t});\n\n\t\t// Compare the content of each slot with the cached values and invalidate for the ones that changed\n\t\tlet invalidated = false;\n\t\tfor (const [slotName, slotData] of Object.entries(slotsMap)) { // eslint-disable-line\n\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\tif (!arraysAreEqual(slotsCachedContentMap.get(propertyName), this._state[propertyName])) {\n\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\ttype: \"slot\",\n\t\t\t\t\tname: propertyNameToSlotMap.get(propertyName),\n\t\t\t\t\treason: \"children\",\n\t\t\t\t});\n\t\t\t\tinvalidated = true;\n\t\t\t}\n\t\t}\n\n\t\t// If none of the slots had an invalidation due to changes to immediate children,\n\t\t// the change is considered to be text content of the default slot\n\t\tif (!invalidated) {\n\t\t\t_invalidate.call(this, {\n\t\t\t\ttype: \"slot\",\n\t\t\t\tname: \"default\",\n\t\t\t\treason: \"textcontent\",\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Removes all children from the slot and detaches listeners, if any\n\t * @private\n\t */\n\t_clearSlot(slotName, slotData) {\n\t\tconst propertyName = slotData.propertyName || slotName;\n\t\tconst children = this._state[propertyName];\n\n\t\tchildren.forEach(child => {\n\t\t\tif (child && child.isUI5Element) {\n\t\t\t\tchild.detachInvalidate(this._getChildChangeListener(slotName));\n\t\t\t}\n\n\t\t\tif (isSlot(child)) {\n\t\t\t\tthis._detachSlotChange(child, slotName);\n\t\t\t}\n\t\t});\n\n\t\tthis._state[propertyName] = [];\n\t}\n\n\t/**\n\t * Attach a callback that will be executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @public\n\t */\n\tattachInvalidate(callback) {\n\t\tthis._eventProvider.attachEvent(\"invalidate\", callback);\n\t}\n\n\t/**\n\t * Detach the callback that is executed whenever the component is invalidated\n\t *\n\t * @param callback\n\t * @public\n\t */\n\tdetachInvalidate(callback) {\n\t\tthis._eventProvider.detachEvent(\"invalidate\", callback);\n\t}\n\n\t/**\n\t * Callback that is executed whenever a monitored child changes its state\n\t *\n\t * @param slotName the slot in which a child was invalidated\n\t * @param childChangeInfo the changeInfo object for the child in the given slot\n\t * @private\n\t */\n\t_onChildChange(slotName, childChangeInfo) {\n\t\tif (!this.constructor.getMetadata().shouldInvalidateOnChildChange(slotName, childChangeInfo.type, childChangeInfo.name)) {\n\t\t\treturn;\n\t\t}\n\n\t\t// The component should be invalidated as this type of change on the child is listened for\n\t\t// However, no matter what changed on the child (property/slot), the invalidation is registered as \"type=slot\" for the component itself\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"childchange\",\n\t\t\tchild: childChangeInfo.target,\n\t\t});\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element\n\t * @private\n\t */\n\tattributeChangedCallback(name, oldValue, newValue) {\n\t\tconst properties = this.constructor.getMetadata().getProperties();\n\t\tconst realName = name.replace(/^ui5-/, \"\");\n\t\tconst nameInCamelCase = kebabToCamelCase(realName);\n\t\tif (properties.hasOwnProperty(nameInCamelCase)) { // eslint-disable-line\n\t\t\tconst propertyTypeClass = properties[nameInCamelCase].type;\n\t\t\tif (propertyTypeClass === Boolean) {\n\t\t\t\tnewValue = newValue !== null;\n\t\t\t} else if (isDescendantOf(propertyTypeClass, DataType)) {\n\t\t\t\tnewValue = propertyTypeClass.attributeToProperty(newValue);\n\t\t\t}\n\t\t\tthis[nameInCamelCase] = newValue;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_updateAttribute(name, newValue) {\n\t\tif (!this.constructor.getMetadata().hasAttribute(name)) {\n\t\t\treturn;\n\t\t}\n\t\tconst properties = this.constructor.getMetadata().getProperties();\n\t\tconst propertyTypeClass = properties[name].type;\n\t\tconst attrName = camelToKebabCase(name);\n\t\tconst attrValue = this.getAttribute(attrName);\n\n\t\tif (propertyTypeClass === Boolean) {\n\t\t\tif (newValue === true && attrValue === null) {\n\t\t\t\tthis.setAttribute(attrName, \"\");\n\t\t\t} else if (newValue === false && attrValue !== null) {\n\t\t\t\tthis.removeAttribute(attrName);\n\t\t\t}\n\t\t} else if (isDescendantOf(propertyTypeClass, DataType)) {\n\t\t\tthis.setAttribute(attrName, propertyTypeClass.propertyToAttribute(newValue));\n\t\t} else if (typeof newValue !== \"object\") {\n\t\t\tif (attrValue !== newValue) {\n\t\t\t\tthis.setAttribute(attrName, newValue);\n\t\t\t}\n\t\t} // else { return; } // old object handling\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeProperty(prop) {\n\t\tif (this.hasOwnProperty(prop)) { // eslint-disable-line\n\t\t\tconst value = this[prop];\n\t\t\tdelete this[prop];\n\t\t\tthis[prop] = value;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_upgradeAllProperties() {\n\t\tconst allProps = this.constructor.getMetadata().getPropertiesList();\n\t\tallProps.forEach(this._upgradeProperty, this);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_initializeState() {\n\t\tthis._state = { ...this.constructor.getMetadata().getInitialState() };\n\t}\n\n\t/**\n\t * Returns a singleton event listener for the \"change\" event of a child in a given slot\n\t *\n\t * @param slotName the name of the slot, where the child is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getChildChangeListener(slotName) {\n\t\tif (!this._childChangeListeners.has(slotName)) {\n\t\t\tthis._childChangeListeners.set(slotName, this._onChildChange.bind(this, slotName));\n\t\t}\n\t\treturn this._childChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * Returns a singleton slotchange event listener that invalidates the component due to changes in the given slot\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @returns {any}\n\t * @private\n\t */\n\t_getSlotChangeListener(slotName) {\n\t\tif (!this._slotChangeListeners.has(slotName)) {\n\t\t\tthis._slotChangeListeners.set(slotName, this._onSlotChange.bind(this, slotName));\n\t\t}\n\t\treturn this._slotChangeListeners.get(slotName);\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_attachSlotChange(child, slotName) {\n\t\tchild.addEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_detachSlotChange(child, slotName) {\n\t\tchild.removeEventListener(\"slotchange\", this._getSlotChangeListener(slotName));\n\t}\n\n\t/**\n\t * Whenever a slot element is slotted inside a UI5 Web Component, its slotchange event invalidates the component\n\t *\n\t * @param slotName the name of the slot, where the slot element (whose slotchange event we're listening to) is\n\t * @private\n\t */\n\t_onSlotChange(slotName) {\n\t\t_invalidate.call(this, {\n\t\t\ttype: \"slot\",\n\t\t\tname: slotName,\n\t\t\treason: \"slotchange\",\n\t\t});\n\t}\n\n\t/**\n\t * A callback that is executed each time an already rendered component is invalidated (scheduled for re-rendering)\n\t *\n\t * @param  changeInfo An object with information about the change that caused invalidation.\n\t * The object can have the following properties:\n\t *  - type: (property|slot) tells what caused the invalidation\n\t *   1) property: a property value was changed either directly or as a result of changing the corresponding attribute\n\t *   2) slot: a slotted node(nodes) changed in one of several ways (see \"reason\")\n\t *\n\t *  - name: the name of the property or slot that caused the invalidation\n\t *\n\t *  - reason: (children|textcontent|childchange|slotchange) relevant only for type=\"slot\" only and tells exactly what changed in the slot\n\t *   1) children: immediate children (HTML elements or text nodes) were added, removed or reordered in the slot\n\t *   2) textcontent: text nodes in the slot changed value (or nested text nodes were added or changed value). Can only trigger for slots of \"type: Node\"\n\t *   3) slotchange: a slot element, slotted inside that slot had its \"slotchange\" event listener called. This practically means that transitively slotted children changed.\n\t *      Can only trigger if the child of a slot is a slot element itself.\n\t *   4) childchange: indicates that a UI5Element child in that slot was invalidated and in turn invalidated the component.\n\t *      Can only trigger for slots with \"invalidateOnChildChange\" metadata descriptor\n\t *\n\t *  - newValue: the new value of the property (for type=\"property\" only)\n\t *\n\t *  - oldValue: the old value of the property (for type=\"property\" only)\n\t *\n\t *  - child the child that was changed (for type=\"slot\" and reason=\"childchange\" only)\n\t *\n\t * @public\n\t */\n\tonInvalidation(changeInfo) {}\n\n\t/**\n\t * Do not call this method directly, only intended to be called by js\n\t * @protected\n\t */\n\t_render() {\n\t\tconst hasIndividualSlots = this.constructor.getMetadata().hasIndividualSlots();\n\n\t\t// suppress invalidation to prevent state changes scheduling another rendering\n\t\tthis._suppressInvalidation = true;\n\n\t\tif (typeof this.onBeforeRendering === \"function\") {\n\t\t\tthis.onBeforeRendering();\n\t\t}\n\n\t\t// Intended for framework usage only. Currently ItemNavigation updates tab indexes after the component has updated its state but before the template is rendered\n\t\tif (this._onComponentStateFinalized) {\n\t\t\tthis._onComponentStateFinalized();\n\t\t}\n\n\t\t// resume normal invalidation handling\n\t\tthis._suppressInvalidation = false;\n\n\t\t// Update the shadow root with the render result\n\t\t/*\n\t\tif (this._changedState.length) {\n\t\t\tlet element = this.localName;\n\t\t\tif (this.id) {\n\t\t\t\telement = `${element}#${this.id}`;\n\t\t\t}\n\t\t\tconsole.log(\"Re-rendering:\", element, this._changedState.map(x => { // eslint-disable-line\n\t\t\t\tlet res = `${x.type}`;\n\t\t\t\tif (x.reason) {\n\t\t\t\t\tres = `${res}(${x.reason})`;\n\t\t\t\t}\n\t\t\t\tres = `${res}: ${x.name}`;\n\t\t\t\tif (x.type === \"property\") {\n\t\t\t\t\tres = `${res} ${x.oldValue} => ${x.newValue}`;\n\t\t\t\t}\n\n\t\t\t\treturn res;\n\t\t\t}));\n\t\t}\n\t\t*/\n\t\tthis._changedState = [];\n\n\t\t// Update shadow root and static area item\n\t\tif (this.constructor._needsShadowDOM()) {\n\t\t\tupdateShadowRoot(this);\n\t\t}\n\t\tif (this.staticAreaItem) {\n\t\t\tthis.staticAreaItem.update();\n\t\t}\n\n\t\t// Safari requires that children get the slot attribute only after the slot tags have been rendered in the shadow DOM\n\t\tif (hasIndividualSlots) {\n\t\t\tthis._assignIndividualSlotsToChildren();\n\t\t}\n\n\t\t// Call the onAfterRendering hook\n\t\tif (typeof this.onAfterRendering === \"function\") {\n\t\t\tthis.onAfterRendering();\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_assignIndividualSlotsToChildren() {\n\t\tconst domChildren = Array.from(this.children);\n\n\t\tdomChildren.forEach(child => {\n\t\t\tif (child._individualSlot) {\n\t\t\t\tchild.setAttribute(\"slot\", child._individualSlot);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_waitForDomRef() {\n\t\treturn this._domRefReadyPromise;\n\t}\n\n\t/**\n\t * Returns the DOM Element inside the Shadow Root that corresponds to the opening tag in the UI5 Web Component's template\n\t * *Note:* For logical (abstract) elements (items, options, etc...), returns the part of the parent's DOM that represents this option\n\t * Use this method instead of \"this.shadowRoot\" to read the Shadow DOM, if ever necessary\n\t *\n\t * @public\n\t */\n\tgetDomRef() {\n\t\t// If a component set _getRealDomRef to its children, use the return value of this function\n\t\tif (typeof this._getRealDomRef === \"function\") {\n\t\t\treturn this._getRealDomRef();\n\t\t}\n\n\t\tif (!this.shadowRoot || this.shadowRoot.children.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst children = [...this.shadowRoot.children].filter(child => ![\"link\", \"style\"].includes(child.localName));\n\t\tif (children.length !== 1) {\n\t\t\tconsole.warn(`The shadow DOM for ${this.constructor.getMetadata().getTag()} does not have a top level element, the getDomRef() method might not work as expected`); // eslint-disable-line\n\t\t}\n\n\t\treturn children[0];\n\t}\n\n\t/**\n\t * Returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tgetFocusDomRef() {\n\t\tconst domRef = this.getDomRef();\n\t\tif (domRef) {\n\t\t\tconst focusRef = domRef.querySelector(\"[data-sap-focus-ref]\");\n\t\t\treturn focusRef || domRef;\n\t\t}\n\t}\n\n\t/**\n\t * Waits for dom ref and then returns the DOM Element marked with \"data-sap-focus-ref\" inside the template.\n\t * This is the element that will receive the focus by default.\n\t * @public\n\t */\n\tasync getFocusDomRefAsync() {\n\t\tawait this._waitForDomRef();\n\t\treturn this.getFocusDomRef();\n\t}\n\n\t/**\n\t * Set the focus to the element, returned by \"getFocusDomRef()\" (marked by \"data-sap-focus-ref\")\n\t * @public\n\t */\n\tasync focus() {\n\t\tawait this._waitForDomRef();\n\n\t\tconst focusDomRef = this.getFocusDomRef();\n\n\t\tif (focusDomRef && typeof focusDomRef.focus === \"function\") {\n\t\t\tfocusDomRef.focus();\n\t\t}\n\t}\n\n\t/**\n\t *\n\t * @public\n\t * @param name - name of the event\n\t * @param data - additional data for the event\n\t * @param cancelable - true, if the user can call preventDefault on the event object\n\t * @param bubbles - true, if the event bubbles\n\t * @returns {boolean} false, if the event was cancelled (preventDefault called), true otherwise\n\t */\n\tfireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tconst eventResult = this._fireEvent(name, data, cancelable, bubbles);\n\t\tconst camelCaseEventName = kebabToCamelCase(name);\n\n\t\tif (camelCaseEventName !== name) {\n\t\t\treturn eventResult && this._fireEvent(camelCaseEventName, data, cancelable);\n\t\t}\n\n\t\treturn eventResult;\n\t}\n\n\t_fireEvent(name, data, cancelable = false, bubbles = true) {\n\t\tconst noConflictEvent = new CustomEvent(`ui5-${name}`, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the no-conflict event is prevented\n\t\tconst noConflictEventResult = this.dispatchEvent(noConflictEvent);\n\n\t\tif (skipOriginalEvent(name)) {\n\t\t\treturn noConflictEventResult;\n\t\t}\n\n\t\tconst normalEvent = new CustomEvent(name, {\n\t\t\tdetail: data,\n\t\t\tcomposed: false,\n\t\t\tbubbles,\n\t\t\tcancelable,\n\t\t});\n\n\t\t// This will be false if the normal event is prevented\n\t\tconst normalEventResult = this.dispatchEvent(normalEvent);\n\n\t\t// Return false if any of the two events was prevented (its result was false).\n\t\treturn normalEventResult && noConflictEventResult;\n\t}\n\n\t/**\n\t * Returns the actual children, associated with a slot.\n\t * Useful when there are transitive slots in nested component scenarios and you don't want to get a list of the slots, but rather of their content.\n\t * @public\n\t */\n\tgetSlottedNodes(slotName) {\n\t\treturn getSlottedElementsList(this[slotName]);\n\t}\n\n\t/**\n\t * Determines whether the component should be rendered in RTL mode or not.\n\t * Returns: \"rtl\", \"ltr\" or undefined\n\t *\n\t * @public\n\t * @returns {String|undefined}\n\t */\n\tget effectiveDir() {\n\t\tmarkAsRtlAware(this.constructor); // if a UI5 Element calls this method, it's considered to be rtl-aware\n\t\treturn getEffectiveDir(this);\n\t}\n\n\t/**\n\t * Used to duck-type UI5 elements without using instanceof\n\t * @returns {boolean}\n\t * @public\n\t */\n\tget isUI5Element() {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Do not override this method in derivatives of UI5Element, use metadata properties instead\n\t * @private\n\t */\n\tstatic get observedAttributes() {\n\t\treturn this.getMetadata().getAttributesList();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsShadowDOM() {\n\t\treturn !!this.template;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _needsStaticArea() {\n\t\treturn !!this.staticAreaTemplate;\n\t}\n\n\t/**\n\t * @public\n\t */\n\tgetStaticAreaItemDomRef() {\n\t\tif (!this.constructor._needsStaticArea()) {\n\t\t\tthrow new Error(\"This component does not use the static area\");\n\t\t}\n\n\t\tif (!this.staticAreaItem) {\n\t\t\tthis.staticAreaItem = StaticAreaItem.createInstance();\n\t\t\tthis.staticAreaItem.setOwnerElement(this);\n\t\t}\n\t\tif (!this.staticAreaItem.parentElement) {\n\t\t\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(this.staticAreaItem);\n\t\t}\n\n\t\treturn this.staticAreaItem.getDomRef();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tstatic _generateAccessors() {\n\t\tconst proto = this.prototype;\n\t\tconst slotsAreManaged = this.getMetadata().slotsAreManaged();\n\n\t\t// Properties\n\t\tconst properties = this.getMetadata().getProperties();\n\t\tfor (const [prop, propData] of Object.entries(properties)) { // eslint-disable-line\n\t\t\tif (!isValidPropertyName(prop)) {\n\t\t\t\tconsole.warn(`\"${prop}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t}\n\n\t\t\tif (propData.type === Boolean && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All booleans are false by default.`);\n\t\t\t}\n\n\t\t\tif (propData.type === Array) {\n\t\t\t\tthrow new Error(`Wrong type for property \"${prop}\". Properties cannot be of type Array - use \"multiple: true\" and set \"type\" to the single value type, such as \"String\", \"Object\", etc...`);\n\t\t\t}\n\n\t\t\tif (propData.type === Object && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All properties of type \"Object\" are empty objects by default.`);\n\t\t\t}\n\n\t\t\tif (propData.multiple && propData.defaultValue) {\n\t\t\t\tthrow new Error(`Cannot set a default value for property \"${prop}\". All multiple properties are empty arrays by default.`);\n\t\t\t}\n\n\t\t\tObject.defineProperty(proto, prop, {\n\t\t\t\tget() {\n\t\t\t\t\tif (this._state[prop] !== undefined) {\n\t\t\t\t\t\treturn this._state[prop];\n\t\t\t\t\t}\n\n\t\t\t\t\tconst propDefaultValue = propData.defaultValue;\n\n\t\t\t\t\tif (propData.type === Boolean) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t} else if (propData.type === String) {  // eslint-disable-line\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t} else if (propData.multiple) { // eslint-disable-line\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn propDefaultValue;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tset(value) {\n\t\t\t\t\tlet isDifferent;\n\t\t\t\t\tvalue = this.constructor.getMetadata().constructor.validatePropertyValue(value, propData);\n\n\t\t\t\t\tconst oldState = this._state[prop];\n\t\t\t\t\tif (propData.multiple && propData.compareValues) {\n\t\t\t\t\t\tisDifferent = !arraysAreEqual(oldState, value);\n\t\t\t\t\t} else if (isDescendantOf(propData.type, DataType)) {\n\t\t\t\t\t\tisDifferent = !propData.type.valuesAreEqual(oldState, value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tisDifferent = oldState !== value;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isDifferent) {\n\t\t\t\t\t\tthis._state[prop] = value;\n\t\t\t\t\t\t_invalidate.call(this, {\n\t\t\t\t\t\t\ttype: \"property\",\n\t\t\t\t\t\t\tname: prop,\n\t\t\t\t\t\t\tnewValue: value,\n\t\t\t\t\t\t\toldValue: oldState,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tthis._updateAttribute(prop, value);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t});\n\t\t}\n\n\t\t// Slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getMetadata().getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tif (!isValidPropertyName(slotName)) {\n\t\t\t\t\tconsole.warn(`\"${slotName}\" is not a valid property name. Use a name that does not collide with DOM APIs`); /* eslint-disable-line */\n\t\t\t\t}\n\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tObject.defineProperty(proto, propertyName, {\n\t\t\t\t\tget() {\n\t\t\t\t\t\tif (this._state[propertyName] !== undefined) {\n\t\t\t\t\t\t\treturn this._state[propertyName];\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t},\n\t\t\t\t\tset() {\n\t\t\t\t\t\tthrow new Error(\"Cannot set slot content directly, use the DOM APIs (appendChild, removeChild, etc...)\");\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the metadata object for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get metadata() {\n\t\treturn {};\n\t}\n\n\t/**\n\t * Returns the CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get styles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns the Static Area CSS for this UI5 Web Component Class\n\t * @protected\n\t */\n\tstatic get staticAreaStyles() {\n\t\treturn \"\";\n\t}\n\n\t/**\n\t * Returns an array with the dependencies for this UI5 Web Component, which could be:\n\t *  - composed components (used in its shadow root or static area item)\n\t *  - slotted components that the component may need to communicate with\n\t *\n\t * @protected\n\t */\n\tstatic get dependencies() {\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns a list of the unique dependencies for this UI5 Web Component\n\t *\n\t * @public\n\t */\n\tstatic getUniqueDependencies() {\n\t\tif (!uniqueDependenciesCache.has(this)) {\n\t\t\tconst filtered = this.dependencies.filter((dep, index, deps) => deps.indexOf(dep) === index);\n\t\t\tuniqueDependenciesCache.set(this, filtered);\n\t\t}\n\n\t\treturn uniqueDependenciesCache.get(this);\n\t}\n\n\t/**\n\t * Returns a promise that resolves whenever all dependencies for this UI5 Web Component have resolved\n\t *\n\t * @returns {Promise<any[]>}\n\t */\n\tstatic whenDependenciesDefined() {\n\t\treturn Promise.all(this.getUniqueDependencies().map(dep => dep.define()));\n\t}\n\n\t/**\n\t * Hook that will be called upon custom element definition\n\t *\n\t * @protected\n\t * @returns {Promise<void>}\n\t */\n\tstatic async onDefine() {\n\t\treturn Promise.resolve();\n\t}\n\n\t/**\n\t * Registers a UI5 Web Component in the browser window object\n\t * @public\n\t * @returns {Promise<UI5Element>}\n\t */\n\tstatic async define() {\n\t\tawait boot();\n\n\t\tawait Promise.all([\n\t\t\tthis.whenDependenciesDefined(),\n\t\t\tthis.onDefine(),\n\t\t]);\n\n\t\tconst tag = this.getMetadata().getTag();\n\t\tconst altTag = this.getMetadata().getAltTag();\n\n\t\tconst definedLocally = isTagRegistered(tag);\n\t\tconst definedGlobally = customElements.get(tag);\n\n\t\tif (definedGlobally && !definedLocally) {\n\t\t\trecordTagRegistrationFailure(tag);\n\t\t} else if (!definedGlobally) {\n\t\t\tthis._generateAccessors();\n\t\t\tregisterTag(tag);\n\t\t\twindow.customElements.define(tag, this);\n\t\t\tpreloadLinks(this);\n\n\t\t\tif (altTag && !customElements.get(altTag)) {\n\t\t\t\tregisterTag(altTag);\n\t\t\t\twindow.customElements.define(altTag, getClassCopy(this, () => {\n\t\t\t\t\tconsole.log(`The ${altTag} tag is deprecated and will be removed in the next release, please use ${tag} instead.`); // eslint-disable-line\n\t\t\t\t}));\n\t\t\t}\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Returns an instance of UI5ElementMetadata.js representing this UI5 Web Component's full metadata (its and its parents')\n\t * Note: not to be confused with the \"get metadata()\" method, which returns an object for this class's metadata only\n\t * @public\n\t * @returns {UI5ElementMetadata}\n\t */\n\tstatic getMetadata() {\n\t\tif (this.hasOwnProperty(\"_metadata\")) { // eslint-disable-line\n\t\t\treturn this._metadata;\n\t\t}\n\n\t\tconst metadataObjects = [this.metadata];\n\t\tlet klass = this; // eslint-disable-line\n\t\twhile (klass !== UI5Element) {\n\t\t\tklass = Object.getPrototypeOf(klass);\n\t\t\tmetadataObjects.unshift(klass.metadata);\n\t\t}\n\t\tconst mergedMetadata = merge({}, ...metadataObjects);\n\n\t\tthis._metadata = new UI5ElementMetadata(mergedMetadata);\n\t\treturn this._metadata;\n\t}\n}\n\nexport default UI5Element;\n"]},"metadata":{},"sourceType":"module"}