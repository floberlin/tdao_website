{"ast":null,"code":"import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\nvar cache = new Map();\n\nvar getLocaleInstance = function getLocaleInstance(lang) {\n  if (!cache.has(lang)) {\n    cache.set(lang, new Locale(lang));\n  }\n\n  return cache.get(lang);\n};\n\nvar convertToLocaleOrNull = function convertToLocaleOrNull(lang) {\n  try {\n    if (lang && typeof lang === \"string\") {\n      return getLocaleInstance(lang);\n    }\n  } catch (e) {// ignore\n  }\n};\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\n\n\nvar getLocale = function getLocale(lang) {\n  if (lang) {\n    return convertToLocaleOrNull(lang);\n  }\n\n  if (getConfigLanguage()) {\n    return getLocaleInstance(getConfigLanguage());\n  }\n\n  return convertToLocaleOrNull(detectNavigatorLanguage());\n};\n\nexport default getLocale;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/locale/getLocale.js"],"names":["detectNavigatorLanguage","getLanguage","getConfigLanguage","Locale","cache","Map","getLocaleInstance","lang","has","set","get","convertToLocaleOrNull","e","getLocale"],"mappings":"AAAA,OAAOA,uBAAP,MAAoC,oCAApC;AACA,SAASC,WAAW,IAAIC,iBAAxB,QAAiD,uBAAjD;AACA,OAAOC,MAAP,MAAmB,aAAnB;AAEA,IAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,IAAI,EAAI;AACjC,MAAI,CAACH,KAAK,CAACI,GAAN,CAAUD,IAAV,CAAL,EAAsB;AACrBH,IAAAA,KAAK,CAACK,GAAN,CAAUF,IAAV,EAAgB,IAAIJ,MAAJ,CAAWI,IAAX,CAAhB;AACA;;AAED,SAAOH,KAAK,CAACM,GAAN,CAAUH,IAAV,CAAP;AACA,CAND;;AAQA,IAAMI,qBAAqB,GAAG,SAAxBA,qBAAwB,CAAAJ,IAAI,EAAI;AACrC,MAAI;AACH,QAAIA,IAAI,IAAI,OAAOA,IAAP,KAAgB,QAA5B,EAAsC;AACrC,aAAOD,iBAAiB,CAACC,IAAD,CAAxB;AACA;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU,CACX;AACA;AACD,CARD;AAUA;AACA;AACA;AACA;;;AACA,IAAMC,SAAS,GAAG,SAAZA,SAAY,CAAAN,IAAI,EAAI;AACzB,MAAIA,IAAJ,EAAU;AACT,WAAOI,qBAAqB,CAACJ,IAAD,CAA5B;AACA;;AAED,MAAIL,iBAAiB,EAArB,EAAyB;AACxB,WAAOI,iBAAiB,CAACJ,iBAAiB,EAAlB,CAAxB;AACA;;AAED,SAAOS,qBAAqB,CAACX,uBAAuB,EAAxB,CAA5B;AACA,CAVD;;AAYA,eAAea,SAAf","sourcesContent":["import detectNavigatorLanguage from \"../util/detectNavigatorLanguage.js\";\nimport { getLanguage as getConfigLanguage } from \"../config/Language.js\";\nimport Locale from \"./Locale.js\";\n\nconst cache = new Map();\n\nconst getLocaleInstance = lang => {\n\tif (!cache.has(lang)) {\n\t\tcache.set(lang, new Locale(lang));\n\t}\n\n\treturn cache.get(lang);\n};\n\nconst convertToLocaleOrNull = lang => {\n\ttry {\n\t\tif (lang && typeof lang === \"string\") {\n\t\t\treturn getLocaleInstance(lang);\n\t\t}\n\t} catch (e) {\n\t\t// ignore\n\t}\n};\n\n/**\n * Returns the locale based on the parameter or configured language Configuration#getLanguage\n * If no language has been configured - a new locale based on browser language is returned\n */\nconst getLocale = lang => {\n\tif (lang) {\n\t\treturn convertToLocaleOrNull(lang);\n\t}\n\n\tif (getConfigLanguage()) {\n\t\treturn getLocaleInstance(getConfigLanguage());\n\t}\n\n\treturn convertToLocaleOrNull(detectNavigatorLanguage());\n};\n\nexport default getLocale;\n"]},"metadata":{},"sourceType":"module"}