{"ast":null,"code":"import getSharedResource from \"../getSharedResource.js\";\nimport IconCollectionsAlias from \"../assets-meta/IconCollectionsAlias.js\";\nimport { isTheme } from \"../config/Theme.js\";\nconst loaders = new Map();\nconst registry = getSharedResource(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource(\"SVGIcons.promises\", new Map());\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\n/**\n * @deprecated\n */\n\nconst registerIconBundle = async (collectionName, bundleData) => {\n  throw new Error(\"This method has been removed. Use `registerIconLoader` instead.\");\n};\n\nconst registerIconLoader = async (collectionName, loader) => {\n  loaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async collectionName => {\n  if (!iconCollectionPromises.has(collectionName)) {\n    if (!loaders.has(collectionName)) {\n      throw new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n    }\n\n    const loadIcons = loaders.get(collectionName);\n    iconCollectionPromises.set(collectionName, loadIcons(collectionName));\n  }\n\n  return iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = bundleData => {\n  Object.keys(bundleData.data).forEach(iconName => {\n    const iconData = bundleData.data[iconName];\n    registerIcon(iconName, {\n      pathData: iconData.path,\n      ltr: iconData.ltr,\n      accData: iconData.acc,\n      collection: bundleData.collection,\n      packageName: bundleData.packageName\n    });\n  });\n}; // set\n\n\nconst registerIcon = (name, {\n  pathData,\n  ltr,\n  accData,\n  collection,\n  packageName\n} = {}) => {\n  // eslint-disable-line\n  if (!collection) {\n    collection = _getDefaultCollection();\n  }\n\n  const key = `${collection}/${name}`;\n  registry.set(key, {\n    pathData,\n    ltr,\n    accData,\n    packageName\n  });\n};\n\nconst _parseName = name => {\n  // silently support ui5-compatible URIs\n  if (name.startsWith(\"sap-icon://\")) {\n    name = name.replace(\"sap-icon://\", \"\");\n  }\n\n  let collection;\n  [name, collection] = name.split(\"/\").reverse();\n  collection = collection || _getDefaultCollection(); // Normalize collection name.\n  // - resolve `SAP-icons-TNT` to `tnt`.\n  // - resolve `BusinessSuiteInAppSymbols` to `business-suite`.\n  // - resolve `horizon` to `SAP-icons-v5`,\n  // Note: aliases can be made as a feature, if more collections need it or more aliases are needed.\n\n  collection = _normalizeCollection(collection);\n  name = name.replace(\"icon-\", \"\");\n  const registryKey = `${collection}/${name}`;\n  return {\n    name,\n    collection,\n    registryKey\n  };\n};\n\nconst getIconDataSync = nameProp => {\n  const {\n    registryKey\n  } = _parseName(nameProp);\n\n  return registry.get(registryKey);\n};\n\nconst getIconData = async nameProp => {\n  const {\n    collection,\n    registryKey\n  } = _parseName(nameProp);\n\n  let iconData = ICON_NOT_FOUND;\n\n  try {\n    iconData = await _loadIconCollectionOnce(collection);\n  } catch (e) {\n    console.error(e.message);\n    /* eslint-disable-line */\n  }\n\n  if (iconData === ICON_NOT_FOUND) {\n    return iconData;\n  }\n\n  if (!registry.has(registryKey)) {\n    // not filled by another await. many getters will await on the same loader, but fill only once\n    _fillRegistry(iconData);\n  }\n\n  return registry.get(registryKey);\n}; // test page usage only\n\n\nconst _getRegisteredNames = async () => {\n  // fetch one icon of each collection to trigger the bundle load\n  await getIconData(\"edit\");\n  await getIconData(\"tnt/arrow\");\n  await getIconData(\"business-suite/3d\");\n  return Array.from(registry.keys());\n};\n\nconst _getDefaultCollection = () => {\n  return isTheme(\"sap_horizon\") ? \"SAP-icons-v5\" : \"SAP-icons\";\n};\n\nconst _normalizeCollection = collectionName => {\n  if (IconCollectionsAlias[collectionName]) {\n    return IconCollectionsAlias[collectionName];\n  }\n\n  return collectionName;\n};\n\nexport { registerIconBundle, registerIconLoader, getIconData, getIconDataSync, registerIcon, _getRegisteredNames };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/asset-registries/Icons.js"],"names":["getSharedResource","IconCollectionsAlias","isTheme","loaders","Map","registry","iconCollectionPromises","ICON_NOT_FOUND","registerIconBundle","collectionName","bundleData","Error","registerIconLoader","loader","set","_loadIconCollectionOnce","has","loadIcons","get","_fillRegistry","Object","keys","data","forEach","iconName","iconData","registerIcon","pathData","path","ltr","accData","acc","collection","packageName","name","_getDefaultCollection","key","_parseName","startsWith","replace","split","reverse","_normalizeCollection","registryKey","getIconDataSync","nameProp","getIconData","e","console","error","message","_getRegisteredNames","Array","from"],"mappings":"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","sourcesContent":["import getSharedResource from \"../getSharedResource.js\";\nimport IconCollectionsAlias from \"../assets-meta/IconCollectionsAlias.js\";\nimport { isTheme } from \"../config/Theme.js\";\n\nconst loaders = new Map();\nconst registry = getSharedResource(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource(\"SVGIcons.promises\", new Map());\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\n\n/**\n * @deprecated\n */\nconst registerIconBundle = async (collectionName, bundleData) => {\n\tthrow new Error(\"This method has been removed. Use `registerIconLoader` instead.\");\n};\n\nconst registerIconLoader = async (collectionName, loader) => {\n\tloaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async collectionName => {\n\tif (!iconCollectionPromises.has(collectionName)) {\n\t\tif (!loaders.has(collectionName)) {\n\t\t\tthrow new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n\t\t}\n\t\tconst loadIcons = loaders.get(collectionName);\n\t\ticonCollectionPromises.set(collectionName, loadIcons(collectionName));\n\t}\n\n\treturn iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = bundleData => {\n\tObject.keys(bundleData.data).forEach(iconName => {\n\t\tconst iconData = bundleData.data[iconName];\n\n\t\tregisterIcon(iconName, {\n\t\t\tpathData: iconData.path,\n\t\t\tltr: iconData.ltr,\n\t\t\taccData: iconData.acc,\n\t\t\tcollection: bundleData.collection,\n\t\t\tpackageName: bundleData.packageName,\n\t\t });\n\t});\n};\n\n// set\nconst registerIcon = (name, { pathData, ltr, accData, collection, packageName } = {}) => { // eslint-disable-line\n\tif (!collection) {\n\t\tcollection = _getDefaultCollection();\n\t}\n\n\tconst key = `${collection}/${name}`;\n\tregistry.set(key, {\n\t\tpathData,\n\t\tltr,\n\t\taccData,\n\t\tpackageName,\n\t});\n};\n\nconst _parseName = name => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t}\n\n\tlet collection;\n\t[name, collection] = name.split(\"/\").reverse();\n\tcollection = collection || _getDefaultCollection();\n\n\t// Normalize collection name.\n\t// - resolve `SAP-icons-TNT` to `tnt`.\n\t// - resolve `BusinessSuiteInAppSymbols` to `business-suite`.\n\t// - resolve `horizon` to `SAP-icons-v5`,\n\t// Note: aliases can be made as a feature, if more collections need it or more aliases are needed.\n\tcollection = _normalizeCollection(collection);\n\tname = name.replace(\"icon-\", \"\");\n\n\tconst registryKey = `${collection}/${name}`;\n\treturn { name, collection, registryKey };\n};\n\nconst getIconDataSync = nameProp => {\n\tconst { registryKey } = _parseName(nameProp);\n\treturn registry.get(registryKey);\n};\n\nconst getIconData = async nameProp => {\n\tconst { collection, registryKey } = _parseName(nameProp);\n\n\tlet iconData = ICON_NOT_FOUND;\n\ttry {\n\t\ticonData = await _loadIconCollectionOnce(collection);\n\t} catch (e) {\n\t\tconsole.error(e.message); /* eslint-disable-line */\n\t}\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\tif (!registry.has(registryKey)) {\n\t\t// not filled by another await. many getters will await on the same loader, but fill only once\n\t\t_fillRegistry(iconData);\n\t}\n\treturn registry.get(registryKey);\n};\n\n// test page usage only\nconst _getRegisteredNames = async () => {\n\t// fetch one icon of each collection to trigger the bundle load\n\tawait getIconData(\"edit\");\n\tawait getIconData(\"tnt/arrow\");\n\tawait getIconData(\"business-suite/3d\");\n\treturn Array.from(registry.keys());\n};\n\nconst _getDefaultCollection = () => {\n\treturn isTheme(\"sap_horizon\") ? \"SAP-icons-v5\" : \"SAP-icons\";\n};\n\nconst _normalizeCollection = collectionName => {\n\tif (IconCollectionsAlias[collectionName]) {\n\t\treturn IconCollectionsAlias[collectionName];\n\t}\n\n\treturn collectionName;\n};\n\nexport {\n\tregisterIconBundle,\n\tregisterIconLoader,\n\tgetIconData,\n\tgetIconDataSync,\n\tregisterIcon,\n\t_getRegisteredNames,\n};\n"]},"metadata":{},"sourceType":"module"}