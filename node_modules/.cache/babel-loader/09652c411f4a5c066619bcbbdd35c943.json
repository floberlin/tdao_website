{"ast":null,"code":"import findNodeOwner from \"./findNodeOwner.js\";\n\nvar getEffectiveAriaLabelText = function getEffectiveAriaLabelText(el) {\n  if (!el.accessibleNameRef) {\n    if (el.accessibleName) {\n      return el.accessibleName;\n    }\n\n    return undefined;\n  }\n\n  return getAriaLabelledByTexts(el);\n};\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {HTMLElement} ownerDocument (Optional) Defines the HTMLElement(might document or custom element) where the you want to search for the texts.\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\n\n\nvar getAriaLabelledByTexts = function getAriaLabelledByTexts(el, ownerDocument) {\n  var readyIds = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n  var ids = readyIds && readyIds.split(\" \") || el.accessibleNameRef.split(\" \");\n  var owner = ownerDocument || findNodeOwner(el);\n  var result = \"\";\n  ids.forEach(function (elementId, index) {\n    var element = owner.querySelector(\"[id='\".concat(elementId, \"']\"));\n    result += \"\".concat(element ? element.textContent : \"\");\n\n    if (index < ids.length - 1) {\n      result += \" \";\n    }\n  });\n  return result;\n};\n\nexport { getEffectiveAriaLabelText, getAriaLabelledByTexts };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/util/AriaLabelHelper.js"],"names":["findNodeOwner","getEffectiveAriaLabelText","el","accessibleNameRef","accessibleName","undefined","getAriaLabelledByTexts","ownerDocument","readyIds","ids","split","owner","result","forEach","elementId","index","element","querySelector","textContent","length"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAAAC,EAAE,EAAI;AACvC,MAAI,CAACA,EAAE,CAACC,iBAAR,EAA2B;AAC1B,QAAID,EAAE,CAACE,cAAP,EAAuB;AACtB,aAAOF,EAAE,CAACE,cAAV;AACA;;AAED,WAAOC,SAAP;AACA;;AAED,SAAOC,sBAAsB,CAACJ,EAAD,CAA7B;AACA,CAVD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMI,sBAAsB,GAAG,SAAzBA,sBAAyB,CAACJ,EAAD,EAAKK,aAAL,EAAsC;AAAA,MAAlBC,QAAkB,uEAAP,EAAO;AACpE,MAAMC,GAAG,GAAID,QAAQ,IAAIA,QAAQ,CAACE,KAAT,CAAe,GAAf,CAAb,IAAqCR,EAAE,CAACC,iBAAH,CAAqBO,KAArB,CAA2B,GAA3B,CAAjD;AACA,MAAMC,KAAK,GAAGJ,aAAa,IAAIP,aAAa,CAACE,EAAD,CAA5C;AACA,MAAIU,MAAM,GAAG,EAAb;AAEAH,EAAAA,GAAG,CAACI,OAAJ,CAAY,UAACC,SAAD,EAAYC,KAAZ,EAAsB;AACjC,QAAMC,OAAO,GAAGL,KAAK,CAACM,aAAN,gBAA4BH,SAA5B,QAAhB;AACAF,IAAAA,MAAM,cAAOI,OAAO,GAAGA,OAAO,CAACE,WAAX,GAAyB,EAAvC,CAAN;;AAEA,QAAIH,KAAK,GAAGN,GAAG,CAACU,MAAJ,GAAa,CAAzB,EAA4B;AAC3BP,MAAAA,MAAM,IAAI,GAAV;AACA;AACD,GAPD;AASA,SAAOA,MAAP;AACA,CAfD;;AAiBA,SACCX,yBADD,EAECK,sBAFD","sourcesContent":["import findNodeOwner from \"./findNodeOwner.js\";\n\nconst getEffectiveAriaLabelText = el => {\n\tif (!el.accessibleNameRef) {\n\t\tif (el.accessibleName) {\n\t\t\treturn el.accessibleName;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\treturn getAriaLabelledByTexts(el);\n};\n\n/**\n *\n * @param {HTMLElement} el Defines the HTMLElement, for which you need to get all related texts\n * @param {HTMLElement} ownerDocument (Optional) Defines the HTMLElement(might document or custom element) where the you want to search for the texts.\n * @param {String} readyIds (Optional) Defines a string of elements ids. The text of these elements will be returned. If used you should provide either el or ownerDocument\n */\nconst getAriaLabelledByTexts = (el, ownerDocument, readyIds = \"\") => {\n\tconst ids = (readyIds && readyIds.split(\" \")) || el.accessibleNameRef.split(\" \");\n\tconst owner = ownerDocument || findNodeOwner(el);\n\tlet result = \"\";\n\n\tids.forEach((elementId, index) => {\n\t\tconst element = owner.querySelector(`[id='${elementId}']`);\n\t\tresult += `${element ? element.textContent : \"\"}`;\n\n\t\tif (index < ids.length - 1) {\n\t\t\tresult += \" \";\n\t\t}\n\t});\n\n\treturn result;\n};\n\nexport {\n\tgetEffectiveAriaLabelText,\n\tgetAriaLabelledByTexts,\n};\n"]},"metadata":{},"sourceType":"module"}