{"ast":null,"code":"import getLocale from \"../locale/getLocale.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage } from \"../config/Language.js\"; // contains package names for which the warning has been shown\n\nconst warningShown = new Set();\nconst reportedErrors = new Set();\nconst bundleData = new Map();\nconst bundlePromises = new Map();\nconst loaders = new Map();\n/**\n *\n * @param {string} packageName for which package this loader can fetch data\n * @param {function} loader async function that will be passed a localeId and should return a JSON object\n * @param {Array} localeIds Array of locale IDs that this loader can handle\n */\n\nconst registerI18nLoader = (packageName, localeId, loader) => {\n  // register loader by key\n  const bundleKey = `${packageName}/${localeId}`;\n  loaders.set(bundleKey, loader);\n};\n\nconst _setI18nBundleData = (packageName, data) => {\n  bundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n  return bundleData.get(packageName);\n};\n/**\n * @public\n * @deprecated\n */\n\n\nconst registerI18nBundle = (_packageName, _bundle) => {\n  throw new Error(\"This method has been removed. Use `registerI18nLoader` instead.\");\n};\n\nconst _hasLoader = (packageName, localeId) => {\n  const bundleKey = `${packageName}/${localeId}`;\n  return loaders.has(bundleKey);\n}; // load bundle over the network once\n\n\nconst _loadMessageBundleOnce = (packageName, localeId) => {\n  const bundleKey = `${packageName}/${localeId}`;\n  const loadMessageBundle = loaders.get(bundleKey);\n\n  if (!bundlePromises.get(bundleKey)) {\n    bundlePromises.set(bundleKey, loadMessageBundle(localeId));\n  }\n\n  return bundlePromises.get(bundleKey);\n};\n\nconst _showAssetsWarningOnce = packageName => {\n  if (!warningShown.has(packageName)) {\n    console.warn(`[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`,\n    /* eslint-disable-line */\n    ` Add \\`import \"${packageName}/dist/Assets.js\"\\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \"Assets\" in the documentation for more information.`);\n    /* eslint-disable-line */\n\n    warningShown.add(packageName);\n  }\n};\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\n\n\nconst fetchI18nBundle = async packageName => {\n  const language = getLocale().getLanguage();\n  const region = getLocale().getRegion();\n  let localeId = normalizeLocale(language + (region ? `-${region}` : ``));\n\n  while (localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId)) {\n    localeId = nextFallbackLocale(localeId);\n  } // use default language unless configured to always fetch it from the network\n\n\n  const fetchDefaultLanguage = getFetchDefaultLanguage();\n\n  if (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage) {\n    _setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)\n\n\n    return;\n  }\n\n  if (!_hasLoader(packageName, localeId)) {\n    _showAssetsWarningOnce(packageName);\n\n    return;\n  }\n\n  try {\n    const data = await _loadMessageBundleOnce(packageName, localeId);\n\n    _setI18nBundleData(packageName, data);\n  } catch (e) {\n    if (!reportedErrors.has(e.message)) {\n      reportedErrors.add(e.message);\n      console.error(e.message);\n      /* eslint-disable-line */\n    }\n  }\n}; // When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles\n\n\nattachLanguageChange(() => {\n  const allPackages = [...bundleData.keys()];\n  return Promise.all(allPackages.map(fetchI18nBundle));\n});\nexport { registerI18nLoader, fetchI18nBundle, registerI18nBundle, getI18nBundleData };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/asset-registries/i18n.js"],"names":["getLocale","attachLanguageChange","normalizeLocale","nextFallbackLocale","DEFAULT_LANGUAGE","getFetchDefaultLanguage","warningShown","Set","reportedErrors","bundleData","Map","bundlePromises","loaders","registerI18nLoader","packageName","localeId","loader","bundleKey","set","_setI18nBundleData","data","getI18nBundleData","get","registerI18nBundle","_packageName","_bundle","Error","_hasLoader","has","_loadMessageBundleOnce","loadMessageBundle","_showAssetsWarningOnce","console","warn","add","fetchI18nBundle","language","getLanguage","region","getRegion","fetchDefaultLanguage","e","message","error","allPackages","keys","Promise","all","map"],"mappings":"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","sourcesContent":["import getLocale from \"../locale/getLocale.js\";\nimport { attachLanguageChange } from \"../locale/languageChange.js\";\nimport normalizeLocale from \"../locale/normalizeLocale.js\";\nimport nextFallbackLocale from \"../locale/nextFallbackLocale.js\";\nimport { DEFAULT_LANGUAGE } from \"../generated/AssetParameters.js\";\nimport { getFetchDefaultLanguage } from \"../config/Language.js\";\n\n// contains package names for which the warning has been shown\nconst warningShown = new Set();\nconst reportedErrors = new Set();\n\nconst bundleData = new Map();\nconst bundlePromises = new Map();\nconst loaders = new Map();\n\n/**\n *\n * @param {string} packageName for which package this loader can fetch data\n * @param {function} loader async function that will be passed a localeId and should return a JSON object\n * @param {Array} localeIds Array of locale IDs that this loader can handle\n */\nconst registerI18nLoader = (packageName, localeId, loader) => {\n\t// register loader by key\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tloaders.set(bundleKey, loader);\n};\n\nconst _setI18nBundleData = (packageName, data) => {\n\tbundleData.set(packageName, data);\n};\n\nconst getI18nBundleData = packageName => {\n\treturn bundleData.get(packageName);\n};\n\n/**\n * @public\n * @deprecated\n */\nconst registerI18nBundle = (_packageName, _bundle) => {\n\tthrow new Error(\"This method has been removed. Use `registerI18nLoader` instead.\");\n};\n\nconst _hasLoader = (packageName, localeId) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\treturn loaders.has(bundleKey);\n};\n\n// load bundle over the network once\nconst _loadMessageBundleOnce = (packageName, localeId) => {\n\tconst bundleKey = `${packageName}/${localeId}`;\n\tconst loadMessageBundle = loaders.get(bundleKey);\n\n\tif (!bundlePromises.get(bundleKey)) {\n\t\tbundlePromises.set(bundleKey, loadMessageBundle(localeId));\n\t}\n\n\treturn bundlePromises.get(bundleKey);\n};\n\nconst _showAssetsWarningOnce = packageName => {\n\tif (!warningShown.has(packageName)) {\n\t\tconsole.warn(`[${packageName}]: Message bundle assets are not configured. Falling back to English texts.`, /* eslint-disable-line */\n\t\t` Add \\`import \"${packageName}/dist/Assets.js\"\\` in your bundle and make sure your build tool supports dynamic imports and JSON imports. See section \"Assets\" in the documentation for more information.`); /* eslint-disable-line */\n\t\twarningShown.add(packageName);\n\t}\n};\n\n/**\n * This method preforms the asynchronous task of fetching the actual text resources. It will fetch\n * each text resource over the network once (even for multiple calls to the same method).\n * It should be fully finished before the i18nBundle class is created in the webcomponents.\n * This method uses the bundle URLs that are populated by the <code>registerI18nBundle</code> method.\n * To simplify the usage, the synchronization of both methods happens internally for the same <code>bundleId</code>\n * @param {packageName} packageName the NPM package name\n * @public\n */\nconst fetchI18nBundle = async packageName => {\n\tconst language = getLocale().getLanguage();\n\tconst region = getLocale().getRegion();\n\tlet localeId = normalizeLocale(language + (region ? `-${region}` : ``));\n\n\twhile (localeId !== DEFAULT_LANGUAGE && !_hasLoader(packageName, localeId)) {\n\t\tlocaleId = nextFallbackLocale(localeId);\n\t}\n\n\t// use default language unless configured to always fetch it from the network\n\tconst fetchDefaultLanguage = getFetchDefaultLanguage();\n\tif (localeId === DEFAULT_LANGUAGE && !fetchDefaultLanguage) {\n\t\t_setI18nBundleData(packageName, null); // reset for the default language (if data was set for a previous language)\n\t\treturn;\n\t}\n\n\tif (!_hasLoader(packageName, localeId)) {\n\t\t_showAssetsWarningOnce(packageName);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tconst data = await _loadMessageBundleOnce(packageName, localeId);\n\t\t_setI18nBundleData(packageName, data);\n\t} catch (e) {\n\t\tif (!reportedErrors.has(e.message)) {\n\t\t\treportedErrors.add(e.message);\n\t\t\tconsole.error(e.message); /* eslint-disable-line */\n\t\t}\n\t}\n};\n\n// When the language changes dynamically (the user calls setLanguage), re-fetch all previously fetched bundles\nattachLanguageChange(() => {\n\tconst allPackages = [...bundleData.keys()];\n\treturn Promise.all(allPackages.map(fetchI18nBundle));\n});\n\nexport {\n\tregisterI18nLoader,\n\tfetchI18nBundle,\n\tregisterI18nBundle,\n\tgetI18nBundleData,\n};\n"]},"metadata":{},"sourceType":"module"}