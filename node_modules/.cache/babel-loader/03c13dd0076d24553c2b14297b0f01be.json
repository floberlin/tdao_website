{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { getCurrentRange } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { Title } from '@ui5/webcomponents-react/dist/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';\nimport clsx from 'clsx';\nimport React, { useEffect, forwardRef, useState, useRef, useMemo, Children, cloneElement } from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\n\nvar useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {\n  useEffect(function () {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n\nvar labelSpanClasses = function labelSpanClasses() {\n  var styleClasses = {};\n\n  for (var i = 1; i <= 11; i++) {\n    styleClasses[\"labelSpan\".concat(i)] = {\n      '--ui5wcr_form_content_span': 12 - i,\n      '--ui5wcr_form_label_span': i\n    };\n  }\n\n  return styleClasses;\n};\n\nvar styles = _objectSpread(_objectSpread({\n  form: {\n    display: 'grid',\n    alignItems: 'baseline',\n    rowGap: '0.25rem',\n    columnGap: '0.5rem',\n    gridTemplateColumns: \"repeat(12, 1fr)\",\n    '--ui5wcr_form_full_span': 'span 12',\n    '--ui5wcr_form_label_text_align': 'end',\n    '&[data-columns=\"1\"]': {},\n    '&[data-columns=\"2\"]': {\n      gridTemplateColumns: \"repeat(24, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 24'\n    },\n    '&[data-columns=\"3\"]': {\n      gridTemplateColumns: \"repeat(36, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 36'\n    },\n    '&[data-columns=\"4\"]': {\n      gridTemplateColumns: \"repeat(48, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 48'\n    },\n    '&[data-columns=\"5\"]': {\n      gridTemplateColumns: \"repeat(60, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 60'\n    },\n    '&[data-columns=\"6\"]': {\n      gridTemplateColumns: \"repeat(72, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 72'\n    },\n    '&[data-columns=\"7\"]': {\n      gridTemplateColumns: \"repeat(84, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 84'\n    },\n    '&[data-columns=\"8\"]': {\n      gridTemplateColumns: \"repeat(96, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 96'\n    },\n    '&[data-columns=\"9\"]': {\n      gridTemplateColumns: \"repeat(108, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 108'\n    },\n    '&[data-columns=\"10\"]': {\n      gridTemplateColumns: \"repeat(120, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 120'\n    },\n    '&[data-columns=\"11\"]': {\n      gridTemplateColumns: \"repeat(132, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 132'\n    },\n    '&[data-columns=\"12\"]': {\n      gridTemplateColumns: \"repeat(144, 1fr)\",\n      '--ui5wcr_form_full_span': 'span 144'\n    }\n  },\n  formTitle: {\n    borderBottom: \"1px solid \".concat(ThemingParameters.sapGroup_TitleBorderColor),\n    marginBottom: '1.75rem',\n    gridColumn: 'var(--ui5wcr_form_full_span)'\n  }\n}, labelSpanClasses()), {}, {\n  labelSpan12: {\n    '--ui5wcr_form_content_span': 12,\n    '--ui5wcr_form_label_text_align': 'start',\n    '--ui5wcr_form_label_span': 12\n  }\n});\n\nvar _excluded = [\"titleText\", \"children\", \"className\", \"slot\", \"style\", \"tooltip\", \"columnsS\", \"columnsM\", \"columnsL\", \"columnsXL\", \"labelSpanS\", \"labelSpanM\", \"labelSpanL\", \"labelSpanXL\", \"as\"];\nvar useStyles = createUseStyles(styles, {\n  name: 'Form'\n});\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n */\n\nvar Form = /*#__PURE__*/forwardRef(function (props, ref) {\n  var titleText = props.titleText,\n      children = props.children,\n      className = props.className,\n      slot = props.slot,\n      style = props.style,\n      tooltip = props.tooltip,\n      columnsS = props.columnsS,\n      columnsM = props.columnsM,\n      columnsL = props.columnsL,\n      columnsXL = props.columnsXL,\n      labelSpanS = props.labelSpanS,\n      labelSpanM = props.labelSpanM,\n      labelSpanL = props.labelSpanL,\n      labelSpanXL = props.labelSpanXL,\n      as = props.as,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  useDeprecationNoticeForTooltip('Form', props.tooltip);\n  var columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n  var labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n\n  var _useSyncRef = useSyncRef(ref),\n      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),\n      componentRef = _useSyncRef2[0],\n      formRef = _useSyncRef2[1]; // use the window range set as first best guess\n\n\n  var _useState = useState(getCurrentRange().name),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentRange = _useState2[0],\n      setCurrentRange = _useState2[1];\n\n  var lastRange = useRef(currentRange);\n  useEffect(function () {\n    var observer = new ResizeObserver(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          form = _ref2[0];\n\n      var rangeInfo = getCurrentRange(form.contentRect.width);\n\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n\n    return function () {\n      observer.disconnect();\n    };\n  }, [formRef, setCurrentRange, lastRange]);\n  var classes = useStyles();\n  var currentNumberOfColumns = columnsMap.get(currentRange);\n  var currentLabelSpan = labelSpanMap.get(currentRange);\n\n  var _useMemo = useMemo(function () {\n    var computedFormGroups = [];\n\n    if (Children.count(children) === 1 && !titleText) {\n      var _singleChild$props, _singleChild$props$ti;\n\n      var singleChild = Array.isArray(children) ? children[0] : children;\n\n      if ((singleChild === null || singleChild === void 0 ? void 0 : (_singleChild$props = singleChild.props) === null || _singleChild$props === void 0 ? void 0 : (_singleChild$props$ti = _singleChild$props.title) === null || _singleChild$props$ti === void 0 ? void 0 : _singleChild$props$ti.length) > 0) {\n        return [/*#__PURE__*/cloneElement(singleChild, {\n          title: null\n        }), singleChild.props.title];\n      }\n    }\n\n    var currentColumnCount = currentNumberOfColumns;\n\n    if (currentColumnCount === 1) {\n      return [children, titleText];\n    }\n\n    var rows = [];\n    var childrenArray = Children.toArray(children);\n    var estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;\n\n    for (var i = 0; i < estimatedNumberOfGroupRows; i++) {\n      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);\n    }\n\n    var maxRowsPerRow = [];\n    rows.forEach(function (rowGroup, rowIndex) {\n      var numberOfRowsOfEachForm = rowGroup.map(function (row) {\n        if (row.type.displayName === 'FormItem') {\n          return 1;\n        }\n\n        return Children.count(row.props.children) + 1;\n      });\n      maxRowsPerRow[rowIndex] = Math.max.apply(Math, _toConsumableArray(numberOfRowsOfEachForm));\n    });\n    var totalRowCount = 2;\n    rows.forEach(function (column, rowIndex) {\n      var rowsForThisRow = maxRowsPerRow[rowIndex];\n      column.forEach(function (cell, columnIndex) {\n        var _cell$props;\n\n        var titleStyles = {\n          gridColumnEnd: 'span 12',\n          gridColumnStart: columnIndex * 12 + 1,\n          gridRowStart: totalRowCount,\n          display: 'flex',\n          alignItems: 'center',\n          fontFamily: ThemingParameters.sapFontFamily,\n          height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          color: ThemingParameters.sapTextColor,\n          fontSize: ThemingParameters.sapFontSize,\n          fontWeight: 'bold',\n          backgroundColor: ThemingParameters.sapGroup_TitleBackground,\n          margin: 0,\n          paddingTop: '1rem'\n        };\n\n        if (cell !== null && cell !== void 0 && (_cell$props = cell.props) !== null && _cell$props !== void 0 && _cell$props.titleText) {\n          computedFormGroups.push( /*#__PURE__*/React.createElement(\"h6\", {\n            style: titleStyles,\n            title: cell.props.titleText,\n            \"aria-label\": cell.props.titleText,\n            key: \"title-col-\".concat(columnIndex, \"-row-\").concat(totalRowCount)\n          }, cell.props.titleText));\n        }\n\n        for (var _i = 0; _i < rowsForThisRow; _i++) {\n          var itemToRender = cell.type.displayName === 'FormGroup' ? Children.toArray(cell.props.children)[_i] : cell.type.displayName === 'FormItem' && _i === 0 ? cell : null;\n\n          if (itemToRender) {\n            computedFormGroups.push( /*#__PURE__*/cloneElement(itemToRender, {\n              key: \"col-\".concat(columnIndex, \"-row-\").concat(totalRowCount + _i),\n              columnIndex: columnIndex,\n              lastGroupItem: cell.type.displayName === 'FormGroup' && rowsForThisRow - 2 === _i,\n              rowIndex: totalRowCount + _i + 1,\n              labelSpan: currentLabelSpan\n            }));\n          }\n        }\n      });\n      totalRowCount += rowsForThisRow;\n\n      if (rowsForThisRow === 1) {\n        totalRowCount += 1;\n      }\n    });\n    return [computedFormGroups, titleText];\n  }, [children, currentRange, titleText, currentNumberOfColumns, currentLabelSpan]),\n      _useMemo2 = _slicedToArray(_useMemo, 2),\n      formGroups = _useMemo2[0],\n      updatedTitle = _useMemo2[1];\n\n  var formClassNames = clsx(classes.form, classes[\"labelSpan\".concat((currentLabelSpan - 1) % 12 + 1)], className);\n  var CustomTag = as;\n  return /*#__PURE__*/React.createElement(CustomTag, _extends({\n    ref: componentRef,\n    slot: slot,\n    className: formClassNames,\n    title: tooltip,\n    style: style,\n    \"data-columns\": currentNumberOfColumns\n  }, rest), updatedTitle && /*#__PURE__*/React.createElement(Title, {\n    level: TitleLevel.H3,\n    className: classes.formTitle\n  }, updatedTitle), formGroups);\n});\nForm.displayName = 'Form';\nForm.defaultProps = {\n  as: 'form',\n  columnsS: 1,\n  columnsM: 1,\n  columnsL: 1,\n  columnsXL: 2,\n  labelSpanS: 12,\n  labelSpanM: 2,\n  labelSpanL: 4,\n  labelSpanXL: 4\n};\nexport { Form };","map":{"version":3,"sources":["../src/internal/useDeprecationNotiveForTooltip.ts","../src/components/Form/Form.jss.ts","../src/components/Form/index.tsx"],"names":["useDeprecationNoticeForTooltip","useEffect","deprecationNotice","labelSpanClasses","styleClasses","i","styles","form","display","alignItems","rowGap","columnGap","gridTemplateColumns","formTitle","borderBottom","ThemingParameters","marginBottom","gridColumn","labelSpan12","useStyles","createUseStyles","name","Form","forwardRef","titleText","children","className","slot","style","tooltip","columnsS","columnsM","columnsL","columnsXL","labelSpanS","labelSpanM","labelSpanL","labelSpanXL","as","rest","props","columnsMap","labelSpanMap","componentRef","formRef","useSyncRef","currentRange","setCurrentRange","useState","getCurrentRange","lastRange","useRef","observer","rangeInfo","classes","currentNumberOfColumns","currentLabelSpan","formGroups","updatedTitle","useMemo","computedFormGroups","Children","singleChild","Array","cloneElement","title","currentColumnCount","rows","childrenArray","estimatedNumberOfGroupRows","maxRowsPerRow","numberOfRowsOfEachForm","row","Math","totalRowCount","rowsForThisRow","column","titleStyles","gridColumnEnd","gridColumnStart","columnIndex","gridRowStart","fontFamily","height","CssSizeVariables","lineHeight","color","fontSize","fontWeight","backgroundColor","margin","paddingTop","cell","itemToRender","key","lastGroupItem","rowIndex","labelSpan","formClassNames","clsx","CustomTag","TitleLevel"],"mappings":"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","sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { useEffect } from 'react';\n\nexport const useDeprecationNoticeForTooltip = (component, tooltip) => {\n  useEffect(() => {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\n\nconst labelSpanClasses = () => {\n  let styleClasses = {};\n  for (let i = 1; i <= 11; i++) {\n    styleClasses[`labelSpan${i}`] = {\n      '--ui5wcr_form_content_span': 12 - i,\n      '--ui5wcr_form_label_span': i\n    };\n  }\n  return styleClasses;\n};\n\nconst styles = {\n  form: {\n    display: 'grid',\n    alignItems: 'baseline',\n    rowGap: '0.25rem',\n    columnGap: '0.5rem',\n    gridTemplateColumns: `repeat(12, 1fr)`,\n    '--ui5wcr_form_full_span': 'span 12',\n    '--ui5wcr_form_label_text_align': 'end',\n    '&[data-columns=\"1\"]': {},\n    '&[data-columns=\"2\"]': {\n      gridTemplateColumns: `repeat(24, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 24'\n    },\n    '&[data-columns=\"3\"]': {\n      gridTemplateColumns: `repeat(36, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 36'\n    },\n    '&[data-columns=\"4\"]': {\n      gridTemplateColumns: `repeat(48, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 48'\n    },\n    '&[data-columns=\"5\"]': {\n      gridTemplateColumns: `repeat(60, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 60'\n    },\n    '&[data-columns=\"6\"]': {\n      gridTemplateColumns: `repeat(72, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 72'\n    },\n    '&[data-columns=\"7\"]': {\n      gridTemplateColumns: `repeat(84, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 84'\n    },\n    '&[data-columns=\"8\"]': {\n      gridTemplateColumns: `repeat(96, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 96'\n    },\n    '&[data-columns=\"9\"]': {\n      gridTemplateColumns: `repeat(108, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 108'\n    },\n    '&[data-columns=\"10\"]': {\n      gridTemplateColumns: `repeat(120, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 120'\n    },\n    '&[data-columns=\"11\"]': {\n      gridTemplateColumns: `repeat(132, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 132'\n    },\n    '&[data-columns=\"12\"]': {\n      gridTemplateColumns: `repeat(144, 1fr)`,\n      '--ui5wcr_form_full_span': 'span 144'\n    }\n  },\n  formTitle: {\n    borderBottom: `1px solid ${ThemingParameters.sapGroup_TitleBorderColor}`,\n    marginBottom: '1.75rem',\n    gridColumn: 'var(--ui5wcr_form_full_span)'\n  },\n  ...labelSpanClasses(),\n  labelSpan12: {\n    '--ui5wcr_form_content_span': 12,\n    '--ui5wcr_form_label_text_align': 'start',\n    '--ui5wcr_form_label_span': 12\n  }\n};\n\nexport { styles };\n","import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { getCurrentRange } from '@ui5/webcomponents-react-base/dist/Device';\nimport { useSyncRef } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { Title } from '@ui5/webcomponents-react/dist/Title';\nimport { TitleLevel } from '@ui5/webcomponents-react/dist/TitleLevel';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport clsx from 'clsx';\nimport React, {\n  Children,\n  cloneElement,\n  CSSProperties,\n  forwardRef,\n  ReactElement,\n  Ref,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { createUseStyles } from 'react-jss';\nimport { useDeprecationNoticeForTooltip } from '../../internal/useDeprecationNotiveForTooltip';\nimport { styles } from './Form.jss';\n\nexport interface FormPropTypes extends CommonProps {\n  /**\n   * Components that are placed into Form. Please use only `FormGroup` and `FormItem` in order to preserve the\n   * intended design.\n   */\n  children: ReactElement | ReactElement[];\n  /**\n   * Form title\n   */\n  titleText?: string;\n  /**\n   * Form columns for small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   */\n  columnsS?: number;\n  /**\n   * Form columns for medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note__: The number of columns for medium size must not be smaller than the number of columns for small size.\n   */\n  columnsM?: number;\n  /**\n   * Form columns for large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 1\n   *\n   * __Note:__ The number of columns for large size must not be smaller than the number of columns for medium size.\n   */\n  columnsL?: number;\n  /**\n   * Form columns for extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   *\n   * __Note:__ The number of columns for extra large size must not be smaller than the number of columns for large size.\n   */\n  columnsXL?: number;\n\n  /**\n   * Default span for labels in small size (`< 600px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 12\n   */\n  labelSpanS?: number;\n  /**\n   * Default span for labels in medium size (`600px` - `1023px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 2\n   */\n  labelSpanM?: number;\n  /**\n   * Default span for labels in large size (`1024px` - `1439px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanL?: number;\n  /**\n   * Default span for labels in extra large size (`>= 1440px`).\n   * Must be a number between 1 and 12.\n   *\n   * Default Value: 4\n   */\n  labelSpanXL?: number;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n}\n\nconst useStyles = createUseStyles(styles, { name: 'Form' });\n/**\n * The `Form` component arranges labels and fields into groups and rows. There are different ways to visualize forms for different screen sizes.\n */\nconst Form = forwardRef((props: FormPropTypes, ref: Ref<HTMLFormElement>) => {\n  const {\n    titleText,\n    children,\n    className,\n    slot,\n    style,\n    tooltip,\n    columnsS,\n    columnsM,\n    columnsL,\n    columnsXL,\n    labelSpanS,\n    labelSpanM,\n    labelSpanL,\n    labelSpanXL,\n    as,\n    ...rest\n  } = props;\n\n  useDeprecationNoticeForTooltip('Form', props.tooltip);\n\n  const columnsMap = new Map();\n  columnsMap.set('Phone', columnsS);\n  columnsMap.set('Tablet', columnsM);\n  columnsMap.set('Desktop', columnsL);\n  columnsMap.set('LargeDesktop', columnsXL);\n\n  const labelSpanMap = new Map();\n  labelSpanMap.set('Phone', labelSpanS);\n  labelSpanMap.set('Tablet', labelSpanM);\n  labelSpanMap.set('Desktop', labelSpanL);\n  labelSpanMap.set('LargeDesktop', labelSpanXL);\n\n  const [componentRef, formRef] = useSyncRef<HTMLFormElement>(ref);\n  // use the window range set as first best guess\n  const [currentRange, setCurrentRange] = useState(getCurrentRange().name);\n  const lastRange = useRef(currentRange);\n\n  useEffect(() => {\n    const observer = new ResizeObserver(([form]) => {\n      const rangeInfo = getCurrentRange(form.contentRect.width);\n      if (rangeInfo && lastRange.current !== rangeInfo.name) {\n        lastRange.current = rangeInfo.name;\n        setCurrentRange(rangeInfo.name);\n      }\n    });\n\n    if (formRef.current) {\n      observer.observe(formRef.current);\n    }\n\n    return () => {\n      observer.disconnect();\n    };\n  }, [formRef, setCurrentRange, lastRange]);\n\n  const classes = useStyles();\n\n  const currentNumberOfColumns = columnsMap.get(currentRange);\n  const currentLabelSpan = labelSpanMap.get(currentRange);\n\n  const [formGroups, updatedTitle] = useMemo(() => {\n    const computedFormGroups: any[] = [];\n    if (Children.count(children) === 1 && !titleText) {\n      const singleChild = Array.isArray(children) ? children[0] : children;\n      if (singleChild?.props?.title?.length > 0) {\n        return [cloneElement(singleChild, { title: null }), singleChild.props.title];\n      }\n    }\n\n    const currentColumnCount = currentNumberOfColumns;\n    if (currentColumnCount === 1) {\n      return [children, titleText];\n    }\n\n    const rows = [];\n    const childrenArray = Children.toArray(children);\n    const estimatedNumberOfGroupRows = childrenArray.length / currentColumnCount;\n    for (let i = 0; i < estimatedNumberOfGroupRows; i++) {\n      rows[i] = childrenArray.slice(i * currentColumnCount, i * currentColumnCount + currentColumnCount);\n    }\n\n    const maxRowsPerRow: number[] = [];\n    rows.forEach((rowGroup: ReactElement[], rowIndex) => {\n      const numberOfRowsOfEachForm = rowGroup.map((row) => {\n        if ((row.type as any).displayName === 'FormItem') {\n          return 1;\n        }\n        return Children.count(row.props.children) + 1;\n      });\n\n      maxRowsPerRow[rowIndex] = Math.max(...numberOfRowsOfEachForm);\n    });\n\n    let totalRowCount = 2;\n\n    rows.forEach((column: ReactElement[], rowIndex) => {\n      const rowsForThisRow = maxRowsPerRow[rowIndex];\n      column.forEach((cell, columnIndex) => {\n        const titleStyles: CSSProperties = {\n          gridColumnEnd: 'span 12',\n          gridColumnStart: columnIndex * 12 + 1,\n          gridRowStart: totalRowCount,\n          display: 'flex',\n          alignItems: 'center',\n          fontFamily: ThemingParameters.sapFontFamily,\n          height: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          lineHeight: CssSizeVariables.sapWcrFormGroupTitleHeight,\n          color: ThemingParameters.sapTextColor,\n          fontSize: ThemingParameters.sapFontSize,\n          fontWeight: 'bold',\n          backgroundColor: ThemingParameters.sapGroup_TitleBackground,\n          margin: 0,\n          paddingTop: '1rem'\n        };\n\n        if (cell?.props?.titleText) {\n          computedFormGroups.push(\n            <h6\n              style={titleStyles}\n              title={cell.props.titleText}\n              aria-label={cell.props.titleText}\n              key={`title-col-${columnIndex}-row-${totalRowCount}`}\n            >\n              {cell.props.titleText}\n            </h6>\n          );\n        }\n\n        for (let i = 0; i < rowsForThisRow; i++) {\n          const itemToRender =\n            (cell.type as any).displayName === 'FormGroup'\n              ? Children.toArray(cell.props.children)[i]\n              : (cell.type as any).displayName === 'FormItem' && i === 0\n              ? cell\n              : null;\n\n          if (itemToRender) {\n            computedFormGroups.push(\n              cloneElement(itemToRender as ReactElement, {\n                key: `col-${columnIndex}-row-${totalRowCount + i}`,\n                columnIndex,\n                lastGroupItem: (cell.type as any).displayName === 'FormGroup' && rowsForThisRow - 2 === i,\n                rowIndex: totalRowCount + i + 1,\n                labelSpan: currentLabelSpan\n              })\n            );\n          }\n        }\n      });\n      totalRowCount += rowsForThisRow;\n      if (rowsForThisRow === 1) {\n        totalRowCount += 1;\n      }\n    });\n\n    return [computedFormGroups, titleText];\n  }, [children, currentRange, titleText, currentNumberOfColumns, currentLabelSpan]);\n\n  const formClassNames = clsx(classes.form, classes[`labelSpan${((currentLabelSpan - 1) % 12) + 1}`], className);\n\n  const CustomTag = as as React.ElementType;\n  return (\n    <CustomTag\n      ref={componentRef}\n      slot={slot}\n      className={formClassNames}\n      title={tooltip}\n      style={style}\n      data-columns={currentNumberOfColumns}\n      {...rest}\n    >\n      {updatedTitle && (\n        <Title level={TitleLevel.H3} className={classes.formTitle}>\n          {updatedTitle}\n        </Title>\n      )}\n      {formGroups}\n    </CustomTag>\n  );\n});\n\nForm.displayName = 'Form';\n\nForm.defaultProps = {\n  as: 'form',\n  columnsS: 1,\n  columnsM: 1,\n  columnsL: 1,\n  columnsXL: 2,\n  labelSpanS: 12,\n  labelSpanM: 2,\n  labelSpanL: 4,\n  labelSpanXL: 4\n};\n\nexport { Form };\n"]},"metadata":{},"sourceType":"module"}