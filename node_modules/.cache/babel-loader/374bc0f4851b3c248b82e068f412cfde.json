{"ast":null,"code":"import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport { isIE } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport { isSpace, isEnter } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION, SEGMENTEDBUTTON_ARIA_DESCRIBEDBY } from \"./generated/i18n/i18n-defaults.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\"; // Template\n\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\"; // Styles\n\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-segmented-button\",\n  altTag: \"ui5-segmentedbutton\",\n  languageAware: true,\n  properties:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Sets the accessible aria name of the component.\n     *\n     * @type {String}\n     * @defaultvalue: \"\"\n     * @public\n     * @since 1.0.3\n     */\n    accessibleName: {\n      type: String,\n      defaultValue: undefined\n    }\n  },\n  managedSlots: true,\n  slots:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Defines the items of <code>ui5-segmented-button</code>.\n     * <br><br>\n     * <b>Note:</b> Multiple items are allowed.\n     * <br><br>\n     * <b>Note:</b> Use the <code>ui5-segmented-button-item</code> for the intended design.\n     * @type {sap.ui.webcomponents.main.ISegmentedButtonItem[]}\n     * @slot items\n     * @public\n     */\n    \"default\": {\n      propertyName: \"items\",\n      type: HTMLElement\n    }\n  },\n  events:\n  /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */\n  {\n    /**\n     * Fired when the selected item changes.\n     *\n     * @event sap.ui.webcomponents.main.SegmentedButton#selection-change\n     * @param {HTMLElement} selectedItem the pressed item.\n     * @public\n     */\n    \"selection-change\": {\n      detail: {\n        selectedItem: {\n          type: HTMLElement\n        }\n      }\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmented-button</code> shows a group of items. When the user clicks or taps\n * one of the items, it stays in a pressed state. It automatically resizes the items\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>item</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmented-button\n * @since 1.0.0-rc.6\n * @appenddocs SegmentedButtonItem\n * @public\n */\n\nclass SegmentedButton extends UI5Element {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get render() {\n    return litRender;\n  }\n\n  static get template() {\n    return SegmentedButtonTemplate;\n  }\n\n  static get styles() {\n    return SegmentedButtonCss;\n  }\n\n  static get dependencies() {\n    return [SegmentedButtonItem];\n  }\n\n  static async onDefine() {\n    SegmentedButton.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n\n  constructor() {\n    super();\n    this._itemNavigation = new ItemNavigation(this, {\n      getItemsCallback: () => this.getSlottedNodes(\"items\")\n    });\n    this.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\n    this.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\n    this.hasPreviouslyFocusedItem = false;\n    this._handleResizeBound = this._doLayout.bind(this);\n  }\n\n  onEnterDOM() {\n    ResizeHandler.register(this.parentNode, this._handleResizeBound);\n  }\n\n  onExitDOM() {\n    if (this.parentNode) {\n      ResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n    }\n  }\n\n  onBeforeRendering() {\n    const items = this.getSlottedNodes(\"items\");\n    items.forEach((item, index, arr) => {\n      item.posInSet = index + 1;\n      item.sizeOfSet = arr.length;\n    });\n    this.normalizeSelection();\n  }\n\n  async onAfterRendering() {\n    await this._doLayout();\n  }\n\n  prepareToMeasureItems() {\n    this.style.width = \"\";\n    this.items.forEach(item => {\n      item.style.width = \"\";\n    });\n  }\n\n  async measureItemsWidth() {\n    await renderFinished();\n    this.prepareToMeasureItems();\n    this.widths = this.items.map(item => {\n      // +1 is added because for width 100.44px the offsetWidth property returns 100px and not 101px\n      let width = item.offsetWidth + 1;\n\n      if (isIE()) {\n        // in IE we are adding 1 one px beacause the width of the border on an item in the middle is not calculated and if the\n        // longest item is in the middle, it truncates\n        width += 1;\n      }\n\n      return width;\n    });\n  }\n\n  normalizeSelection() {\n    this._selectedItem = this.items.filter(item => item.pressed).pop();\n\n    if (this._selectedItem) {\n      this.items.forEach(item => {\n        item.pressed = false;\n      });\n      this._selectedItem.pressed = true;\n    }\n  }\n\n  _selectItem(event) {\n    if (event.target.disabled || event.target === this.getDomRef()) {\n      return;\n    }\n\n    if (event.target !== this._selectedItem) {\n      if (this._selectedItem) {\n        this._selectedItem.pressed = false;\n      }\n\n      this._selectedItem = event.target;\n      this.fireEvent(\"selection-change\", {\n        selectedItem: this._selectedItem\n      });\n    }\n\n    this._selectedItem.pressed = true;\n\n    this._itemNavigation.setCurrentItem(this._selectedItem);\n\n    return this;\n  }\n\n  _onclick(event) {\n    this._selectItem(event);\n\n    this.selectedItem.focus();\n  }\n\n  _onkeydown(event) {\n    if (isEnter(event)) {\n      this._selectItem(event);\n    } else if (isSpace(event)) {\n      event.preventDefault();\n    }\n  }\n\n  _onkeyup(event) {\n    if (isSpace(event)) {\n      this._selectItem(event);\n    }\n  }\n\n  _onfocusin(event) {\n    // If the component was previously focused,\n    // update the ItemNavigation to sync butons` tabindex values\n    if (this.hasPreviouslyFocusedItem) {\n      this._itemNavigation.setCurrentItem(event.target);\n\n      return;\n    } // If the component is focused for the first time\n    // focus the selected item if such present\n\n\n    if (this.selectedItem) {\n      this.selectedItem.focus();\n\n      this._itemNavigation.setCurrentItem(this._selectedItem);\n\n      this.hasPreviouslyFocusedItem = true;\n    }\n  }\n\n  async _doLayout() {\n    const itemsHaveWidth = this.widths && this.widths.some(item => item.offsetWidth > 2); // 2 are the pixel's added for rounding & IE\n\n    if (!itemsHaveWidth) {\n      await this.measureItemsWidth();\n    }\n\n    const parentWidth = this.parentNode ? this.parentNode.offsetWidth : 0;\n\n    if (!this.style.width || this.percentageWidthSet) {\n      this.style.width = `${Math.max(...this.widths) * this.items.length}px`;\n      this.absoluteWidthSet = true;\n    }\n\n    this.items.forEach(item => {\n      item.style.width = \"100%\";\n    });\n\n    if (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n      this.style.width = \"100%\";\n      this.percentageWidthSet = true;\n    }\n  }\n  /**\n   * Currently selected item.\n   *\n   * @readonly\n   * @type { sap.ui.webcomponents.main.ISegmentedButtonItem }\n   * @public\n   */\n\n\n  get selectedItem() {\n    return this._selectedItem;\n  }\n\n  get ariaDescribedBy() {\n    return SegmentedButton.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIBEDBY);\n  }\n\n  get ariaDescription() {\n    return SegmentedButton.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n  }\n\n}\n\nSegmentedButton.define();\nexport default SegmentedButton;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/SegmentedButton.js"],"names":["UI5Element","ItemNavigation","litRender","getI18nBundle","ResizeHandler","renderFinished","isIE","isSpace","isEnter","SEGMENTEDBUTTON_ARIA_DESCRIPTION","SEGMENTEDBUTTON_ARIA_DESCRIBEDBY","SegmentedButtonItem","SegmentedButtonTemplate","SegmentedButtonCss","metadata","tag","altTag","languageAware","properties","accessibleName","type","String","defaultValue","undefined","managedSlots","slots","propertyName","HTMLElement","events","detail","selectedItem","SegmentedButton","render","template","styles","dependencies","onDefine","i18nBundle","constructor","_itemNavigation","getItemsCallback","getSlottedNodes","absoluteWidthSet","percentageWidthSet","hasPreviouslyFocusedItem","_handleResizeBound","_doLayout","bind","onEnterDOM","register","parentNode","onExitDOM","deregister","onBeforeRendering","items","forEach","item","index","arr","posInSet","sizeOfSet","length","normalizeSelection","onAfterRendering","prepareToMeasureItems","style","width","measureItemsWidth","widths","map","offsetWidth","_selectedItem","filter","pressed","pop","_selectItem","event","target","disabled","getDomRef","fireEvent","setCurrentItem","_onclick","focus","_onkeydown","preventDefault","_onkeyup","_onfocusin","itemsHaveWidth","some","parentWidth","Math","max","ariaDescribedBy","getText","ariaDescription","define"],"mappings":"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","sourcesContent":["import UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport ItemNavigation from \"@ui5/webcomponents-base/dist/delegate/ItemNavigation.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ResizeHandler from \"@ui5/webcomponents-base/dist/delegate/ResizeHandler.js\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport { isIE } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport {\n\tisSpace,\n\tisEnter,\n} from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport { SEGMENTEDBUTTON_ARIA_DESCRIPTION, SEGMENTEDBUTTON_ARIA_DESCRIBEDBY } from \"./generated/i18n/i18n-defaults.js\";\nimport SegmentedButtonItem from \"./SegmentedButtonItem.js\";\n\n// Template\nimport SegmentedButtonTemplate from \"./generated/templates/SegmentedButtonTemplate.lit.js\";\n\n// Styles\nimport SegmentedButtonCss from \"./generated/themes/SegmentedButton.css.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-segmented-button\",\n\taltTag: \"ui5-segmentedbutton\",\n\tlanguageAware: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */  {\n\t\t/**\n\t\t * Sets the accessible aria name of the component.\n\t\t *\n\t\t * @type {String}\n\t\t * @defaultvalue: \"\"\n\t\t * @public\n\t\t * @since 1.0.3\n\t\t */\n\t\t accessibleName: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: undefined,\n\t\t},\n\t},\n\tmanagedSlots: true,\n\tslots: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Defines the items of <code>ui5-segmented-button</code>.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Multiple items are allowed.\n\t\t * <br><br>\n\t\t * <b>Note:</b> Use the <code>ui5-segmented-button-item</code> for the intended design.\n\t\t * @type {sap.ui.webcomponents.main.ISegmentedButtonItem[]}\n\t\t * @slot items\n\t\t * @public\n\t\t */\n\t\t\"default\": {\n\t\t\tpropertyName: \"items\",\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.main.SegmentedButton.prototype */ {\n\n\t\t/**\n\t\t * Fired when the selected item changes.\n\t\t *\n\t\t * @event sap.ui.webcomponents.main.SegmentedButton#selection-change\n\t\t * @param {HTMLElement} selectedItem the pressed item.\n\t\t * @public\n\t\t */\n\t\t\"selection-change\": {\n\t\t\tdetail: {\n\t\t\t\tselectedItem: { type: HTMLElement },\n\t\t\t},\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * The <code>ui5-segmented-button</code> shows a group of items. When the user clicks or taps\n * one of the items, it stays in a pressed state. It automatically resizes the items\n * to fit proportionally within the component. When no width is set, the component uses the available width.\n * <br><br>\n * <b>Note:</b> There can be just one selected <code>item</code> at a time.\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/SegmentedButton\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.SegmentedButton\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-segmented-button\n * @since 1.0.0-rc.6\n * @appenddocs SegmentedButtonItem\n * @public\n */\nclass SegmentedButton extends UI5Element {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get template() {\n\t\treturn SegmentedButtonTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn SegmentedButtonCss;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [SegmentedButtonItem];\n\t}\n\n\tstatic async onDefine() {\n\t\tSegmentedButton.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._itemNavigation = new ItemNavigation(this, {\n\t\t\tgetItemsCallback: () => this.getSlottedNodes(\"items\"),\n\t\t});\n\n\t\tthis.absoluteWidthSet = false; // set to true whenever we set absolute width to the component\n\t\tthis.percentageWidthSet = false; //  set to true whenever we set 100% width to the component\n\t\tthis.hasPreviouslyFocusedItem = false;\n\n\t\tthis._handleResizeBound = this._doLayout.bind(this);\n\t}\n\n\tonEnterDOM() {\n\t\tResizeHandler.register(this.parentNode, this._handleResizeBound);\n\t}\n\n\tonExitDOM() {\n\t\tif (this.parentNode) {\n\t\t\tResizeHandler.deregister(this.parentNode, this._handleResizeBound);\n\t\t}\n\t}\n\n\tonBeforeRendering() {\n\t\tconst items = this.getSlottedNodes(\"items\");\n\n\t\titems.forEach((item, index, arr) => {\n\t\t\titem.posInSet = index + 1;\n\t\t\titem.sizeOfSet = arr.length;\n\t\t});\n\n\t\tthis.normalizeSelection();\n\t}\n\n\tasync onAfterRendering() {\n\t\tawait this._doLayout();\n\t}\n\n\tprepareToMeasureItems() {\n\t\tthis.style.width = \"\";\n\t\tthis.items.forEach(item => {\n\t\t\titem.style.width = \"\";\n\t\t});\n\t}\n\n\tasync measureItemsWidth() {\n\t\tawait renderFinished();\n\t\tthis.prepareToMeasureItems();\n\n\t\tthis.widths = this.items.map(item => {\n\t\t\t// +1 is added because for width 100.44px the offsetWidth property returns 100px and not 101px\n\t\t\tlet width = item.offsetWidth + 1;\n\n\t\t\tif (isIE()) {\n\t\t\t\t// in IE we are adding 1 one px beacause the width of the border on an item in the middle is not calculated and if the\n\t\t\t\t// longest item is in the middle, it truncates\n\t\t\t\twidth += 1;\n\t\t\t}\n\n\t\t\treturn width;\n\t\t});\n\t}\n\n\tnormalizeSelection() {\n\t\tthis._selectedItem = this.items.filter(item => item.pressed).pop();\n\n\t\tif (this._selectedItem) {\n\t\t\tthis.items.forEach(item => {\n\t\t\t\titem.pressed = false;\n\t\t\t});\n\t\t\tthis._selectedItem.pressed = true;\n\t\t}\n\t}\n\n\t_selectItem(event) {\n\t\tif (event.target.disabled || event.target === this.getDomRef()) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (event.target !== this._selectedItem) {\n\t\t\tif (this._selectedItem) {\n\t\t\t\tthis._selectedItem.pressed = false;\n\t\t\t}\n\t\t\tthis._selectedItem = event.target;\n\t\t\tthis.fireEvent(\"selection-change\", {\n\t\t\t\tselectedItem: this._selectedItem,\n\t\t\t});\n\t\t}\n\n\t\tthis._selectedItem.pressed = true;\n\t\tthis._itemNavigation.setCurrentItem(this._selectedItem);\n\n\t\treturn this;\n\t}\n\n\t_onclick(event) {\n\t\tthis._selectItem(event);\n\t\tthis.selectedItem.focus();\n\t}\n\n\t_onkeydown(event) {\n\t\tif (isEnter(event)) {\n\t\t\tthis._selectItem(event);\n\t\t} else if (isSpace(event)) {\n\t\t\tevent.preventDefault();\n\t\t}\n\t}\n\n\t_onkeyup(event) {\n\t\tif (isSpace(event)) {\n\t\t\tthis._selectItem(event);\n\t\t}\n\t}\n\n\t_onfocusin(event) {\n\t\t// If the component was previously focused,\n\t\t// update the ItemNavigation to sync butons` tabindex values\n\t\tif (this.hasPreviouslyFocusedItem) {\n\t\t\tthis._itemNavigation.setCurrentItem(event.target);\n\t\t\treturn;\n\t\t}\n\n\t\t// If the component is focused for the first time\n\t\t// focus the selected item if such present\n\t\tif (this.selectedItem) {\n\t\t\tthis.selectedItem.focus();\n\t\t\tthis._itemNavigation.setCurrentItem(this._selectedItem);\n\t\t\tthis.hasPreviouslyFocusedItem = true;\n\t\t}\n\t}\n\n\tasync _doLayout() {\n\t\tconst itemsHaveWidth = this.widths && this.widths.some(item => item.offsetWidth > 2); // 2 are the pixel's added for rounding & IE\n\t\tif (!itemsHaveWidth) {\n\t\t\tawait this.measureItemsWidth();\n\t\t}\n\n\t\tconst parentWidth = this.parentNode ? this.parentNode.offsetWidth : 0;\n\n\t\tif (!this.style.width || this.percentageWidthSet) {\n\t\t\tthis.style.width = `${Math.max(...this.widths) * this.items.length}px`;\n\t\t\tthis.absoluteWidthSet = true;\n\t\t}\n\n\t\tthis.items.forEach(item => {\n\t\t\titem.style.width = \"100%\";\n\t\t});\n\n\t\tif (parentWidth <= this.offsetWidth && this.absoluteWidthSet) {\n\t\t\tthis.style.width = \"100%\";\n\t\t\tthis.percentageWidthSet = true;\n\t\t}\n\t}\n\n\t/**\n\t * Currently selected item.\n\t *\n\t * @readonly\n\t * @type { sap.ui.webcomponents.main.ISegmentedButtonItem }\n\t * @public\n\t */\n\tget selectedItem() {\n\t\treturn this._selectedItem;\n\t}\n\n\tget ariaDescribedBy() {\n\t\treturn SegmentedButton.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIBEDBY);\n\t}\n\n\tget ariaDescription() {\n\t\treturn SegmentedButton.i18nBundle.getText(SEGMENTEDBUTTON_ARIA_DESCRIPTION);\n\t}\n}\n\nSegmentedButton.define();\n\nexport default SegmentedButton;\n"]},"metadata":{},"sourceType":"module"}