{"ast":null,"code":"import EventProvider from \"./EventProvider.js\";\nimport whenDOMReady from \"./util/whenDOMReady.js\";\nimport insertFontFace from \"./FontFace.js\";\nimport insertSystemCSSVars from \"./SystemCSSVars.js\";\nimport { getTheme } from \"./config/Theme.js\";\nimport applyTheme from \"./theming/applyTheme.js\";\nimport { registerCurrentRuntime } from \"./Runtimes.js\";\nimport { getFeature } from \"./FeaturesRegistry.js\";\nlet bootPromise;\nconst eventProvider = new EventProvider();\n/**\n * Attach a callback that will be executed on boot\n * @public\n * @param listener\n */\n\nconst attachBoot = listener => {\n  eventProvider.attachEvent(\"boot\", listener);\n};\n\nconst boot = async () => {\n  if (bootPromise) {\n    return bootPromise;\n  }\n  /* eslint-disable no-alert, no-async-promise-executor */\n\n  /*\n  \tNote(since we disable eslint rule):\n  \tIf an async executor function throws an error, the error will be lost and won't cause the newly-constructed Promise to reject.\n  \tThis could make it difficult to debug and handle some errors.\n  */\n\n\n  bootPromise = new Promise(async resolve => {\n    registerCurrentRuntime();\n    const OpenUI5Support = getFeature(\"OpenUI5Support\");\n    const F6Navigation = getFeature(\"F6Navigation\");\n\n    if (OpenUI5Support) {\n      await OpenUI5Support.init();\n    } else if (F6Navigation) {\n      F6Navigation.init();\n    }\n\n    await whenDOMReady();\n    await applyTheme(getTheme());\n    OpenUI5Support && OpenUI5Support.attachListeners();\n    insertFontFace();\n    insertSystemCSSVars();\n    await eventProvider.fireEventAsync(\"boot\");\n    resolve();\n  });\n  /* eslint-enable no-alert, no-async-promise-executor */\n\n  return bootPromise;\n};\n\nexport { boot, attachBoot };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/Boot.js"],"names":["EventProvider","whenDOMReady","insertFontFace","insertSystemCSSVars","getTheme","applyTheme","registerCurrentRuntime","getFeature","bootPromise","eventProvider","attachBoot","listener","attachEvent","boot","Promise","resolve","OpenUI5Support","F6Navigation","init","attachListeners","fireEventAsync"],"mappings":"AAAA,OAAOA,aAAP,MAA0B,oBAA1B;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAOC,cAAP,MAA2B,eAA3B;AACA,OAAOC,mBAAP,MAAgC,oBAAhC;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,sBAAT,QAAuC,eAAvC;AACA,SAASC,UAAT,QAA2B,uBAA3B;AAEA,IAAIC,WAAJ;AACA,MAAMC,aAAa,GAAG,IAAIT,aAAJ,EAAtB;AAEA;AACA;AACA;AACA;AACA;;AACA,MAAMU,UAAU,GAAGC,QAAQ,IAAI;AAC9BF,EAAAA,aAAa,CAACG,WAAd,CAA0B,MAA1B,EAAkCD,QAAlC;AACA,CAFD;;AAIA,MAAME,IAAI,GAAG,YAAY;AACxB,MAAIL,WAAJ,EAAiB;AAChB,WAAOA,WAAP;AACA;AAED;;AACA;AACD;AACA;AACA;AACA;;;AACCA,EAAAA,WAAW,GAAG,IAAIM,OAAJ,CAAY,MAAMC,OAAN,IAAiB;AAC1CT,IAAAA,sBAAsB;AAEtB,UAAMU,cAAc,GAAGT,UAAU,CAAC,gBAAD,CAAjC;AACA,UAAMU,YAAY,GAAGV,UAAU,CAAC,cAAD,CAA/B;;AACA,QAAIS,cAAJ,EAAoB;AACnB,YAAMA,cAAc,CAACE,IAAf,EAAN;AACA,KAFD,MAEO,IAAID,YAAJ,EAAkB;AACxBA,MAAAA,YAAY,CAACC,IAAb;AACA;;AAED,UAAMjB,YAAY,EAAlB;AACA,UAAMI,UAAU,CAACD,QAAQ,EAAT,CAAhB;AACAY,IAAAA,cAAc,IAAIA,cAAc,CAACG,eAAf,EAAlB;AACAjB,IAAAA,cAAc;AACdC,IAAAA,mBAAmB;AACnB,UAAMM,aAAa,CAACW,cAAd,CAA6B,MAA7B,CAAN;AAEAL,IAAAA,OAAO;AACP,GAnBa,CAAd;AAoBA;;AAEA,SAAOP,WAAP;AACA,CAlCD;;AAoCA,SACCK,IADD,EAECH,UAFD","sourcesContent":["import EventProvider from \"./EventProvider.js\";\nimport whenDOMReady from \"./util/whenDOMReady.js\";\nimport insertFontFace from \"./FontFace.js\";\nimport insertSystemCSSVars from \"./SystemCSSVars.js\";\nimport { getTheme } from \"./config/Theme.js\";\nimport applyTheme from \"./theming/applyTheme.js\";\nimport { registerCurrentRuntime } from \"./Runtimes.js\";\nimport { getFeature } from \"./FeaturesRegistry.js\";\n\nlet bootPromise;\nconst eventProvider = new EventProvider();\n\n/**\n * Attach a callback that will be executed on boot\n * @public\n * @param listener\n */\nconst attachBoot = listener => {\n\teventProvider.attachEvent(\"boot\", listener);\n};\n\nconst boot = async () => {\n\tif (bootPromise) {\n\t\treturn bootPromise;\n\t}\n\n\t/* eslint-disable no-alert, no-async-promise-executor */\n\t/*\n\t\tNote(since we disable eslint rule):\n\t\tIf an async executor function throws an error, the error will be lost and won't cause the newly-constructed Promise to reject.\n\t\tThis could make it difficult to debug and handle some errors.\n\t*/\n\tbootPromise = new Promise(async resolve => {\n\t\tregisterCurrentRuntime();\n\n\t\tconst OpenUI5Support = getFeature(\"OpenUI5Support\");\n\t\tconst F6Navigation = getFeature(\"F6Navigation\");\n\t\tif (OpenUI5Support) {\n\t\t\tawait OpenUI5Support.init();\n\t\t} else if (F6Navigation) {\n\t\t\tF6Navigation.init();\n\t\t}\n\n\t\tawait whenDOMReady();\n\t\tawait applyTheme(getTheme());\n\t\tOpenUI5Support && OpenUI5Support.attachListeners();\n\t\tinsertFontFace();\n\t\tinsertSystemCSSVars();\n\t\tawait eventProvider.fireEventAsync(\"boot\");\n\n\t\tresolve();\n\t});\n\t/* eslint-enable no-alert, no-async-promise-executor */\n\n\treturn bootPromise;\n};\n\nexport {\n\tboot,\n\tattachBoot,\n};\n"]},"metadata":{},"sourceType":"module"}