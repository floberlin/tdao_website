{"ast":null,"code":"/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * This is the original style-map.js directive from lit-html 2 with the only difference that \"render\" is not called even for the first rendering (update is used instead)\n */\nimport { noChange } from 'lit-html';\nimport { directive, Directive, PartType } from 'lit-html/directive.js';\n\nclass StyleMapDirective extends Directive {\n  constructor(partInfo) {\n    var _a;\n\n    super(partInfo);\n\n    if (partInfo.type !== PartType.ATTRIBUTE || partInfo.name !== 'style' || ((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n      throw new Error('The `styleMap` directive must be used in the `style` attribute ' + 'and must be the only part in the attribute.');\n    }\n  }\n\n  render(styleInfo) {\n    return \"\";\n  }\n\n  update(part, [styleInfo]) {\n    const {\n      style\n    } = part.element;\n\n    if (this._previousStyleProperties === undefined) {\n      this._previousStyleProperties = new Set();\n\n      for (const name in styleInfo) {\n        this._previousStyleProperties.add(name);\n      } // return this.render(styleInfo);\n\n    } // Remove old properties that no longer exist in styleInfo\n    // We use forEach() instead of for-of so that re don't require down-level\n    // iteration.\n\n\n    this._previousStyleProperties.forEach(name => {\n      // If the name isn't in styleInfo or it's null/undefined\n      if (styleInfo[name] == null) {\n        this._previousStyleProperties.delete(name);\n\n        if (name.includes('-')) {\n          style.removeProperty(name);\n        } else {\n          // Note reset using empty string (vs null) as IE11 does not always\n          // reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = '';\n        }\n      }\n    }); // Add or update properties\n\n\n    for (const name in styleInfo) {\n      const value = styleInfo[name];\n\n      if (value != null) {\n        this._previousStyleProperties.add(name);\n\n        if (name.includes('-')) {\n          style.setProperty(name, value);\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          style[name] = value;\n        }\n      }\n    }\n\n    return noChange;\n  }\n\n}\n\nexport const styleMap = directive(StyleMapDirective);","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/renderer/directives/style-map.js"],"names":["noChange","directive","Directive","PartType","StyleMapDirective","constructor","partInfo","_a","type","ATTRIBUTE","name","strings","length","Error","render","styleInfo","update","part","style","element","_previousStyleProperties","undefined","Set","add","forEach","delete","includes","removeProperty","value","setProperty","styleMap"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA,SAASA,QAAT,QAAyB,UAAzB;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,QAA/B,QAAgD,uBAAhD;;AACA,MAAMC,iBAAN,SAAgCF,SAAhC,CAA0C;AACzCG,EAAAA,WAAW,CAACC,QAAD,EAAW;AACrB,QAAIC,EAAJ;;AACA,UAAMD,QAAN;;AACA,QAAIA,QAAQ,CAACE,IAAT,KAAkBL,QAAQ,CAACM,SAA3B,IACHH,QAAQ,CAACI,IAAT,KAAkB,OADf,IAEH,CAAC,CAACH,EAAE,GAAGD,QAAQ,CAACK,OAAf,MAA4B,IAA5B,IAAoCJ,EAAE,KAAK,KAAK,CAAhD,GAAoD,KAAK,CAAzD,GAA6DA,EAAE,CAACK,MAAjE,IAA2E,CAF5E,EAE+E;AAC9E,YAAM,IAAIC,KAAJ,CAAU,oEACf,6CADK,CAAN;AAEA;AACD;;AACDC,EAAAA,MAAM,CAACC,SAAD,EAAY;AACjB,WAAO,EAAP;AACA;;AACDC,EAAAA,MAAM,CAACC,IAAD,EAAO,CAACF,SAAD,CAAP,EAAoB;AACzB,UAAM;AAAEG,MAAAA;AAAF,QAAYD,IAAI,CAACE,OAAvB;;AACA,QAAI,KAAKC,wBAAL,KAAkCC,SAAtC,EAAiD;AAChD,WAAKD,wBAAL,GAAgC,IAAIE,GAAJ,EAAhC;;AACA,WAAK,MAAMZ,IAAX,IAAmBK,SAAnB,EAA8B;AAC7B,aAAKK,wBAAL,CAA8BG,GAA9B,CAAkCb,IAAlC;AACA,OAJ+C,CAKhD;;AACA,KARwB,CASzB;AACA;AACA;;;AACA,SAAKU,wBAAL,CAA8BI,OAA9B,CAAuCd,IAAD,IAAU;AAC/C;AACA,UAAIK,SAAS,CAACL,IAAD,CAAT,IAAmB,IAAvB,EAA6B;AAC5B,aAAKU,wBAAL,CAA8BK,MAA9B,CAAqCf,IAArC;;AACA,YAAIA,IAAI,CAACgB,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACvBR,UAAAA,KAAK,CAACS,cAAN,CAAqBjB,IAArB;AACA,SAFD,MAGK;AACJ;AACA;AACA;AACAQ,UAAAA,KAAK,CAACR,IAAD,CAAL,GAAc,EAAd;AACA;AACD;AACD,KAdD,EAZyB,CA2BzB;;;AACA,SAAK,MAAMA,IAAX,IAAmBK,SAAnB,EAA8B;AAC7B,YAAMa,KAAK,GAAGb,SAAS,CAACL,IAAD,CAAvB;;AACA,UAAIkB,KAAK,IAAI,IAAb,EAAmB;AAClB,aAAKR,wBAAL,CAA8BG,GAA9B,CAAkCb,IAAlC;;AACA,YAAIA,IAAI,CAACgB,QAAL,CAAc,GAAd,CAAJ,EAAwB;AACvBR,UAAAA,KAAK,CAACW,WAAN,CAAkBnB,IAAlB,EAAwBkB,KAAxB;AACA,SAFD,MAGK;AACJ;AACAV,UAAAA,KAAK,CAACR,IAAD,CAAL,GAAckB,KAAd;AACA;AACD;AACD;;AACD,WAAO5B,QAAP;AACA;;AAxDwC;;AA2D1C,OAAO,MAAM8B,QAAQ,GAAG7B,SAAS,CAACG,iBAAD,CAA1B","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n/**\n * This is the original style-map.js directive from lit-html 2 with the only difference that \"render\" is not called even for the first rendering (update is used instead)\n */\n\nimport { noChange } from 'lit-html';\nimport { directive, Directive, PartType, } from 'lit-html/directive.js';\nclass StyleMapDirective extends Directive {\n\tconstructor(partInfo) {\n\t\tvar _a;\n\t\tsuper(partInfo);\n\t\tif (partInfo.type !== PartType.ATTRIBUTE ||\n\t\t\tpartInfo.name !== 'style' ||\n\t\t\t((_a = partInfo.strings) === null || _a === void 0 ? void 0 : _a.length) > 2) {\n\t\t\tthrow new Error('The `styleMap` directive must be used in the `style` attribute ' +\n\t\t\t\t'and must be the only part in the attribute.');\n\t\t}\n\t}\n\trender(styleInfo) {\n\t\treturn \"\";\n\t}\n\tupdate(part, [styleInfo]) {\n\t\tconst { style } = part.element;\n\t\tif (this._previousStyleProperties === undefined) {\n\t\t\tthis._previousStyleProperties = new Set();\n\t\t\tfor (const name in styleInfo) {\n\t\t\t\tthis._previousStyleProperties.add(name);\n\t\t\t}\n\t\t\t// return this.render(styleInfo);\n\t\t}\n\t\t// Remove old properties that no longer exist in styleInfo\n\t\t// We use forEach() instead of for-of so that re don't require down-level\n\t\t// iteration.\n\t\tthis._previousStyleProperties.forEach((name) => {\n\t\t\t// If the name isn't in styleInfo or it's null/undefined\n\t\t\tif (styleInfo[name] == null) {\n\t\t\t\tthis._previousStyleProperties.delete(name);\n\t\t\t\tif (name.includes('-')) {\n\t\t\t\t\tstyle.removeProperty(name);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Note reset using empty string (vs null) as IE11 does not always\n\t\t\t\t\t// reset via null (https://developer.mozilla.org/en-US/docs/Web/API/ElementCSSInlineStyle/style#setting_styles)\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tstyle[name] = '';\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// Add or update properties\n\t\tfor (const name in styleInfo) {\n\t\t\tconst value = styleInfo[name];\n\t\t\tif (value != null) {\n\t\t\t\tthis._previousStyleProperties.add(name);\n\t\t\t\tif (name.includes('-')) {\n\t\t\t\t\tstyle.setProperty(name, value);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\t\t\t\t\tstyle[name] = value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn noChange;\n\t}\n}\n\nexport const styleMap = directive(StyleMapDirective);\n"]},"metadata":{},"sourceType":"module"}