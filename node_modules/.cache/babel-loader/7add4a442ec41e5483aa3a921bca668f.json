{"ast":null,"code":"import { cssVariablesStyles } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport React, { useEffect } from 'react';\nimport { createUseStyles, ThemeProvider as ThemeProvider$1 } from 'react-jss';\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { GlobalStyleClasses } from '@ui5/webcomponents-react/dist/GlobalStyleClasses';\nvar GlobalStyleClassesStyles = {\n  '@global': _defineProperty({}, \".\".concat(GlobalStyleClasses.sapScrollBar, \":not([data-native-scrollbar])\"), {\n    '&::-webkit-scrollbar': {\n      backgroundColor: ThemingParameters.sapScrollBar_TrackColor,\n      '&:horizontal': {\n        height: ThemingParameters.sapScrollBar_Dimension\n      },\n      '&:vertical': {\n        width: ThemingParameters.sapScrollBar_Dimension\n      }\n    },\n    '&::-webkit-scrollbar-thumb': {\n      backgroundColor: ThemingParameters.sapScrollBar_FaceColor,\n      borderRadius: '0.25rem',\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapScrollBar_Hover_FaceColor\n      },\n      '&:horizontal': {\n        height: ThemingParameters.sapScrollBar_Dimension\n      },\n      '&:vertical': {\n        width: ThemingParameters.sapScrollBar_Dimension\n      }\n    },\n    '&::-webkit-scrollbar-corner': {\n      backgroundColor: ThemingParameters.sapScrollBar_TrackColor\n    }\n  })\n};\nvar useStyles = createUseStyles(GlobalStyleClassesStyles);\n\nvar cssVarsPonyfillNeeded = function cssVarsPonyfillNeeded() {\n  return !!window.CSSVarsPonyfill;\n}; // inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering\n\n\nif (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {\n  var variables = document.createElement('style');\n  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');\n  variables.innerHTML = cssVariablesStyles;\n  document.head.appendChild(variables);\n}\n\nvar ThemeProvider = function ThemeProvider(props) {\n  var children = props.children;\n  useStyles();\n  useEffect(function () {\n    if (cssVarsPonyfillNeeded()) {\n      window.CSSVarsPonyfill.cssVars({\n        rootElement: document.head,\n        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',\n        watch: true,\n        silent: true\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(ThemeProvider$1, {\n    theme: ThemingParameters\n  }, children);\n};\n\nThemeProvider.displayName = 'ThemeProvider';\nexport { ThemeProvider };","map":{"version":3,"sources":["../src/components/ThemeProvider/GlobalStyleClasses.jss.ts","../src/components/ThemeProvider/index.tsx"],"names":["GlobalStyleClassesStyles","GlobalStyleClasses","backgroundColor","ThemingParameters","height","sapScrollBar_Dimension","width","borderRadius","sapScrollBar_Hover_FaceColor","sapScrollBar_TrackColor","useStyles","createUseStyles","cssVarsPonyfillNeeded","window","document","variables","ThemeProvider","children","props","useEffect","rootElement","include","watch","silent"],"mappings":";;;;;;AAGO,IAAMA,wBAAwB,GAAG;AACtC,aAAA,eAAA,CAAA,EAAA,EAAA,IAAA,MAAA,CACOC,kBAAkB,CADzB,YAAA,EAAA,+BAAA,CAAA,EACwE;AACpE,4BAAwB;AACtBC,MAAAA,eAAe,EAAEC,iBAAiB,CADZ,uBAAA;AAEtB,sBAAgB;AACdC,QAAAA,MAAM,EAAED,iBAAiB,CAACE;AADZ,OAFM;AAKtB,oBAAc;AACZC,QAAAA,KAAK,EAAEH,iBAAiB,CAACE;AADb;AALQ,KAD4C;AAUpE,kCAA8B;AAC5BH,MAAAA,eAAe,EAAEC,iBAAiB,CADN,sBAAA;AAE5BI,MAAAA,YAAY,EAFgB,SAAA;AAG5B,iBAAW;AACTL,QAAAA,eAAe,EAAEC,iBAAiB,CAACK;AAD1B,OAHiB;AAM5B,sBAAgB;AACdJ,QAAAA,MAAM,EAAED,iBAAiB,CAACE;AADZ,OANY;AAS5B,oBAAc;AACZC,QAAAA,KAAK,EAAEH,iBAAiB,CAACE;AADb;AATc,KAVsC;AAuBpE,mCAA+B;AAC7BH,MAAAA,eAAe,EAAEC,iBAAiB,CAACM;AADN;AAvBqC,GADxE;AADsC,CAAjC;ACGP,IAAMC,SAAS,GAAGC,eAAe,CAAjC,wBAAiC,CAAjC;;AAEA,IAAMC,qBAAqB,GAAG,SAAxBA,qBAAwB,GAAA;AAAA,SAAM,CAAC,CAACC,MAAM,CAAd,eAAA;AAA9B,CAAA,C,CAMA;;;AACA,IAAI,CAACC,QAAQ,CAARA,aAAAA,CAAL,2CAAKA,CAAL,EAA0E;AACxE,MAAMC,SAAS,GAAGD,QAAQ,CAARA,aAAAA,CAAlB,OAAkBA,CAAlB;AACAC,EAAAA,SAAS,CAATA,YAAAA,CAAAA,oCAAAA,EAAAA,EAAAA;AACAA,EAAAA,SAAS,CAATA,SAAAA,GAAAA,kBAAAA;AACAD,EAAAA,QAAQ,CAARA,IAAAA,CAAAA,WAAAA,CAAAA,SAAAA;AACD;;IAEKE,aAAyC,GAAG,SAA5CA,aAA4C,CAAA,KAAA,EAAmC;AACnF,MAAQC,QAAR,GAAqBC,KAArB,CAAA,QAAA;AACAR,EAAAA,SAAS;AAETS,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIP,qBAAJ,EAAA,EAA6B;AAC3BC,MAAAA,MAAM,CAANA,eAAAA,CAAAA,OAAAA,CAA+B;AAC7BO,QAAAA,WAAW,EAAEN,QAAQ,CADQ,IAAA;AAE7BO,QAAAA,OAAO,EAFsB,2DAAA;AAG7BC,QAAAA,KAAK,EAHwB,IAAA;AAI7BC,QAAAA,MAAM,EAAE;AAJqB,OAA/BV;AAMD;AARM,GAAA,EAATM,EAAS,CAATA;AAWA,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,eAAA,EAAA;AAAuB,IAAA,KAAK,EAAEhB;AAA9B,GAAA,EAAP,QAAO,CAAP;AACD,C;;AAEDa,aAAa,CAAbA,WAAAA,GAAAA,eAAAA","sourcesContent":["import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { GlobalStyleClasses } from '@ui5/webcomponents-react/dist/GlobalStyleClasses';\n\nexport const GlobalStyleClassesStyles = {\n  '@global': {\n    [`.${GlobalStyleClasses.sapScrollBar}:not([data-native-scrollbar])`]: {\n      '&::-webkit-scrollbar': {\n        backgroundColor: ThemingParameters.sapScrollBar_TrackColor,\n        '&:horizontal': {\n          height: ThemingParameters.sapScrollBar_Dimension\n        },\n        '&:vertical': {\n          width: ThemingParameters.sapScrollBar_Dimension\n        }\n      },\n      '&::-webkit-scrollbar-thumb': {\n        backgroundColor: ThemingParameters.sapScrollBar_FaceColor,\n        borderRadius: '0.25rem',\n        '&:hover': {\n          backgroundColor: ThemingParameters.sapScrollBar_Hover_FaceColor\n        },\n        '&:horizontal': {\n          height: ThemingParameters.sapScrollBar_Dimension\n        },\n        '&:vertical': {\n          width: ThemingParameters.sapScrollBar_Dimension\n        }\n      },\n      '&::-webkit-scrollbar-corner': {\n        backgroundColor: ThemingParameters.sapScrollBar_TrackColor\n      }\n    }\n  }\n};\n","import { cssVariablesStyles } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport React, { FC, ReactNode, useEffect } from 'react';\nimport { createUseStyles, ThemeProvider as ReactJssThemeProvider } from 'react-jss';\nimport { GlobalStyleClassesStyles } from './GlobalStyleClasses.jss';\n\nconst useStyles = createUseStyles(GlobalStyleClassesStyles);\n\nconst cssVarsPonyfillNeeded = () => !!window.CSSVarsPonyfill;\n\nexport interface ThemeProviderPropTypes {\n  children: ReactNode;\n}\n\n// inject the size variables first before the ThemeProvider Component is mounted, otherwise there will be some flickering\nif (!document.querySelector('style[data-ui5-webcomponents-react-sizes]')) {\n  const variables = document.createElement('style');\n  variables.setAttribute('data-ui5-webcomponents-react-sizes', '');\n  variables.innerHTML = cssVariablesStyles;\n  document.head.appendChild(variables);\n}\n\nconst ThemeProvider: FC<ThemeProviderPropTypes> = (props: ThemeProviderPropTypes) => {\n  const { children } = props;\n  useStyles();\n\n  useEffect(() => {\n    if (cssVarsPonyfillNeeded()) {\n      window.CSSVarsPonyfill.cssVars({\n        rootElement: document.head,\n        include: 'style[data-ui5-webcomponents-react-sizes],style[data-jss]',\n        watch: true,\n        silent: true\n      });\n    }\n  }, []);\n\n  return <ReactJssThemeProvider theme={ThemingParameters}>{children}</ReactJssThemeProvider>;\n};\n\nThemeProvider.displayName = 'ThemeProvider';\n\nexport { ThemeProvider };\n"]},"metadata":{},"sourceType":"module"}