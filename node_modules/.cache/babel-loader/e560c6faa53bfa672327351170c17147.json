{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport { createUseStyles } from 'react-jss';\nimport React, { useEffect, forwardRef } from 'react';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport clsx from 'clsx';\n\nvar useDeprecationNoticeForTooltip = function useDeprecationNoticeForTooltip(component, tooltip) {\n  useEffect(function () {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n\nvar TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\nvar _excluded = [\"children\", \"renderWhitespace\", \"wrapping\", \"className\", \"style\", \"tooltip\", \"slot\"];\nvar useStyles = createUseStyles(TextStyles, {\n  name: 'Text'\n});\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\n\nvar Text = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      renderWhitespace = props.renderWhitespace,\n      wrapping = props.wrapping,\n      className = props.className,\n      style = props.style,\n      tooltip = props.tooltip,\n      slot = props.slot,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  useDeprecationNoticeForTooltip('Text', props.tooltip);\n  var classes = useStyles();\n  var classNameString = clsx(classes.text, wrapping === false && classes.noWrap, renderWhitespace && classes.renderWhitespace, className);\n  return /*#__PURE__*/React.createElement(\"span\", _extends({\n    ref: ref,\n    style: style,\n    className: classNameString,\n    title: tooltip,\n    slot: slot\n  }, rest), children);\n});\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\nText.displayName = 'Text';\nexport { Text };","map":{"version":3,"sources":["../src/internal/useDeprecationNotiveForTooltip.ts","../src/components/Text/Text.jss.ts","../src/components/Text/index.tsx"],"names":["useDeprecationNoticeForTooltip","useEffect","deprecationNotice","TextStyles","text","fontFamily","ThemingParameters","fontSize","fontWeight","color","display","boxSizing","whiteSpace","wordWrap","maxWidth","renderWhitespace","noWrap","textOverflow","overflow","useStyles","createUseStyles","name","Text","forwardRef","children","wrapping","className","style","tooltip","slot","rest","props","classes","classNameString","clsx"],"mappings":";;;;;;;;AAGO,IAAMA,8BAA8B,GAAG,SAAjCA,8BAAiC,CAAA,SAAA,EAAA,OAAA,EAAwB;AACpEC,EAAAA,SAAS,CAAC,YAAM;AACd,QAAA,OAAA,EAAa;AACXC,MAAAA,iBAAiB,CAAA,SAAA,EAAjBA,iFAAiB,CAAjBA;AACD;AAHM,GAAA,EAIN,CAJHD,OAIG,CAJM,CAATA;AADK,CAAA;;ACDA,IAAME,UAAU,GAAG;AACxB;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,UAAU,EAAEC,iBAAiB,CADzB,aAAA;AAEJC,IAAAA,QAAQ,EAAED,iBAAiB,CAFvB,WAAA;AAGJE,IAAAA,UAAU,EAHN,QAAA;AAIJC,IAAAA,KAAK,EAAEH,iBAAiB,CAJpB,YAAA;AAKJI,IAAAA,OAAO,EALH,cAAA;AAMJC,IAAAA,SAAS,EANL,YAAA;AAOJC,IAAAA,UAAU,EAPN,UAAA;AAQJC,IAAAA,QAAQ,EARJ,YAAA;AASJC,IAAAA,QAAQ,EAAE;AATN,GAFkB;AAaxBC,EAAAA,gBAAgB,EAAE;AAChBH,IAAAA,UAAU,EAAE;AADI,GAbM;AAgBxBI,EAAAA,MAAM,EAAE;AACNC,IAAAA,YAAY,EADN,UAAA;AAENL,IAAAA,UAAU,EAFJ,QAAA;AAGNC,IAAAA,QAAQ,EAHF,QAAA;AAINK,IAAAA,QAAQ,EAJF,QAAA;AAKN,0BAAsB;AACpBN,MAAAA,UAAU,EAAE;AADQ;AALhB;AAhBgB,CAAnB;;ACoBP,IAAMO,SAAS,GAAGC,eAAe,CAAA,UAAA,EAAa;AAAEC,EAAAA,IAAI,EAAE;AAAR,CAAb,CAAjC;AACA;AACA;AACA;AACA;;IACMC,IAAI,GAAA,aAAGC,UAAU,CAAC,UAAA,KAAA,EAAA,GAAA,EAAqD;AAC3E,MAAQC,QAAR,GAA2FO,KAA3F,CAAA,QAAA;AAAA,MAAkBhB,gBAAlB,GAA2FgB,KAA3F,CAAA,gBAAA;AAAA,MAAoCN,QAApC,GAA2FM,KAA3F,CAAA,QAAA;AAAA,MAA8CL,SAA9C,GAA2FK,KAA3F,CAAA,SAAA;AAAA,MAAyDJ,KAAzD,GAA2FI,KAA3F,CAAA,KAAA;AAAA,MAAgEH,OAAhE,GAA2FG,KAA3F,CAAA,OAAA;AAAA,MAAyEF,IAAzE,GAA2FE,KAA3F,CAAA,IAAA;AAAA,MAAkFD,IAAlF,GAAA,wBAAA,CAAA,KAAA,EAAA,SAAA,CAAA;;AAEA9B,EAAAA,8BAA8B,CAAA,MAAA,EAAS+B,KAAK,CAA5C/B,OAA8B,CAA9BA;AAEA,MAAMgC,OAAO,GAAGb,SAAhB,EAAA;AACA,MAAMc,eAAe,GAAGC,IAAI,CAC1BF,OAAO,CADmB,IAAA,EAE1BP,QAAQ,KAARA,KAAAA,IAAsBO,OAAO,CAFH,MAAA,EAG1BjB,gBAAgB,IAAIiB,OAAO,CAHD,gBAAA,EAA5B,SAA4B,CAA5B;AAOA,SAAA,aACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA,QAAA,CAAA;AAAM,IAAA,GAAG,EAAT,GAAA;AAAgB,IAAA,KAAK,EAArB,KAAA;AAA8B,IAAA,SAAS,EAAvC,eAAA;AAA0D,IAAA,KAAK,EAA/D,OAAA;AAA0E,IAAA,IAAI,EAAEH;AAAhF,GAAA,EAAA,IAAA,CAAA,EADF,QACE,CADF;AAbqB,CAAA,C;AAoBvBP,IAAI,CAAJA,YAAAA,GAAoB;AAClBP,EAAAA,gBAAgB,EADE,KAAA;AAElBU,EAAAA,QAAQ,EAAE;AAFQ,CAApBH;AAKAA,IAAI,CAAJA,WAAAA,GAAAA,MAAAA","sourcesContent":["import { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { useEffect } from 'react';\n\nexport const useDeprecationNoticeForTooltip = (component, tooltip) => {\n  useEffect(() => {\n    if (tooltip) {\n      deprecationNotice(component, '`tooltip` has been deprecated, please use the native `title` attribute instead.');\n    }\n  }, [tooltip]);\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\n\nexport const TextStyles = {\n  // Text Style\n  text: {\n    fontFamily: ThemingParameters.sapFontFamily,\n    fontSize: ThemingParameters.sapFontSize,\n    fontWeight: 'normal',\n    color: ThemingParameters.sapTextColor,\n    display: 'inline-block',\n    boxSizing: 'border-box',\n    whiteSpace: 'pre-line',\n    wordWrap: 'break-word',\n    maxWidth: '100%'\n  },\n  renderWhitespace: {\n    whiteSpace: 'pre-wrap'\n  },\n  noWrap: {\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    wordWrap: 'normal',\n    overflow: 'hidden',\n    '&$renderWhitespace': {\n      whiteSpace: 'pre'\n    }\n  }\n};\n","import { createUseStyles } from 'react-jss';\nimport React, { forwardRef, ReactNode, Ref } from 'react';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { useDeprecationNoticeForTooltip } from '../../internal/useDeprecationNotiveForTooltip';\nimport { TextStyles } from './Text.jss';\nimport clsx from 'clsx';\n\nexport interface TextPropTypes extends CommonProps {\n  /**\n   * Pass the text as direct child of Text\n   */\n  children: string | JSX.Element | ReactNode;\n  /**\n   * Defines how white-space inside <code>Text</code> is handled. If set to true, sequences of white space are preserved.\n   */\n  renderWhitespace?: boolean;\n  /**\n   * Defines whether the text wraps when there is not enough space.\n   */\n  wrapping?: boolean;\n}\n\nconst useStyles = createUseStyles(TextStyles, { name: 'Text' });\n/**\n * The `Text` component can be used for embedding text into your app. You can hyphenate the text with the use of the `wrapping` prop.\n * <br />__Note:__ Line breaks will always be visualized except when the wrapping property is set to false. In addition, tabs and whitespace can be preserved by setting the renderWhitespace property to true.\n */\nconst Text = forwardRef((props: TextPropTypes, ref: Ref<HTMLSpanElement>) => {\n  const { children, renderWhitespace, wrapping, className, style, tooltip, slot, ...rest } = props;\n\n  useDeprecationNoticeForTooltip('Text', props.tooltip);\n\n  const classes = useStyles();\n  const classNameString = clsx(\n    classes.text,\n    wrapping === false && classes.noWrap,\n    renderWhitespace && classes.renderWhitespace,\n    className\n  );\n\n  return (\n    <span ref={ref} style={style} className={classNameString} title={tooltip} slot={slot} {...rest}>\n      {children}\n    </span>\n  );\n});\n\nText.defaultProps = {\n  renderWhitespace: false,\n  wrapping: true\n};\n\nText.displayName = 'Text';\n\nexport { Text };\n"]},"metadata":{},"sourceType":"module"}