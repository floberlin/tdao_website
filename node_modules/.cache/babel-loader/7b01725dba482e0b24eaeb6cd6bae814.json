{"ast":null,"code":"import getSharedResource from \"../getSharedResource.js\";\nconst loaders = new Map();\nconst registry = getSharedResource(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource(\"SVGIcons.promises\", new Map());\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nconst DEFAULT_COLLECTION = \"SAP-icons\";\n/**\n * @deprecated\n */\n\nconst registerIconBundle = async (collectionName, bundleData) => {\n  throw new Error(\"This method has been removed. Use `registerIconLoader` instead.\");\n};\n\nconst registerIconLoader = async (collectionName, loader) => {\n  loaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async collectionName => {\n  if (!iconCollectionPromises.has(collectionName)) {\n    if (!loaders.has(collectionName)) {\n      throw new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n    }\n\n    const loadIcons = loaders.get(collectionName);\n    iconCollectionPromises.set(collectionName, loadIcons(collectionName));\n  }\n\n  return iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = bundleData => {\n  Object.keys(bundleData.data).forEach(iconName => {\n    const iconData = bundleData.data[iconName];\n    registerIcon(iconName, {\n      pathData: iconData.path,\n      ltr: iconData.ltr,\n      accData: iconData.acc,\n      collection: bundleData.collection,\n      packageName: bundleData.packageName\n    });\n  });\n}; // set\n\n\nconst registerIcon = (name, {\n  pathData,\n  ltr,\n  accData,\n  collection,\n  packageName\n} = {}) => {\n  // eslint-disable-line\n  if (!collection) {\n    collection = DEFAULT_COLLECTION;\n  }\n\n  const key = `${collection}/${name}`;\n  registry.set(key, {\n    pathData,\n    ltr,\n    accData,\n    packageName\n  });\n};\n\nconst _parseName = name => {\n  // silently support ui5-compatible URIs\n  if (name.startsWith(\"sap-icon://\")) {\n    name = name.replace(\"sap-icon://\", \"\");\n  }\n\n  let collection;\n  [name, collection] = name.split(\"/\").reverse();\n  collection = collection || DEFAULT_COLLECTION; // hardcoded alias in case icon explorer is used, resolve `SAP-icons-TNT` to `tnt`\n  // aliases can be made a feature in the future if more collections need it or more aliases are needed.\n\n  if (collection === \"SAP-icons-TNT\") {\n    collection = \"tnt\";\n  }\n\n  const registryKey = `${collection}/${name}`;\n  return {\n    name,\n    collection,\n    registryKey\n  };\n};\n\nconst getIconDataSync = nameProp => {\n  const {\n    registryKey\n  } = _parseName(nameProp);\n\n  return registry.get(registryKey);\n};\n\nconst getIconData = async nameProp => {\n  const {\n    collection,\n    registryKey\n  } = _parseName(nameProp);\n\n  let iconData = ICON_NOT_FOUND;\n\n  try {\n    iconData = await _loadIconCollectionOnce(collection);\n  } catch (e) {\n    console.error(e.message);\n    /* eslint-disable-line */\n  }\n\n  if (iconData === ICON_NOT_FOUND) {\n    return iconData;\n  }\n\n  if (!registry.has(registryKey)) {\n    // not filled by another await. many getters will await on the same loader, but fill only once\n    _fillRegistry(iconData);\n  }\n\n  return registry.get(registryKey);\n}; // test page usage only\n\n\nconst _getRegisteredNames = async () => {\n  // fetch one icon of each collection to trigger the bundle load\n  await getIconData(\"edit\");\n  await getIconData(\"tnt/arrow\");\n  return Array.from(registry.keys());\n};\n\nexport { registerIconBundle, registerIconLoader, getIconData, getIconDataSync, registerIcon, _getRegisteredNames };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/asset-registries/Icons.js"],"names":["getSharedResource","loaders","Map","registry","iconCollectionPromises","ICON_NOT_FOUND","DEFAULT_COLLECTION","registerIconBundle","collectionName","bundleData","Error","registerIconLoader","loader","set","_loadIconCollectionOnce","has","loadIcons","get","_fillRegistry","Object","keys","data","forEach","iconName","iconData","registerIcon","pathData","path","ltr","accData","acc","collection","packageName","name","key","_parseName","startsWith","replace","split","reverse","registryKey","getIconDataSync","nameProp","getIconData","e","console","error","message","_getRegisteredNames","Array","from"],"mappings":"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","sourcesContent":["import getSharedResource from \"../getSharedResource.js\";\n\nconst loaders = new Map();\nconst registry = getSharedResource(\"SVGIcons.registry\", new Map());\nconst iconCollectionPromises = getSharedResource(\"SVGIcons.promises\", new Map());\n\nconst ICON_NOT_FOUND = \"ICON_NOT_FOUND\";\nconst DEFAULT_COLLECTION = \"SAP-icons\";\n\n/**\n * @deprecated\n */\nconst registerIconBundle = async (collectionName, bundleData) => {\n\tthrow new Error(\"This method has been removed. Use `registerIconLoader` instead.\");\n};\n\nconst registerIconLoader = async (collectionName, loader) => {\n\tloaders.set(collectionName, loader);\n};\n\nconst _loadIconCollectionOnce = async collectionName => {\n\tif (!iconCollectionPromises.has(collectionName)) {\n\t\tif (!loaders.has(collectionName)) {\n\t\t\tthrow new Error(`No loader registered for the ${collectionName} icons collection. Probably you forgot to import the \"AllIcons.js\" module for the respective package.`);\n\t\t}\n\t\tconst loadIcons = loaders.get(collectionName);\n\t\ticonCollectionPromises.set(collectionName, loadIcons(collectionName));\n\t}\n\n\treturn iconCollectionPromises.get(collectionName);\n};\n\nconst _fillRegistry = bundleData => {\n\tObject.keys(bundleData.data).forEach(iconName => {\n\t\tconst iconData = bundleData.data[iconName];\n\n\t\tregisterIcon(iconName, {\n\t\t\tpathData: iconData.path,\n\t\t\tltr: iconData.ltr,\n\t\t\taccData: iconData.acc,\n\t\t\tcollection: bundleData.collection,\n\t\t\tpackageName: bundleData.packageName,\n\t\t });\n\t});\n};\n\n// set\nconst registerIcon = (name, { pathData, ltr, accData, collection, packageName } = {}) => { // eslint-disable-line\n\tif (!collection) {\n\t\tcollection = DEFAULT_COLLECTION;\n\t}\n\n\tconst key = `${collection}/${name}`;\n\tregistry.set(key, {\n\t\tpathData,\n\t\tltr,\n\t\taccData,\n\t\tpackageName,\n\t});\n};\n\nconst _parseName = name => {\n\t// silently support ui5-compatible URIs\n\tif (name.startsWith(\"sap-icon://\")) {\n\t\tname = name.replace(\"sap-icon://\", \"\");\n\t}\n\n\tlet collection;\n\t[name, collection] = name.split(\"/\").reverse();\n\tcollection = collection || DEFAULT_COLLECTION;\n\t// hardcoded alias in case icon explorer is used, resolve `SAP-icons-TNT` to `tnt`\n\t// aliases can be made a feature in the future if more collections need it or more aliases are needed.\n\tif (collection === \"SAP-icons-TNT\") {\n\t\tcollection = \"tnt\";\n\t}\n\tconst registryKey = `${collection}/${name}`;\n\treturn { name, collection, registryKey };\n};\n\nconst getIconDataSync = nameProp => {\n\tconst { registryKey } = _parseName(nameProp);\n\treturn registry.get(registryKey);\n};\n\nconst getIconData = async nameProp => {\n\tconst { collection, registryKey } = _parseName(nameProp);\n\n\tlet iconData = ICON_NOT_FOUND;\n\ttry {\n\t\ticonData = await _loadIconCollectionOnce(collection);\n\t} catch (e) {\n\t\tconsole.error(e.message); /* eslint-disable-line */\n\t}\n\n\tif (iconData === ICON_NOT_FOUND) {\n\t\treturn iconData;\n\t}\n\n\tif (!registry.has(registryKey)) {\n\t\t// not filled by another await. many getters will await on the same loader, but fill only once\n\t\t_fillRegistry(iconData);\n\t}\n\treturn registry.get(registryKey);\n};\n\n// test page usage only\nconst _getRegisteredNames = async () => {\n\t// fetch one icon of each collection to trigger the bundle load\n\tawait getIconData(\"edit\");\n\tawait getIconData(\"tnt/arrow\");\n\treturn Array.from(registry.keys());\n};\n\nexport {\n\tregisterIconBundle,\n\tregisterIconLoader,\n\tgetIconData,\n\tgetIconDataSync,\n\tregisterIcon,\n\t_getRegisteredNames,\n};\n"]},"metadata":{},"sourceType":"module"}