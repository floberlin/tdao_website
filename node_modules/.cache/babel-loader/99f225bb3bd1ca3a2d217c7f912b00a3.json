{"ast":null,"code":"import _objectSpread from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport VersionInfo from \"./generated/VersionInfo.js\";\nimport getSharedResource from \"./getSharedResource.js\";\nvar currentRuntimeIndex;\nvar currentRuntimeAlias = \"\";\nvar compareCache = new Map();\n/**\n * Central registry where all runtimes register themselves by pushing an object.\n * The index in the registry servers as an ID for the runtime.\n * @type {*}\n */\n\nvar Runtimes = getSharedResource(\"Runtimes\", []);\n/**\n * Registers the current runtime in the shared runtimes resource registry\n */\n\nvar registerCurrentRuntime = function registerCurrentRuntime() {\n  if (currentRuntimeIndex === undefined) {\n    currentRuntimeIndex = Runtimes.length;\n    Runtimes.push(_objectSpread(_objectSpread({}, VersionInfo), {}, {\n      alias: currentRuntimeAlias,\n      description: \"Runtime \".concat(currentRuntimeIndex, \" - ver \").concat(VersionInfo.version).concat(currentRuntimeAlias ? \" (\".concat(currentRuntimeAlias, \")\") : \"\")\n    }));\n  }\n};\n/**\n * Returns the index of the current runtime's object in the shared runtimes resource registry\n * @returns {*}\n */\n\n\nvar getCurrentRuntimeIndex = function getCurrentRuntimeIndex() {\n  return currentRuntimeIndex;\n};\n/**\n * Compares two runtimes and returns 1 if the first is of a bigger version, -1 if the second is of a bigger version, and 0 if equal\n * @param index1 The index of the first runtime to compare\n * @param index2 The index of the second runtime to compare\n * @returns {number}\n */\n\n\nvar compareRuntimes = function compareRuntimes(index1, index2) {\n  var cacheIndex = \"\".concat(index1, \",\").concat(index2);\n\n  if (compareCache.has(cacheIndex)) {\n    return compareCache.get(cacheIndex);\n  }\n\n  var runtime1 = Runtimes[index1];\n  var runtime2 = Runtimes[index2];\n\n  if (!runtime1 || !runtime2) {\n    throw new Error(\"Invalid runtime index supplied\");\n  } // If any of the two is a next version, bigger buildTime wins\n\n\n  if (runtime1.isNext || runtime2.isNext) {\n    return runtime1.buildTime - runtime2.buildTime;\n  } // If major versions differ, bigger one wins\n\n\n  var majorDiff = runtime1.major - runtime2.major;\n\n  if (majorDiff) {\n    return majorDiff;\n  } // If minor versions differ, bigger one wins\n\n\n  var minorDiff = runtime1.minor - runtime2.minor;\n\n  if (minorDiff) {\n    return minorDiff;\n  } // If patch versions differ, bigger one wins\n\n\n  var patchDiff = runtime1.patch - runtime2.patch;\n\n  if (patchDiff) {\n    return patchDiff;\n  } // Bigger suffix wins, f.e. rc10 > rc9\n  // Important: suffix is alphanumeric, must use natural compare\n\n\n  var collator = new Intl.Collator(undefined, {\n    numeric: true,\n    sensitivity: \"base\"\n  });\n  var result = collator.compare(runtime1.suffix, runtime2.suffix);\n  compareCache.set(cacheIndex, result);\n  return result;\n};\n/**\n * Set an alias for the the current app/library/microfrontend which will appear in debug messages and console warnings\n * @param alias\n */\n\n\nvar setRuntimeAlias = function setRuntimeAlias(alias) {\n  currentRuntimeAlias = alias;\n};\n\nvar getAllRuntimes = function getAllRuntimes() {\n  return Runtimes;\n};\n\nexport { getCurrentRuntimeIndex, registerCurrentRuntime, compareRuntimes, setRuntimeAlias, getAllRuntimes };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/Runtimes.js"],"names":["VersionInfo","getSharedResource","currentRuntimeIndex","currentRuntimeAlias","compareCache","Map","Runtimes","registerCurrentRuntime","undefined","length","push","alias","description","version","getCurrentRuntimeIndex","compareRuntimes","index1","index2","cacheIndex","has","get","runtime1","runtime2","Error","isNext","buildTime","majorDiff","major","minorDiff","minor","patchDiff","patch","collator","Intl","Collator","numeric","sensitivity","result","compare","suffix","set","setRuntimeAlias","getAllRuntimes"],"mappings":"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","sourcesContent":["import VersionInfo from \"./generated/VersionInfo.js\";\nimport getSharedResource from \"./getSharedResource.js\";\n\nlet currentRuntimeIndex;\nlet currentRuntimeAlias = \"\";\n\nconst compareCache = new Map();\n\n/**\n * Central registry where all runtimes register themselves by pushing an object.\n * The index in the registry servers as an ID for the runtime.\n * @type {*}\n */\nconst Runtimes = getSharedResource(\"Runtimes\", []);\n\n/**\n * Registers the current runtime in the shared runtimes resource registry\n */\nconst registerCurrentRuntime = () => {\n\tif (currentRuntimeIndex === undefined) {\n\t\tcurrentRuntimeIndex = Runtimes.length;\n\t\tRuntimes.push({\n\t\t\t...VersionInfo,\n\t\t\talias: currentRuntimeAlias,\n\t\t\tdescription: `Runtime ${currentRuntimeIndex} - ver ${VersionInfo.version}${currentRuntimeAlias ? ` (${currentRuntimeAlias})` : \"\"}`,\n\t\t});\n\t}\n};\n\n/**\n * Returns the index of the current runtime's object in the shared runtimes resource registry\n * @returns {*}\n */\nconst getCurrentRuntimeIndex = () => {\n\treturn currentRuntimeIndex;\n};\n\n/**\n * Compares two runtimes and returns 1 if the first is of a bigger version, -1 if the second is of a bigger version, and 0 if equal\n * @param index1 The index of the first runtime to compare\n * @param index2 The index of the second runtime to compare\n * @returns {number}\n */\nconst compareRuntimes = (index1, index2) => {\n\tconst cacheIndex = `${index1},${index2}`;\n\tif (compareCache.has(cacheIndex)) {\n\t\treturn compareCache.get(cacheIndex);\n\t}\n\n\tconst runtime1 = Runtimes[index1];\n\tconst runtime2 = Runtimes[index2];\n\n\tif (!runtime1 || !runtime2) {\n\t\tthrow new Error(\"Invalid runtime index supplied\");\n\t}\n\n\t// If any of the two is a next version, bigger buildTime wins\n\tif (runtime1.isNext || runtime2.isNext) {\n\t\treturn runtime1.buildTime - runtime2.buildTime;\n\t}\n\n\t// If major versions differ, bigger one wins\n\tconst majorDiff = runtime1.major - runtime2.major;\n\tif (majorDiff) {\n\t\treturn majorDiff;\n\t}\n\n\t// If minor versions differ, bigger one wins\n\tconst minorDiff = runtime1.minor - runtime2.minor;\n\tif (minorDiff) {\n\t\treturn minorDiff;\n\t}\n\n\t// If patch versions differ, bigger one wins\n\tconst patchDiff = runtime1.patch - runtime2.patch;\n\tif (patchDiff) {\n\t\treturn patchDiff;\n\t}\n\n\t// Bigger suffix wins, f.e. rc10 > rc9\n\t// Important: suffix is alphanumeric, must use natural compare\n\tconst collator = new Intl.Collator(undefined, { numeric: true, sensitivity: \"base\" });\n\tconst result = collator.compare(runtime1.suffix, runtime2.suffix);\n\n\tcompareCache.set(cacheIndex, result);\n\treturn result;\n};\n\n/**\n * Set an alias for the the current app/library/microfrontend which will appear in debug messages and console warnings\n * @param alias\n */\nconst setRuntimeAlias = alias => {\n\tcurrentRuntimeAlias = alias;\n};\n\nconst getAllRuntimes = () => {\n\treturn Runtimes;\n};\n\nexport {\n\tgetCurrentRuntimeIndex,\n\tregisterCurrentRuntime,\n\tcompareRuntimes,\n\tsetRuntimeAlias,\n\tgetAllRuntimes,\n};\n"]},"metadata":{},"sourceType":"module"}