{"ast":null,"code":"import _toConsumableArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\"; // Styles\n\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n/**\n * @public\n */\n\nvar metadata = {\n  tag: \"ui5-daterange-picker\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */\n  {\n    /**\n     * Determines the symbol which separates the dates.\n     * If not supplied, the default time interval delimiter for the current locale will be used.\n     *\n     * @type {string}\n     * @public\n     */\n    delimiter: {\n      type: String,\n      defaultValue: \"-\"\n    },\n\n    /**\n     * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n     * @private\n     */\n    _tempValue: {\n      type: String\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\n\nvar DateRangePicker = /*#__PURE__*/function (_DatePicker) {\n  _inherits(DateRangePicker, _DatePicker);\n\n  var _super = _createSuper(DateRangePicker);\n\n  function DateRangePicker() {\n    _classCallCheck(this, DateRangePicker);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(DateRangePicker, [{\n    key: \"_startDateTimestamp\",\n    get: function get() {\n      return this._extractFirstTimestamp(this.value);\n    }\n  }, {\n    key: \"_endDateTimestamp\",\n    get: function get() {\n      return this._extractLastTimestamp(this.value);\n    }\n  }, {\n    key: \"_tempTimestamp\",\n    get: function get() {\n      return this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n    }\n    /**\n     * Required by DatePicker.js\n     * @override\n     */\n\n  }, {\n    key: \"_calendarSelectionMode\",\n    get: function get() {\n      return \"Range\";\n    }\n    /**\n     * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n     * @override\n     */\n\n  }, {\n    key: \"_calendarTimestamp\",\n    get: function get() {\n      return this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n    }\n    /**\n     * Required by DatePicker.js\n     * @override\n     */\n\n  }, {\n    key: \"_calendarSelectedDates\",\n    get: function get() {\n      if (this._tempValue) {\n        return [this._tempValue];\n      }\n\n      if (this.value && this._checkValueValidity(this.value)) {\n        return this._splitValueByDelimiter(this.value);\n      }\n\n      return [];\n    }\n    /**\n     * Returns the start date of the currently selected range as JavaScript Date instance.\n     *\n     * @readonly\n     * @type { Date }\n     * @public\n     */\n\n  }, {\n    key: \"startDateValue\",\n    get: function get() {\n      return CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n    }\n    /**\n     * Returns the end date of the currently selected range as JavaScript Date instance.\n     *\n     * @readonly\n     * @type { Date }\n     * @public\n     */\n\n  }, {\n    key: \"endDateValue\",\n    get: function get() {\n      return CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_placeholder\",\n    get: function get() {\n      return this.placeholder !== undefined ? this.placeholder : \"\".concat(this._displayFormat, \" \").concat(this._effectiveDelimiter, \" \").concat(this._displayFormat);\n    }\n  }, {\n    key: \"dateAriaDescription\",\n    get: function get() {\n      return DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_onInputSubmit\",\n    value: function () {\n      var _onInputSubmit2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(event) {\n        var input, caretPos;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                input = this._getInput();\n                caretPos = input.getCaretPosition();\n                _context.next = 4;\n                return renderFinished();\n\n              case 4:\n                input.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n\n              case 5:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function _onInputSubmit(_x) {\n        return _onInputSubmit2.apply(this, arguments);\n      }\n\n      return _onInputSubmit;\n    }()\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"onResponsivePopoverAfterClose\",\n    value: function onResponsivePopoverAfterClose() {\n      this._tempValue = \"\"; // reset _tempValue on popover close\n\n      _get(_getPrototypeOf(DateRangePicker.prototype), \"onResponsivePopoverAfterClose\", this).call(this);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"isValid\",\n    value: function isValid(value) {\n      var _this = this;\n\n      var parts = this._splitValueByDelimiter(value);\n\n      return parts.length <= 2 && parts.every(function (dateString) {\n        return _get(_getPrototypeOf(DateRangePicker.prototype), \"isValid\", _this).call(_this, dateString);\n      }); // must be at most 2 dates and each must be valid\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"isInValidRange\",\n    value: function isInValidRange(value) {\n      var _this2 = this;\n\n      return this._splitValueByDelimiter(value).every(function (dateString) {\n        return _get(_getPrototypeOf(DateRangePicker.prototype), \"isInValidRange\", _this2).call(_this2, dateString);\n      });\n    }\n    /**\n     * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n     * @override\n     */\n\n  }, {\n    key: \"normalizeValue\",\n    value: function normalizeValue(value) {\n      var firstDateTimestamp = this._extractFirstTimestamp(value);\n\n      var lastDateTimestamp = this._extractLastTimestamp(value);\n\n      if (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) {\n        // if both are timestamps (not undefined), flip if necessary\n        return this._buildValue(lastDateTimestamp, firstDateTimestamp);\n      }\n\n      return this._buildValue(firstDateTimestamp, lastDateTimestamp);\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"onSelectedDatesChange\",\n    value: function onSelectedDatesChange(event) {\n      event.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\n      var values = event.detail.values;\n\n      if (values.length === 0) {\n        return;\n      }\n\n      if (values.length === 1) {\n        // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n        this._tempValue = values[0];\n        return;\n      }\n\n      var newValue = this._buildValue.apply(this, _toConsumableArray(event.detail.dates)); // the value will be normalized so we don't need to order them here\n\n\n      this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n      this.closePicker();\n    }\n    /**\n     * @override\n     */\n\n  }, {\n    key: \"_modifyDateValue\",\n    value: function () {\n      var _modifyDateValue2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount, unit) {\n        var input, caretPos, newValue, startDateModified, newStartDateTimestamp, endDateModified, newEndDateTimestamp;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (this._endDateTimestamp) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                return _context2.abrupt(\"return\", _get(_getPrototypeOf(DateRangePicker.prototype), \"_modifyDateValue\", this).call(this, amount, unit));\n\n              case 2:\n                input = this._getInput();\n                caretPos = input.getCaretPosition();\n\n                if (caretPos <= this.value.indexOf(this._effectiveDelimiter)) {\n                  // The user is focusing the first date -> change it and keep the seoond date\n                  startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n                  newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\n                  if (newStartDateTimestamp > this._endDateTimestamp) {\n                    // dates flipped -> move the caret to the same position but on the last date\n                    caretPos += Math.ceil(this.value.length / 2);\n                  }\n\n                  newValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n                } else {\n                  endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n                  newEndDateTimestamp = endDateModified.valueOf() / 1000;\n                  newValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\n                  if (newEndDateTimestamp < this._startDateTimestamp) {\n                    // dates flipped -> move the caret to the same position but on the first date\n                    caretPos -= Math.ceil(this.value.length / 2);\n                  }\n                }\n\n                this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n                _context2.next = 8;\n                return renderFinished();\n\n              case 8:\n                input.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function _modifyDateValue(_x2, _x3) {\n        return _modifyDateValue2.apply(this, arguments);\n      }\n\n      return _modifyDateValue;\n    }()\n  }, {\n    key: \"_effectiveDelimiter\",\n    get: function get() {\n      return this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n    }\n  }, {\n    key: \"_splitValueByDelimiter\",\n    value: function _splitValueByDelimiter(value) {\n      var valuesArray = [];\n      var partsArray = value.split(this._effectiveDelimiter);\n      valuesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n      valuesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n      return valuesArray;\n    }\n    /**\n     * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n     * @private\n     */\n\n  }, {\n    key: \"_extractFirstTimestamp\",\n    value: function _extractFirstTimestamp(value) {\n      if (!value || !this._checkValueValidity(value)) {\n        return undefined;\n      }\n\n      var dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\n\n      return this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n    }\n    /**\n     * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n     * @private\n     */\n\n  }, {\n    key: \"_extractLastTimestamp\",\n    value: function _extractLastTimestamp(value) {\n      if (!value || !this._checkValueValidity(value)) {\n        return undefined;\n      }\n\n      var dateStrings = this._splitValueByDelimiter(value);\n\n      if (dateStrings[1]) {\n        return this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n      }\n\n      return undefined;\n    }\n    /**\n     * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n     * @private\n     */\n\n  }, {\n    key: \"_buildValue\",\n    value: function _buildValue(firstDateTimestamp, lastDateTimestamp) {\n      if (firstDateTimestamp) {\n        var firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n        if (!lastDateTimestamp) {\n          return firstDateString;\n        }\n\n        var lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\n        return \"\".concat(firstDateString, \" \").concat(this._effectiveDelimiter, \" \").concat(lastDateString);\n      }\n\n      return \"\";\n    }\n  }], [{\n    key: \"metadata\",\n    get: function get() {\n      return metadata;\n    }\n  }, {\n    key: \"styles\",\n    get: function get() {\n      return [DatePicker.styles, DateRangePickerCss];\n    }\n  }]);\n\n  return DateRangePicker;\n}(DatePicker);\n\nDateRangePicker.define();\nexport default DateRangePicker;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/DateRangePicker.js"],"names":["renderFinished","CalendarDate","modifyDateBy","getTodayUTCTimestamp","DATERANGE_DESCRIPTION","DateRangePickerCss","DatePicker","metadata","tag","properties","delimiter","type","String","defaultValue","_tempValue","DateRangePicker","_extractFirstTimestamp","value","_extractLastTimestamp","getFormat","parse","getTime","_tempTimestamp","_startDateTimestamp","_primaryCalendarType","_checkValueValidity","_splitValueByDelimiter","fromTimestamp","toLocalJSDate","_endDateTimestamp","placeholder","undefined","_displayFormat","_effectiveDelimiter","i18nBundle","getText","event","input","_getInput","caretPos","getCaretPosition","setCaretPosition","parts","length","every","dateString","firstDateTimestamp","lastDateTimestamp","_buildValue","preventDefault","values","detail","newValue","dates","_updateValueAndFireEvents","closePicker","amount","unit","indexOf","startDateModified","_minDate","_maxDate","newStartDateTimestamp","valueOf","Math","ceil","endDateModified","newEndDateTimestamp","constructor","getMetadata","getProperties","valuesArray","partsArray","split","slice","join","dateStrings","firstDateString","_getStringFromTimestamp","lastDateString","styles","define"],"mappings":"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","sourcesContent":["import { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-daterange-picker\",\n\tproperties: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {\n\t\t/**\n\t\t * Determines the symbol which separates the dates.\n\t\t * If not supplied, the default time interval delimiter for the current locale will be used.\n\t\t *\n\t\t * @type {string}\n\t\t * @public\n\t\t */\n\t\tdelimiter: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: \"-\",\n\t\t},\n\n\t\t/**\n\t\t * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n\t\t * @private\n\t\t */\n\t\t_tempValue: {\n\t\t\ttype: String,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\nclass DateRangePicker extends DatePicker {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get styles() {\n\t\treturn [DatePicker.styles, DateRangePickerCss];\n\t}\n\n\tget _startDateTimestamp() {\n\t\treturn this._extractFirstTimestamp(this.value);\n\t}\n\n\tget _endDateTimestamp() {\n\t\treturn this._extractLastTimestamp(this.value);\n\t}\n\n\tget _tempTimestamp() {\n\t\treturn this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectionMode() {\n\t\treturn \"Range\";\n\t}\n\n\t/**\n\t * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n\t * @override\n\t */\n\tget _calendarTimestamp() {\n\t\treturn this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectedDates() {\n\t\tif (this._tempValue) {\n\t\t\treturn [this._tempValue];\n\t\t}\n\t\tif (this.value && this._checkValueValidity(this.value)) {\n\t\t\treturn this._splitValueByDelimiter(this.value);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns the start date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget startDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * Returns the end date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget endDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget _placeholder() {\n\t\treturn this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n\t}\n\n\tget dateAriaDescription() {\n\t\treturn DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _onInputSubmit(event) {\n\t\tconst input = this._getInput();\n\t\tconst caretPos = input.getCaretPosition();\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n\t}\n\n\t/**\n\t * @override\n\t */\n\t onResponsivePopoverAfterClose() {\n\t\tthis._tempValue = \"\"; // reset _tempValue on popover close\n\t\tsuper.onResponsivePopoverAfterClose();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisValid(value) {\n\t\tconst parts = this._splitValueByDelimiter(value);\n\t\treturn parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisInValidRange(value) {\n\t\treturn this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n\t}\n\n\t/**\n\t * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n\t * @override\n\t */\n\tnormalizeValue(value) {\n\t\tconst firstDateTimestamp = this._extractFirstTimestamp(value);\n\t\tconst lastDateTimestamp = this._extractLastTimestamp(value);\n\t\tif (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) { // if both are timestamps (not undefined), flip if necessary\n\t\t\treturn this._buildValue(lastDateTimestamp, firstDateTimestamp);\n\t\t}\n\t\treturn this._buildValue(firstDateTimestamp, lastDateTimestamp);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tonSelectedDatesChange(event) {\n\t\tevent.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\t\tconst values = event.detail.values;\n\n\t\tif (values.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (values.length === 1) { // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n\t\t\tthis._tempValue = values[0];\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this._buildValue(...event.detail.dates); // the value will be normalized so we don't need to order them here\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _modifyDateValue(amount, unit) {\n\t\tif (!this._endDateTimestamp) { // If empty or only one date -> treat as datepicker entirely\n\t\t\treturn super._modifyDateValue(amount, unit);\n\t\t}\n\n\t\tconst input = this._getInput();\n\t\tlet caretPos = input.getCaretPosition();\n\t\tlet newValue;\n\n\t\tif (caretPos <= this.value.indexOf(this._effectiveDelimiter)) { // The user is focusing the first date -> change it and keep the seoond date\n\t\t\tconst startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\t\t\tif (newStartDateTimestamp > this._endDateTimestamp) { // dates flipped -> move the caret to the same position but on the last date\n\t\t\t\tcaretPos += Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t\tnewValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t} else {\n\t\t\tconst endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newEndDateTimestamp = endDateModified.valueOf() / 1000;\n\t\t\tnewValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t\tif (newEndDateTimestamp < this._startDateTimestamp) { // dates flipped -> move the caret to the same position but on the first date\n\t\t\t\tcaretPos -= Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t}\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n\t}\n\n\tget _effectiveDelimiter() {\n\t\treturn this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n\t}\n\n\t_splitValueByDelimiter(value) {\n\t\tconst valuesArray = [];\n\t\tconst partsArray = value.split(this._effectiveDelimiter);\n\n\t\tvaluesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n\t\tvaluesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n\n\t\treturn valuesArray;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n\t * @private\n\t */\n\t_extractFirstTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\t\treturn this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n\t * @private\n\t */\n\t_extractLastTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value);\n\t\tif (dateStrings[1]) {\n\t\t\treturn this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n\t * @private\n\t */\n\t_buildValue(firstDateTimestamp, lastDateTimestamp) {\n\t\tif (firstDateTimestamp) {\n\t\t\tconst firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n\t\t\tif (!lastDateTimestamp) {\n\t\t\t\treturn firstDateString;\n\t\t\t}\n\n\t\t\tconst lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\t\t\treturn `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n\t\t}\n\n\t\treturn \"\";\n\t}\n}\n\nDateRangePicker.define();\n\nexport default DateRangePicker;\n"]},"metadata":{},"sourceType":"module"}