{"ast":null,"code":"/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/*namespace com.google.zxing.common.detector {*/\n\n/**\n * General math-related and numeric utility functions.\n */\nvar MathUtils = function () {\n  function MathUtils() {}\n  /**\n   * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n   * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n   * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n   * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n   *\n   * @param d real value to round\n   * @return nearest {@code int}\n   */\n\n\n  MathUtils.round = function (d\n  /*float*/\n  ) {\n    if (NaN === d) return 0;\n    if (d <= Number.MIN_SAFE_INTEGER) return Number.MIN_SAFE_INTEGER;\n    if (d >= Number.MAX_SAFE_INTEGER) return Number.MAX_SAFE_INTEGER;\n    return (\n      /*(int) */\n      d + (d < 0.0 ? -0.5 : 0.5) | 0\n    );\n  }; // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n\n\n  MathUtils.distance = function (aX\n  /*float|int*/\n  , aY\n  /*float|int*/\n  , bX\n  /*float|int*/\n  , bY\n  /*float|int*/\n  ) {\n    var xDiff = aX - bX;\n    var yDiff = aY - bY;\n    return (\n      /*(float) */\n      Math.sqrt(xDiff * xDiff + yDiff * yDiff)\n    );\n  };\n  /**\n   * @param aX point A x coordinate\n   * @param aY point A y coordinate\n   * @param bX point B x coordinate\n   * @param bY point B y coordinate\n   * @return Euclidean distance between points A and B\n   */\n  // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n  //   const xDiff = aX - bX\n  //   const yDiff = aY - bY\n  //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n  // }\n\n  /**\n   * @param array values to sum\n   * @return sum of values in array\n   */\n\n\n  MathUtils.sum = function (array) {\n    var count = 0;\n\n    for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n      var a = array[i];\n      count += a;\n    }\n\n    return count;\n  };\n\n  return MathUtils;\n}();\n\nexport default MathUtils;","map":{"version":3,"sources":["../../../../../src/core/common/detector/MathUtils.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;AAcG;;AAEH;;AAEA;;AAEG;AACH,IAAA,SAAA,GAAA,YAAA;AAEE,WAAA,SAAA,GAAA,CAAyB;AAEzB;;;;;;;;AAQG;;;AACW,EAAA,SAAA,CAAA,KAAA,GAAd,UAAoB;AAAS;AAA7B,IAAsC;AACpC,QAAI,GAAG,KAAK,CAAZ,EAAe,OAAO,CAAP;AACf,QAAI,CAAC,IAAI,MAAM,CAAC,gBAAhB,EAAkC,OAAO,MAAM,CAAC,gBAAd;AAClC,QAAI,CAAC,IAAI,MAAM,CAAC,gBAAhB,EAAkC,OAAO,MAAM,CAAC,gBAAd;AAClC;AAAO;AAAW,MAAA,CAAC,IAAI,CAAC,GAAG,GAAJ,GAAU,CAAC,GAAX,GAAiB,GAArB,CAAF,GAA+B;AAAhD;AACD,GALa,CAbhB,CAmBE;;AAEA;;;;;;AAMG;;;AACW,EAAA,SAAA,CAAA,QAAA,GAAd,UAAuB;AAAU;AAAjC,IAAgD;AAAU;AAA1D,IAAyE;AAAU;AAAnF,IAAkG;AAAU;AAA5G,IAAyH;AACvH,QAAM,KAAK,GAAG,EAAE,GAAG,EAAnB;AACA,QAAM,KAAK,GAAG,EAAE,GAAG,EAAnB;AACA;AAAO;AAAY,MAAA,IAAI,CAAC,IAAL,CAAU,KAAK,GAAG,KAAR,GAAgB,KAAK,GAAG,KAAlC;AAAnB;AACD,GAJa;AAMd;;;;;;AAMG;AACH;AACA;AACA;AACA;AACA;;AAEA;;;AAGG;;;AACW,EAAA,SAAA,CAAA,GAAA,GAAd,UAAkB,KAAlB,EAAmC;AACjC,QAAI,KAAK,GAAG,CAAZ;;AACA,SAAK,IAAI,CAAC,GAAG,CAAR,EAAW,QAAM,GAAG,KAAK,CAAC,MAA/B,EAAuC,CAAC,KAAK,QAA7C,EAAqD,CAAC,EAAtD,EAA0D;AACxD,UAAM,CAAC,GAAG,KAAK,CAAC,CAAD,CAAf;AACA,MAAA,KAAK,IAAI,CAAT;AACD;;AACD,WAAO,KAAP;AACD,GAPa;;AAShB,SAAA,SAAA;AAAC,CA5DD,EAAA","sourceRoot":"","sourcesContent":["/*\n * Copyright 2012 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/*namespace com.google.zxing.common.detector {*/\n/**\n * General math-related and numeric utility functions.\n */\nvar MathUtils = /** @class */ (function () {\n    function MathUtils() {\n    }\n    /**\n     * Ends up being a bit faster than {@link Math#round(float)}. This merely rounds its\n     * argument to the nearest int, where x.5 rounds up to x+1. Semantics of this shortcut\n     * differ slightly from {@link Math#round(float)} in that half rounds down for negative\n     * values. -2.5 rounds to -3, not -2. For purposes here it makes no difference.\n     *\n     * @param d real value to round\n     * @return nearest {@code int}\n     */\n    MathUtils.round = function (d /*float*/) {\n        if (NaN === d)\n            return 0;\n        if (d <= Number.MIN_SAFE_INTEGER)\n            return Number.MIN_SAFE_INTEGER;\n        if (d >= Number.MAX_SAFE_INTEGER)\n            return Number.MAX_SAFE_INTEGER;\n        return /*(int) */ (d + (d < 0.0 ? -0.5 : 0.5)) | 0;\n    };\n    // TYPESCRIPTPORT: maybe remove round method and call directly Math.round, it looks like it doesn't make sense for js\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    MathUtils.distance = function (aX /*float|int*/, aY /*float|int*/, bX /*float|int*/, bY /*float|int*/) {\n        var xDiff = aX - bX;\n        var yDiff = aY - bY;\n        return /*(float) */ Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    };\n    /**\n     * @param aX point A x coordinate\n     * @param aY point A y coordinate\n     * @param bX point B x coordinate\n     * @param bY point B y coordinate\n     * @return Euclidean distance between points A and B\n     */\n    // public static distance(aX: number /*int*/, aY: number /*int*/, bX: number /*int*/, bY: number /*int*/): float {\n    //   const xDiff = aX - bX\n    //   const yDiff = aY - bY\n    //   return (float) Math.sqrt(xDiff * xDiff + yDiff * yDiff);\n    // }\n    /**\n     * @param array values to sum\n     * @return sum of values in array\n     */\n    MathUtils.sum = function (array) {\n        var count = 0;\n        for (var i = 0, length_1 = array.length; i !== length_1; i++) {\n            var a = array[i];\n            count += a;\n        }\n        return count;\n    };\n    return MathUtils;\n}());\nexport default MathUtils;\n//# sourceMappingURL=MathUtils.js.map"]},"metadata":{},"sourceType":"module"}