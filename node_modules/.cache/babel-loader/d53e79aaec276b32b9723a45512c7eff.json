{"ast":null,"code":"import { useRef, useEffect, useMemo } from 'react';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\n\nvar useConsolidatedRef = function useConsolidatedRef(ref) {\n  var localRef = useRef(null);\n  useEffect(function () {\n    deprecationNotice('useConsolidatedRef', \"`useConsolidatedRef` is deprecated. Please use `useSyncRef` instead.\");\n  }, []);\n  var consolidatedRef = useMemo(function () {\n    if (!ref || typeof ref === 'function') {\n      return localRef;\n    }\n\n    return ref;\n  }, [ref]);\n  useEffect(function () {\n    if (typeof ref === 'function') {\n      ref(consolidatedRef.current);\n    }\n  }, [consolidatedRef.current]);\n  return consolidatedRef;\n};\n\nexport { useConsolidatedRef };","map":{"version":3,"sources":["../src/hooks/useConsolidatedRef.ts"],"names":["useConsolidatedRef","localRef","useRef","useEffect","deprecationNotice","consolidatedRef","useMemo","ref"],"mappings":";;;IAGaA,kBAAkB,GAAG,SAArBA,kBAAqB,CAAA,GAAA,EAAiC;AACjE,MAAMC,QAA6B,GAAGC,MAAM,CAA5C,IAA4C,CAA5C;AAEAC,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,iBAAiB,CAAA,oBAAA,EAAjBA,sEAAiB,CAAjBA;AADO,GAAA,EAATD,EAAS,CAATA;AAIA,MAAME,eAAoC,GAAGC,OAAO,CAAC,YAAM;AACzD,QAAI,CAAA,GAAA,IAAQ,OAAA,GAAA,KAAZ,UAAA,EAAuC;AACrC,aAAA,QAAA;AACD;;AACD,WAAA,GAAA;AAJkD,GAAA,EAKjD,CALH,GAKG,CALiD,CAApD;AAOAH,EAAAA,SAAS,CAAC,YAAM;AACd,QAAI,OAAA,GAAA,KAAJ,UAAA,EAA+B;AAC7BI,MAAAA,GAAG,CAACF,eAAe,CAAnBE,OAAG,CAAHA;AACD;AAHM,GAAA,EAIN,CAACF,eAAe,CAJnBF,OAIG,CAJM,CAATA;AAMA,SAAA,eAAA;AACD,C","sourcesContent":["import { MutableRefObject, useEffect, useMemo, useRef } from 'react';\nimport { deprecationNotice } from '@ui5/webcomponents-react-base/dist/Utils';\n\nexport const useConsolidatedRef = <T>(ref): MutableRefObject<T> => {\n  const localRef: MutableRefObject<T> = useRef(null);\n\n  useEffect(() => {\n    deprecationNotice('useConsolidatedRef', `\\`useConsolidatedRef\\` is deprecated. Please use \\`useSyncRef\\` instead.`);\n  }, []);\n\n  const consolidatedRef: MutableRefObject<T> = useMemo(() => {\n    if (!ref || typeof ref === 'function') {\n      return localRef;\n    }\n    return ref;\n  }, [ref]);\n\n  useEffect(() => {\n    if (typeof ref === 'function') {\n      ref(consolidatedRef.current);\n    }\n  }, [consolidatedRef.current]);\n\n  return consolidatedRef;\n};\n"]},"metadata":{},"sourceType":"module"}