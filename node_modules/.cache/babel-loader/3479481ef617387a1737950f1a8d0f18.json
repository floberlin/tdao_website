{"ast":null,"code":"import _toConsumableArray from '@babel/runtime/helpers/toConsumableArray';\nimport _extends from '@babel/runtime/helpers/extends';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport { CheckBox } from '@ui5/webcomponents-react/dist/CheckBox';\nimport { TableSelectionMode } from '@ui5/webcomponents-react/dist/TableSelectionMode';\nimport React, { useEffect } from 'react';\nimport { TableSelectionBehavior } from '@ui5/webcomponents-react/dist/TableSelectionBehavior';\nvar reOpenBracket = /\\[/g;\nvar reCloseBracket = /\\]/g;\n\nfunction makePathArray(obj) {\n  return flattenDeep(obj) // remove all periods in parts\n  .map(function (d) {\n    return String(d).replace('.', '_');\n  }) // join parts using period\n  .join('.') // replace brackets with periods\n  .replace(reOpenBracket, '.').replace(reCloseBracket, '') // split it back out on periods\n  .split('.');\n}\n\nfunction flattenDeep(arr) {\n  var newArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (var i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n\n  return newArr;\n} // copied from https://github.com/tannerlinsley/react-table/blob/master/src/utils.js#L169-L191 (13.Jan 2021)\n\n\nvar pathObjCache = new Map();\n\nfunction getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n\n  var cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n  var pathObj = pathObjCache.get(cacheKey) || function () {\n    var pathObj = makePathArray(path);\n    pathObjCache.set(cacheKey, pathObj);\n    return pathObj;\n  }();\n\n  var val;\n\n  try {\n    val = pathObj.reduce(function (cursor, pathPart) {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {// continue regardless of error\n  }\n\n  return typeof val !== 'undefined' ? val : def;\n}\n\nvar customCheckBoxStyling = {\n  verticalAlign: 'middle'\n};\n\nvar headerProps = function headerProps(props, _ref) {\n  var selectionMode = _ref.instance.webComponentsReactProperties.selectionMode;\n\n  if (props.key === 'header___ui5wcr__internal_selection_column' && selectionMode === TableSelectionMode.MultiSelect) {\n    return [props, {\n      onClick: undefined,\n      onKeyDown: undefined\n    }];\n  }\n\n  return props;\n};\n\nvar columns = function columns(_columns) {\n  return _columns.map(function (column) {\n    if (column.id === '__ui5wcr__internal_selection_column') {\n      return _objectSpread(_objectSpread({}, column), {}, {\n        Cell: function Cell(instance) {\n          var webComponentsReactProperties = instance.webComponentsReactProperties,\n              row = instance.row;\n\n          if (row.disableSelect === true) {\n            if (row.isGrouped && webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {\n              return null;\n            }\n\n            if (webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {\n              return /*#__PURE__*/React.createElement(\"div\", {\n                onClick: undefined,\n                \"data-name\": \"internal_selection_column\"\n              });\n            }\n\n            return /*#__PURE__*/React.createElement(CheckBox, _extends({}, row.getToggleRowSelectedProps(), {\n              disabled: true,\n              style: customCheckBoxStyling,\n              \"data-name\": \"internal_selection_column\",\n              tabIndex: -1\n            }));\n          }\n\n          return column.Cell(instance);\n        },\n        Header: function Header() {\n          return null;\n        }\n      });\n    }\n\n    return column;\n  });\n};\n/**\n * A plugin hook for disabling row selection of specific rows.\n * __Note:__ The \"Select All\" checkbox is not available with this hook.\n *\n * @param disableRowSelection - Can be either a `string` or a `function`. `string:` Defines the key in the dataset for disabling rows. If the value of the key is `true`, then the row will not be selectable. `function:` Programmatically disable rows for selection. The function receives the current row as parameter.\n */\n\n\nvar useRowDisableSelection = function useRowDisableSelection(disableRowSelection) {\n  var disableRowAccessor = typeof disableRowSelection === 'function' ? disableRowSelection : function (d) {\n    return getBy(d.original, disableRowSelection, undefined);\n  };\n\n  var getRowProps = function getRowProps(rowProps, _ref2) {\n    var row = _ref2.row,\n        instance = _ref2.instance;\n    var webComponentsReactProperties = instance.webComponentsReactProperties;\n\n    if (disableRowAccessor(row) === true) {\n      row.disableSelect = true;\n      return _objectSpread(_objectSpread({}, rowProps), {}, {\n        onClick: undefined,\n        className: webComponentsReactProperties.classes.tr\n      });\n    }\n\n    return rowProps;\n  };\n\n  var columnDeps = function columnDeps(deps) {\n    return [].concat(_toConsumableArray(deps), [disableRowSelection]);\n  };\n\n  var useDisableSelectionRow = function useDisableSelectionRow(hooks) {\n    hooks.getHeaderProps.push(headerProps);\n    hooks.getRowProps.push(getRowProps);\n    hooks.columns.push(columns);\n    hooks.columnsDeps.push(columnDeps);\n  };\n\n  useDisableSelectionRow.pluginName = 'useRowDisableSelection';\n  return useDisableSelectionRow;\n};\n\nvar getParentIndicesRecursive = function getParentIndicesRecursive(rowId) {\n  var parentIndices = {};\n\n  var getParentIndices = function getParentIndices(internalRowId) {\n    var lastDotIndex = internalRowId.lastIndexOf('.');\n\n    if (~lastDotIndex) {\n      var parentRowId = internalRowId.slice(0, lastDotIndex);\n\n      if (!parentIndices[parentRowId]) {\n        parentIndices[parentRowId] = true;\n        getParentIndices(parentRowId);\n      }\n    }\n  };\n\n  getParentIndices(rowId);\n  return parentIndices;\n};\n/**\n * A plugin hook that marks parent rows as indeterminate if a child row is selected in `MultiSelect` mode.\n * When using this hook, it is recommended to also select all sub-rows when selecting a row. (`reactTableOptions={{ selectSubRows: true }}`)\n */\n\n\nvar useIndeterminateRowSelection = function useIndeterminateRowSelection() {\n  var toggleRowProps = function toggleRowProps(rowProps, _ref) {\n    var row = _ref.row,\n        instance = _ref.instance;\n    var indeterminate;\n\n    if (instance.isAllRowsSelected) {\n      indeterminate = false;\n    } else {\n      var _instance$state$indet, _instance$state, _instance$state$indet2;\n\n      indeterminate = (_instance$state$indet = instance === null || instance === void 0 ? void 0 : (_instance$state = instance.state) === null || _instance$state === void 0 ? void 0 : (_instance$state$indet2 = _instance$state.indeterminateRows) === null || _instance$state$indet2 === void 0 ? void 0 : _instance$state$indet2[row.id]) !== null && _instance$state$indet !== void 0 ? _instance$state$indet : false;\n    }\n\n    return [rowProps, {\n      indeterminate: indeterminate,\n      checked: indeterminate ? true : rowProps.checked\n    }];\n  };\n\n  var stateReducer = function stateReducer(newState, action, prevState, instance) {\n    if (action.type === 'INDETERMINATE_ROW_IDS') {\n      var _instance$flatRows;\n\n      var indeterminateRows = {};\n      var allSelectedRows = {};\n      var allSelected = true;\n      var currentDepth = -1;\n      (_instance$flatRows = instance.flatRows) === null || _instance$flatRows === void 0 ? void 0 : _instance$flatRows.filter(function (item) {\n        return !item.original.emptyRow;\n      }).sort(function (a, b) {\n        return b.id.localeCompare(a.id);\n      }).map(function (item) {\n        if (currentDepth === -1) {\n          currentDepth = item.depth;\n        } else if (currentDepth !== item.depth) {\n          currentDepth = item.depth;\n\n          if (allSelected && newState.selectedRowIds[item.id]) {\n            allSelectedRows[item.id] = true;\n            delete indeterminateRows[item.id];\n          }\n\n          allSelected = true;\n        }\n\n        if (newState.selectedRowIds[item.id]) {\n          var parentRowId = item.id.slice(0, item.id.lastIndexOf('.'));\n\n          if (parentRowId) {\n            indeterminateRows = _objectSpread(_objectSpread({}, indeterminateRows), getParentIndicesRecursive(item.id));\n          }\n        } else {\n          allSelected = false;\n        }\n\n        return item;\n      });\n      return _objectSpread(_objectSpread({}, newState), {}, {\n        indeterminateRows: indeterminateRows\n      });\n    }\n  };\n\n  var useInstanceAfterData = function useInstanceAfterData(instance) {\n    var data = instance.data,\n        dispatch = instance.dispatch,\n        selectedRowIds = instance.state.selectedRowIds,\n        _instance$webComponen = instance.webComponentsReactProperties,\n        selectionMode = _instance$webComponen.selectionMode,\n        selectionBehavior = _instance$webComponen.selectionBehavior,\n        isTreeTable = _instance$webComponen.isTreeTable;\n    useEffect(function () {\n      if (isTreeTable && selectionMode === TableSelectionMode.MultiSelect && selectionBehavior !== TableSelectionBehavior.RowOnly) {\n        dispatch({\n          type: 'INDETERMINATE_ROW_IDS'\n        });\n      }\n    }, [data, selectedRowIds, isTreeTable, selectionMode, selectionBehavior]);\n  };\n\n  var useIndeterminate = function useIndeterminate(hooks) {\n    hooks.getToggleRowSelectedProps.push(toggleRowProps);\n    hooks.stateReducers.push(stateReducer);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n  };\n\n  useIndeterminate.pluginName = 'useIndeterminate';\n  return useIndeterminate;\n};\n\nexport { useIndeterminateRowSelection, useRowDisableSelection };","map":{"version":3,"sources":["../src/components/AnalyticalTable/util/index.ts","../src/components/AnalyticalTable/pluginHooks/useRowDisableSelection.tsx","../src/components/AnalyticalTable/pluginHooks/useIndeterminateRowSelection.tsx"],"names":["reOpenBracket","reCloseBracket","String","newArr","Array","i","arr","flattenDeep","pathObjCache","cacheKey","JSON","pathObj","makePathArray","val","cursor","customCheckBoxStyling","verticalAlign","headerProps","instance","webComponentsReactProperties","selectionMode","props","TableSelectionMode","onClick","onKeyDown","undefined","columns","column","Cell","row","Header","useRowDisableSelection","disableRowAccessor","getBy","d","getRowProps","className","tr","columnDeps","useDisableSelectionRow","hooks","getParentIndicesRecursive","parentIndices","getParentIndices","lastDotIndex","internalRowId","parentRowId","useIndeterminateRowSelection","toggleRowProps","indeterminate","checked","rowProps","stateReducer","action","indeterminateRows","allSelectedRows","allSelected","currentDepth","item","b","a","newState","useInstanceAfterData","data","dispatch","selectedRowIds","selectionBehavior","isTreeTable","useEffect","TableSelectionBehavior","type","useIndeterminate"],"mappings":"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","sourcesContent":["import { defaultOrderByFn } from 'react-table';\n\nexport const orderByFn = (rows, functions, directions) => {\n  const wrapSortFn = (sortFn, index) => {\n    const desc = directions[index] === false || directions[index] === 'desc';\n\n    return (rowA, rowB) => {\n      if (rowA.original?.emptyRow && !rowB.original?.emptyRow) {\n        return desc ? -1 : 1;\n      }\n      if (!rowA.original?.emptyRow && rowB.original?.emptyRow) {\n        return desc ? 1 : -1;\n      }\n      if (rowA.original?.emptyRow && rowB.original?.emptyRow) {\n        return 0;\n      }\n      return sortFn(rowA, rowB);\n    };\n  };\n\n  const wrappedSortfunctions = functions.map(wrapSortFn);\n\n  return defaultOrderByFn(rows, wrappedSortfunctions, directions);\n};\n\n// copied from https://github.com/tannerlinsley/react-table/blob/f97fb98509d0b27cc0bebcf3137872afe4f2809e/src/utils.js#L320-L347 (13. Jan 2021)\nconst reOpenBracket = /\\[/g;\nconst reCloseBracket = /\\]/g;\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map((d) => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(reOpenBracket, '.')\n      .replace(reCloseBracket, '')\n      // split it back out on periods\n      .split('.')\n  );\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr);\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr);\n    }\n  }\n  return newArr;\n}\n\n// copied from https://github.com/tannerlinsley/react-table/blob/master/src/utils.js#L169-L191 (13.Jan 2021)\nconst pathObjCache = new Map();\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj;\n  }\n  const cacheKey = typeof path === 'function' ? path : JSON.stringify(path);\n\n  const pathObj =\n    pathObjCache.get(cacheKey) ||\n    (() => {\n      const pathObj = makePathArray(path);\n      pathObjCache.set(cacheKey, pathObj);\n      return pathObj;\n    })();\n  let val;\n\n  try {\n    val = pathObj.reduce((cursor, pathPart) => {\n      return cursor[pathPart];\n    }, obj);\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def;\n}\n\nexport const tagNamesWhichShouldNotSelectARow = new Set([\n  'UI5-AVATAR',\n  'UI5-BUTTON',\n  'UI5-CALENDAR',\n  'UI5-CHECKBOX',\n  'UI5-COLOR-PICKER',\n  'UI5-COMBOBOX',\n  'UI5-DATE-PICKER',\n  'UI5-DATERANGE-PICKER',\n  'UI5-DATETIME-PICKER',\n  'UI5-DURATION-PICKER',\n  'UI5-FILE-UPLOADER',\n  'UI5-ICON',\n  'UI5-INPUT',\n  'UI5-LINK',\n  'UI5-MULTI-COMBOBOX',\n  'UI5-MULTI-INPUT',\n  'UI5-RADIO-BUTTON',\n  'UI5-RANGE-SLIDER',\n  'UI5-RATING-INDICATOR',\n  'UI5-SEGMENTED-BUTTON',\n  'UI5-SELECT',\n  'UI5-SLIDER',\n  'UI5-STEP-INPUT',\n  'UI5-SWITCH',\n  'UI5-TEXT-AREA',\n  'UI5-TIME-PICKER',\n  'UI5-TOGGLE-BUTTON',\n  'UI5-UPLOAD-COLLECTION'\n]);\n","import { CheckBox } from '@ui5/webcomponents-react/dist/CheckBox';\nimport { TableSelectionMode } from '@ui5/webcomponents-react/dist/TableSelectionMode';\nimport React from 'react';\nimport { getBy } from '../util';\n\ntype DisableRowSelectionType = string | ((row: Record<any, any>) => boolean);\n\nconst customCheckBoxStyling = {\n  verticalAlign: 'middle'\n};\n\nconst headerProps = (\n  props,\n  {\n    instance: {\n      webComponentsReactProperties: { selectionMode }\n    }\n  }\n) => {\n  if (props.key === 'header___ui5wcr__internal_selection_column' && selectionMode === TableSelectionMode.MultiSelect) {\n    return [props, { onClick: undefined, onKeyDown: undefined }];\n  }\n  return props;\n};\n\nconst columns = (columns) => {\n  return columns.map((column) => {\n    if (column.id === '__ui5wcr__internal_selection_column') {\n      return {\n        ...column,\n        Cell: (instance) => {\n          const { webComponentsReactProperties, row } = instance;\n          if (row.disableSelect === true) {\n            if (row.isGrouped && webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {\n              return null;\n            }\n            if (webComponentsReactProperties.selectionMode === TableSelectionMode.SingleSelect) {\n              return <div onClick={undefined} data-name=\"internal_selection_column\" />;\n            }\n            return (\n              <CheckBox\n                {...row.getToggleRowSelectedProps()}\n                disabled\n                style={customCheckBoxStyling}\n                data-name=\"internal_selection_column\"\n                tabIndex={-1}\n              />\n            );\n          }\n          return column.Cell(instance);\n        },\n        Header: () => null\n      };\n    }\n    return column;\n  });\n};\n\n/**\n * A plugin hook for disabling row selection of specific rows.\n * __Note:__ The \"Select All\" checkbox is not available with this hook.\n *\n * @param disableRowSelection - Can be either a `string` or a `function`. `string:` Defines the key in the dataset for disabling rows. If the value of the key is `true`, then the row will not be selectable. `function:` Programmatically disable rows for selection. The function receives the current row as parameter.\n */\nexport const useRowDisableSelection = (disableRowSelection: DisableRowSelectionType) => {\n  const disableRowAccessor =\n    typeof disableRowSelection === 'function'\n      ? disableRowSelection\n      : (d) => getBy(d.original, disableRowSelection, undefined);\n  const getRowProps = (rowProps, { row, instance }) => {\n    const { webComponentsReactProperties } = instance;\n    if (disableRowAccessor(row) === true) {\n      row.disableSelect = true;\n      return { ...rowProps, onClick: undefined, className: webComponentsReactProperties.classes.tr };\n    }\n    return rowProps;\n  };\n\n  const columnDeps = (deps) => {\n    return [...deps, disableRowSelection];\n  };\n\n  const useDisableSelectionRow = (hooks) => {\n    hooks.getHeaderProps.push(headerProps);\n    hooks.getRowProps.push(getRowProps);\n    hooks.columns.push(columns);\n    hooks.columnsDeps.push(columnDeps);\n  };\n\n  useDisableSelectionRow.pluginName = 'useRowDisableSelection';\n\n  return useDisableSelectionRow;\n};\n","import React, { useEffect } from 'react';\nimport { TableSelectionBehavior } from '@ui5/webcomponents-react/dist/TableSelectionBehavior';\nimport { TableSelectionMode } from '@ui5/webcomponents-react/dist/TableSelectionMode';\nconst getParentIndicesRecursive = (rowId) => {\n  const parentIndices = {};\n  const getParentIndices = (internalRowId) => {\n    const lastDotIndex = internalRowId.lastIndexOf('.');\n    if (~lastDotIndex) {\n      const parentRowId = internalRowId.slice(0, lastDotIndex);\n      if (!parentIndices[parentRowId]) {\n        parentIndices[parentRowId] = true;\n        getParentIndices(parentRowId);\n      }\n    }\n  };\n  getParentIndices(rowId);\n  return parentIndices;\n};\n\n/**\n * A plugin hook that marks parent rows as indeterminate if a child row is selected in `MultiSelect` mode.\n * When using this hook, it is recommended to also select all sub-rows when selecting a row. (`reactTableOptions={{ selectSubRows: true }}`)\n */\nexport const useIndeterminateRowSelection = () => {\n  const toggleRowProps = (rowProps, { row, instance }) => {\n    let indeterminate;\n    if (instance.isAllRowsSelected) {\n      indeterminate = false;\n    } else {\n      indeterminate = instance?.state?.indeterminateRows?.[row.id] ?? false;\n    }\n    return [\n      rowProps,\n      {\n        indeterminate: indeterminate,\n        checked: indeterminate ? true : rowProps.checked\n      }\n    ];\n  };\n\n  const stateReducer = (newState, action, prevState, instance) => {\n    if (action.type === 'INDETERMINATE_ROW_IDS') {\n      let indeterminateRows = {};\n      const allSelectedRows = {};\n      let allSelected = true;\n      let currentDepth = -1;\n\n      instance.flatRows\n        ?.filter((item) => !item.original.emptyRow)\n        .sort((a, b) => b.id.localeCompare(a.id))\n        .map((item) => {\n          if (currentDepth === -1) {\n            currentDepth = item.depth;\n          } else if (currentDepth !== item.depth) {\n            currentDepth = item.depth;\n            if (allSelected && newState.selectedRowIds[item.id]) {\n              allSelectedRows[item.id] = true;\n              delete indeterminateRows[item.id];\n            }\n            allSelected = true;\n          }\n\n          if (newState.selectedRowIds[item.id]) {\n            const parentRowId = item.id.slice(0, item.id.lastIndexOf('.'));\n            if (parentRowId) {\n              indeterminateRows = { ...indeterminateRows, ...getParentIndicesRecursive(item.id) };\n            }\n          } else {\n            allSelected = false;\n          }\n          return item;\n        });\n      return {\n        ...newState,\n        indeterminateRows: indeterminateRows\n      };\n    }\n  };\n\n  const useInstanceAfterData = (instance) => {\n    const {\n      data,\n      dispatch,\n      state: { selectedRowIds },\n      webComponentsReactProperties: { selectionMode, selectionBehavior, isTreeTable }\n    } = instance;\n\n    useEffect(() => {\n      if (\n        isTreeTable &&\n        selectionMode === TableSelectionMode.MultiSelect &&\n        selectionBehavior !== TableSelectionBehavior.RowOnly\n      ) {\n        dispatch({ type: 'INDETERMINATE_ROW_IDS' });\n      }\n    }, [data, selectedRowIds, isTreeTable, selectionMode, selectionBehavior]);\n  };\n\n  const useIndeterminate = (hooks) => {\n    hooks.getToggleRowSelectedProps.push(toggleRowProps);\n    hooks.stateReducers.push(stateReducer);\n    hooks.useInstanceAfterData.push(useInstanceAfterData);\n  };\n\n  useIndeterminate.pluginName = 'useIndeterminate';\n\n  return useIndeterminate;\n};\n"]},"metadata":{},"sourceType":"module"}