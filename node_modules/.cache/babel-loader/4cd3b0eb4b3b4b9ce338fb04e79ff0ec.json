{"ast":null,"code":"/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/*namespace com.google.zxing {*/\n\n\nimport System from './util/System';\nimport LuminanceSource from './LuminanceSource';\nimport InvertedLuminanceSource from './InvertedLuminanceSource';\nimport IllegalArgumentException from './IllegalArgumentException';\n/**\n * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\n * with the option to crop to a rectangle within the full data. This can be used to exclude\n * superfluous pixels around the perimeter and speed up decoding.\n *\n * It works for any pixel format where the Y channel is planar and appears first, including\n * YCbCr_420_SP and YCbCr_422_SP.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\n\nvar PlanarYUVLuminanceSource = function (_super) {\n  __extends(PlanarYUVLuminanceSource, _super);\n\n  function PlanarYUVLuminanceSource(yuvData, dataWidth\n  /*int*/\n  , dataHeight\n  /*int*/\n  , left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  , reverseHorizontal) {\n    var _this = _super.call(this, width, height) || this;\n\n    _this.yuvData = yuvData;\n    _this.dataWidth = dataWidth;\n    _this.dataHeight = dataHeight;\n    _this.left = left;\n    _this.top = top;\n\n    if (left + width > dataWidth || top + height > dataHeight) {\n      throw new IllegalArgumentException('Crop rectangle does not fit within image data.');\n    }\n\n    if (reverseHorizontal) {\n      _this.reverseHorizontal(width, height);\n    }\n\n    return _this;\n  }\n  /*@Override*/\n\n\n  PlanarYUVLuminanceSource.prototype.getRow = function (y\n  /*int*/\n  , row) {\n    if (y < 0 || y >= this.getHeight()) {\n      throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n    }\n\n    var width = this.getWidth();\n\n    if (row === null || row === undefined || row.length < width) {\n      row = new Uint8ClampedArray(width);\n    }\n\n    var offset = (y + this.top) * this.dataWidth + this.left;\n    System.arraycopy(this.yuvData, offset, row, 0, width);\n    return row;\n  };\n  /*@Override*/\n\n\n  PlanarYUVLuminanceSource.prototype.getMatrix = function () {\n    var width = this.getWidth();\n    var height = this.getHeight(); // If the caller asks for the entire underlying image, save the copy and give them the\n    // original data. The docs specifically warn that result.length must be ignored.\n\n    if (width === this.dataWidth && height === this.dataHeight) {\n      return this.yuvData;\n    }\n\n    var area = width * height;\n    var matrix = new Uint8ClampedArray(area);\n    var inputOffset = this.top * this.dataWidth + this.left; // If the width matches the full width of the underlying data, perform a single copy.\n\n    if (width === this.dataWidth) {\n      System.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\n      return matrix;\n    } // Otherwise copy one cropped row at a time.\n\n\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n      System.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\n      inputOffset += this.dataWidth;\n    }\n\n    return matrix;\n  };\n  /*@Override*/\n\n\n  PlanarYUVLuminanceSource.prototype.isCropSupported = function () {\n    return true;\n  };\n  /*@Override*/\n\n\n  PlanarYUVLuminanceSource.prototype.crop = function (left\n  /*int*/\n  , top\n  /*int*/\n  , width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    return new PlanarYUVLuminanceSource(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);\n  };\n\n  PlanarYUVLuminanceSource.prototype.renderThumbnail = function () {\n    var width = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    var height = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    var pixels = new Int32Array(width * height);\n    var yuv = this.yuvData;\n    var inputOffset = this.top * this.dataWidth + this.left;\n\n    for (var y = 0; y < height; y++) {\n      var outputOffset = y * width;\n\n      for (var x = 0; x < width; x++) {\n        var grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\n        pixels[outputOffset + x] = 0xFF000000 | grey * 0x00010101;\n      }\n\n      inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    }\n\n    return pixels;\n  };\n  /**\n   * @return width of image from {@link #renderThumbnail()}\n   */\n\n\n  PlanarYUVLuminanceSource.prototype.getThumbnailWidth = function () {\n    return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n  };\n  /**\n   * @return height of image from {@link #renderThumbnail()}\n   */\n\n\n  PlanarYUVLuminanceSource.prototype.getThumbnailHeight = function () {\n    return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n  };\n\n  PlanarYUVLuminanceSource.prototype.reverseHorizontal = function (width\n  /*int*/\n  , height\n  /*int*/\n  ) {\n    var yuvData = this.yuvData;\n\n    for (var y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {\n      var middle = rowStart + width / 2;\n\n      for (var x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {\n        var temp = yuvData[x1];\n        yuvData[x1] = yuvData[x2];\n        yuvData[x2] = temp;\n      }\n    }\n  };\n\n  PlanarYUVLuminanceSource.prototype.invert = function () {\n    return new InvertedLuminanceSource(this);\n  };\n\n  PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR = 2;\n  return PlanarYUVLuminanceSource;\n}(LuminanceSource);\n\nexport default PlanarYUVLuminanceSource;","map":{"version":3,"sources":["../../../src/core/PlanarYUVLuminanceSource.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/*namespace com.google.zxing {*/\nimport System from './util/System';\nimport LuminanceSource from './LuminanceSource';\nimport InvertedLuminanceSource from './InvertedLuminanceSource';\nimport IllegalArgumentException from './IllegalArgumentException';\n/**\n * This object extends LuminanceSource around an array of YUV data returned from the camera driver,\n * with the option to crop to a rectangle within the full data. This can be used to exclude\n * superfluous pixels around the perimeter and speed up decoding.\n *\n * It works for any pixel format where the Y channel is planar and appears first, including\n * YCbCr_420_SP and YCbCr_422_SP.\n *\n * @author dswitkin@google.com (Daniel Switkin)\n */\nvar PlanarYUVLuminanceSource = /** @class */ (function (_super) {\n    __extends(PlanarYUVLuminanceSource, _super);\n    function PlanarYUVLuminanceSource(yuvData, dataWidth /*int*/, dataHeight /*int*/, left /*int*/, top /*int*/, width /*int*/, height /*int*/, reverseHorizontal) {\n        var _this = _super.call(this, width, height) || this;\n        _this.yuvData = yuvData;\n        _this.dataWidth = dataWidth;\n        _this.dataHeight = dataHeight;\n        _this.left = left;\n        _this.top = top;\n        if (left + width > dataWidth || top + height > dataHeight) {\n            throw new IllegalArgumentException('Crop rectangle does not fit within image data.');\n        }\n        if (reverseHorizontal) {\n            _this.reverseHorizontal(width, height);\n        }\n        return _this;\n    }\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.getRow = function (y /*int*/, row) {\n        if (y < 0 || y >= this.getHeight()) {\n            throw new IllegalArgumentException('Requested row is outside the image: ' + y);\n        }\n        var width = this.getWidth();\n        if (row === null || row === undefined || row.length < width) {\n            row = new Uint8ClampedArray(width);\n        }\n        var offset = (y + this.top) * this.dataWidth + this.left;\n        System.arraycopy(this.yuvData, offset, row, 0, width);\n        return row;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.getMatrix = function () {\n        var width = this.getWidth();\n        var height = this.getHeight();\n        // If the caller asks for the entire underlying image, save the copy and give them the\n        // original data. The docs specifically warn that result.length must be ignored.\n        if (width === this.dataWidth && height === this.dataHeight) {\n            return this.yuvData;\n        }\n        var area = width * height;\n        var matrix = new Uint8ClampedArray(area);\n        var inputOffset = this.top * this.dataWidth + this.left;\n        // If the width matches the full width of the underlying data, perform a single copy.\n        if (width === this.dataWidth) {\n            System.arraycopy(this.yuvData, inputOffset, matrix, 0, area);\n            return matrix;\n        }\n        // Otherwise copy one cropped row at a time.\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            System.arraycopy(this.yuvData, inputOffset, matrix, outputOffset, width);\n            inputOffset += this.dataWidth;\n        }\n        return matrix;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.isCropSupported = function () {\n        return true;\n    };\n    /*@Override*/\n    PlanarYUVLuminanceSource.prototype.crop = function (left /*int*/, top /*int*/, width /*int*/, height /*int*/) {\n        return new PlanarYUVLuminanceSource(this.yuvData, this.dataWidth, this.dataHeight, this.left + left, this.top + top, width, height, false);\n    };\n    PlanarYUVLuminanceSource.prototype.renderThumbnail = function () {\n        var width = this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        var height = this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        var pixels = new Int32Array(width * height);\n        var yuv = this.yuvData;\n        var inputOffset = this.top * this.dataWidth + this.left;\n        for (var y = 0; y < height; y++) {\n            var outputOffset = y * width;\n            for (var x = 0; x < width; x++) {\n                var grey = yuv[inputOffset + x * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR] & 0xff;\n                pixels[outputOffset + x] = 0xFF000000 | (grey * 0x00010101);\n            }\n            inputOffset += this.dataWidth * PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n        }\n        return pixels;\n    };\n    /**\n     * @return width of image from {@link #renderThumbnail()}\n     */\n    PlanarYUVLuminanceSource.prototype.getThumbnailWidth = function () {\n        return this.getWidth() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    };\n    /**\n     * @return height of image from {@link #renderThumbnail()}\n     */\n    PlanarYUVLuminanceSource.prototype.getThumbnailHeight = function () {\n        return this.getHeight() / PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR;\n    };\n    PlanarYUVLuminanceSource.prototype.reverseHorizontal = function (width /*int*/, height /*int*/) {\n        var yuvData = this.yuvData;\n        for (var y = 0, rowStart = this.top * this.dataWidth + this.left; y < height; y++, rowStart += this.dataWidth) {\n            var middle = rowStart + width / 2;\n            for (var x1 = rowStart, x2 = rowStart + width - 1; x1 < middle; x1++, x2--) {\n                var temp = yuvData[x1];\n                yuvData[x1] = yuvData[x2];\n                yuvData[x2] = temp;\n            }\n        }\n    };\n    PlanarYUVLuminanceSource.prototype.invert = function () {\n        return new InvertedLuminanceSource(this);\n    };\n    PlanarYUVLuminanceSource.THUMBNAIL_SCALE_FACTOR = 2;\n    return PlanarYUVLuminanceSource;\n}(LuminanceSource));\nexport default PlanarYUVLuminanceSource;\n//# sourceMappingURL=PlanarYUVLuminanceSource.js.map"]},"metadata":{},"sourceType":"module"}