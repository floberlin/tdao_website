{"ast":null,"code":"import { getLanguage as getConfiguredLanguage, getFetchDefaultLanguage as getConfiguredFetchDefaultLanguage } from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\nlet language;\nlet fetchDefaultLanguage;\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\n\nconst getLanguage = () => {\n  if (language === undefined) {\n    language = getConfiguredLanguage();\n  }\n\n  return language;\n};\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\n\n\nconst setLanguage = async newLanguage => {\n  if (language === newLanguage) {\n    return;\n  }\n\n  language = newLanguage;\n  await fireLanguageChange(newLanguage);\n  await reRenderAllUI5Elements({\n    languageAware: true\n  });\n};\n/**\n * Defines if the default language, that is inlined, should be\n * fetched over the network instead of using the inlined one.\n * <b>Note:</b> By default the language will not be fetched.\n *\n * @param {Boolean} fetchDefaultLanguage\n */\n\n\nconst setFetchDefaultLanguage = fetchDefaultLang => {\n  fetchDefaultLanguage = fetchDefaultLang;\n};\n/**\n * Returns if the default language, that is inlined, should be fetched over the network.\n * @returns {Boolean}\n */\n\n\nconst getFetchDefaultLanguage = () => {\n  if (fetchDefaultLanguage === undefined) {\n    setFetchDefaultLanguage(getConfiguredFetchDefaultLanguage());\n  }\n\n  return fetchDefaultLanguage;\n};\n\nexport { getLanguage, setLanguage, setFetchDefaultLanguage, getFetchDefaultLanguage };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/config/Language.js"],"names":["getLanguage","getConfiguredLanguage","getFetchDefaultLanguage","getConfiguredFetchDefaultLanguage","fireLanguageChange","reRenderAllUI5Elements","language","fetchDefaultLanguage","undefined","setLanguage","newLanguage","languageAware","setFetchDefaultLanguage","fetchDefaultLang"],"mappings":"AAAA,SACCA,WAAW,IAAIC,qBADhB,EAECC,uBAAuB,IAAIC,iCAF5B,QAGO,4BAHP;AAIA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,sBAAT,QAAuC,cAAvC;AAEA,IAAIC,QAAJ;AACA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;;AACA,MAAMP,WAAW,GAAG,MAAM;AACzB,MAAIM,QAAQ,KAAKE,SAAjB,EAA4B;AAC3BF,IAAAA,QAAQ,GAAGL,qBAAqB,EAAhC;AACA;;AACD,SAAOK,QAAP;AACA,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMG,WAAW,GAAG,MAAMC,WAAN,IAAqB;AACxC,MAAIJ,QAAQ,KAAKI,WAAjB,EAA8B;AAC7B;AACA;;AAEDJ,EAAAA,QAAQ,GAAGI,WAAX;AAEA,QAAMN,kBAAkB,CAACM,WAAD,CAAxB;AACA,QAAML,sBAAsB,CAAC;AAAEM,IAAAA,aAAa,EAAE;AAAjB,GAAD,CAA5B;AACA,CATD;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,uBAAuB,GAAGC,gBAAgB,IAAI;AACnDN,EAAAA,oBAAoB,GAAGM,gBAAvB;AACA,CAFD;AAIA;AACA;AACA;AACA;;;AACA,MAAMX,uBAAuB,GAAG,MAAM;AACrC,MAAIK,oBAAoB,KAAKC,SAA7B,EAAwC;AACvCI,IAAAA,uBAAuB,CAACT,iCAAiC,EAAlC,CAAvB;AACA;;AAED,SAAOI,oBAAP;AACA,CAND;;AAQA,SACCP,WADD,EAECS,WAFD,EAGCG,uBAHD,EAICV,uBAJD","sourcesContent":["import {\n\tgetLanguage as getConfiguredLanguage,\n\tgetFetchDefaultLanguage as getConfiguredFetchDefaultLanguage,\n} from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\n\nlet language;\nlet fetchDefaultLanguage;\n\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\nconst getLanguage = () => {\n\tif (language === undefined) {\n\t\tlanguage = getConfiguredLanguage();\n\t}\n\treturn language;\n};\n\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\nconst setLanguage = async newLanguage => {\n\tif (language === newLanguage) {\n\t\treturn;\n\t}\n\n\tlanguage = newLanguage;\n\n\tawait fireLanguageChange(newLanguage);\n\tawait reRenderAllUI5Elements({ languageAware: true });\n};\n\n/**\n * Defines if the default language, that is inlined, should be\n * fetched over the network instead of using the inlined one.\n * <b>Note:</b> By default the language will not be fetched.\n *\n * @param {Boolean} fetchDefaultLanguage\n */\nconst setFetchDefaultLanguage = fetchDefaultLang => {\n\tfetchDefaultLanguage = fetchDefaultLang;\n};\n\n/**\n * Returns if the default language, that is inlined, should be fetched over the network.\n * @returns {Boolean}\n */\nconst getFetchDefaultLanguage = () => {\n\tif (fetchDefaultLanguage === undefined) {\n\t\tsetFetchDefaultLanguage(getConfiguredFetchDefaultLanguage());\n\t}\n\n\treturn fetchDefaultLanguage;\n};\n\nexport {\n\tgetLanguage,\n\tsetLanguage,\n\tsetFetchDefaultLanguage,\n\tgetFetchDefaultLanguage,\n};\n"]},"metadata":{},"sourceType":"module"}