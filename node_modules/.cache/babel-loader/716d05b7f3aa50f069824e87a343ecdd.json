{"ast":null,"code":"const roots = new Map();\nlet useLinks = false;\nlet preloadLinks = true;\n/**\n * Use this function to provide the path to the directory where the css resources for the given package will be served from\n *\n * @public\n * @param packageName name of the package that is being configured\n * @param root path, accessible by the server that will serve the css resources\n */\n\nconst setPackageCSSRoot = (packageName, root) => {\n  roots.set(packageName, root);\n};\n\nconst getUrl = (packageName, path) => {\n  return `${roots.get(packageName)}${path}`;\n};\n/**\n * Call this function to enable or disable the usage of <link> tags instead of <style> tags to achieve CSP compliance\n * Example: \"setUseLinks(true)\" will unconditionally use <link> tags for all browsers;\n * Example: \"setUseLinks(!document.adoptedStyleSheets) will only enable the usage of <link> tags for browsers that do not support constructable stylesheets.\n *\n * @public\n * @param use whether links will be used\n */\n\n\nconst setUseLinks = use => {\n  useLinks = use;\n};\n/**\n * Call this function to enable or disable the preloading of <link> tags.\n * Note: only taken into account when <link> tags are being used.\n * Note: links are being preloaded by default, so call \"setPreloadLinks(false)\" to opt out of this.\n *\n * @public\n * @param preload\n */\n\n\nconst setPreloadLinks = preload => {\n  preloadLinks = preload;\n};\n\nconst shouldUseLinks = () => {\n  return useLinks;\n};\n\nconst shouldPreloadLinks = () => {\n  return preloadLinks;\n};\n\nexport { setPackageCSSRoot, getUrl, setUseLinks, setPreloadLinks, shouldUseLinks, shouldPreloadLinks };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/CSP.js"],"names":["roots","Map","useLinks","preloadLinks","setPackageCSSRoot","packageName","root","set","getUrl","path","get","setUseLinks","use","setPreloadLinks","preload","shouldUseLinks","shouldPreloadLinks"],"mappings":"AAAA,MAAMA,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,IAAIC,QAAQ,GAAG,KAAf;AACA,IAAIC,YAAY,GAAG,IAAnB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,iBAAiB,GAAG,CAACC,WAAD,EAAcC,IAAd,KAAuB;AAChDN,EAAAA,KAAK,CAACO,GAAN,CAAUF,WAAV,EAAuBC,IAAvB;AACA,CAFD;;AAIA,MAAME,MAAM,GAAG,CAACH,WAAD,EAAcI,IAAd,KAAuB;AACrC,SAAQ,GAAET,KAAK,CAACU,GAAN,CAAUL,WAAV,CAAuB,GAAEI,IAAK,EAAxC;AACA,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,WAAW,GAAGC,GAAG,IAAI;AAC1BV,EAAAA,QAAQ,GAAGU,GAAX;AACA,CAFD;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,eAAe,GAAGC,OAAO,IAAI;AAClCX,EAAAA,YAAY,GAAGW,OAAf;AACA,CAFD;;AAIA,MAAMC,cAAc,GAAG,MAAM;AAC5B,SAAOb,QAAP;AACA,CAFD;;AAIA,MAAMc,kBAAkB,GAAG,MAAM;AAChC,SAAOb,YAAP;AACA,CAFD;;AAIA,SACCC,iBADD,EAECI,MAFD,EAGCG,WAHD,EAICE,eAJD,EAKCE,cALD,EAMCC,kBAND","sourcesContent":["const roots = new Map();\nlet useLinks = false;\nlet preloadLinks = true;\n\n/**\n * Use this function to provide the path to the directory where the css resources for the given package will be served from\n *\n * @public\n * @param packageName name of the package that is being configured\n * @param root path, accessible by the server that will serve the css resources\n */\nconst setPackageCSSRoot = (packageName, root) => {\n\troots.set(packageName, root);\n};\n\nconst getUrl = (packageName, path) => {\n\treturn `${roots.get(packageName)}${path}`;\n};\n\n/**\n * Call this function to enable or disable the usage of <link> tags instead of <style> tags to achieve CSP compliance\n * Example: \"setUseLinks(true)\" will unconditionally use <link> tags for all browsers;\n * Example: \"setUseLinks(!document.adoptedStyleSheets) will only enable the usage of <link> tags for browsers that do not support constructable stylesheets.\n *\n * @public\n * @param use whether links will be used\n */\nconst setUseLinks = use => {\n\tuseLinks = use;\n};\n\n/**\n * Call this function to enable or disable the preloading of <link> tags.\n * Note: only taken into account when <link> tags are being used.\n * Note: links are being preloaded by default, so call \"setPreloadLinks(false)\" to opt out of this.\n *\n * @public\n * @param preload\n */\nconst setPreloadLinks = preload => {\n\tpreloadLinks = preload;\n};\n\nconst shouldUseLinks = () => {\n\treturn useLinks;\n};\n\nconst shouldPreloadLinks = () => {\n\treturn preloadLinks;\n};\n\nexport {\n\tsetPackageCSSRoot,\n\tgetUrl,\n\tsetUseLinks,\n\tsetPreloadLinks,\n\tshouldUseLinks,\n\tshouldPreloadLinks,\n};\n"]},"metadata":{},"sourceType":"module"}