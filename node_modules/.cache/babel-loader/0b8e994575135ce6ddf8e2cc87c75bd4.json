{"ast":null,"code":"import _regeneratorRuntime from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { getLanguage as getConfiguredLanguage, getFetchDefaultLanguage as getConfiguredFetchDefaultLanguage } from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\nvar language;\nvar fetchDefaultLanguage;\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\n\nvar getLanguage = function getLanguage() {\n  if (language === undefined) {\n    language = getConfiguredLanguage();\n  }\n\n  return language;\n};\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\n\n\nvar setLanguage = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(newLanguage) {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(language === newLanguage)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 2:\n            language = newLanguage;\n            _context.next = 5;\n            return fireLanguageChange(newLanguage);\n\n          case 5:\n            _context.next = 7;\n            return reRenderAllUI5Elements({\n              languageAware: true\n            });\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function setLanguage(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\n/**\n * Defines if the default language, that is inlined, should be\n * fetched over the network instead of using the inlined one.\n * <b>Note:</b> By default the language will not be fetched.\n *\n * @param {Boolean} fetchDefaultLanguage\n */\n\n\nvar setFetchDefaultLanguage = function setFetchDefaultLanguage(fetchDefaultLang) {\n  fetchDefaultLanguage = fetchDefaultLang;\n};\n/**\n * Returns if the default language, that is inlined, should be fetched over the network.\n * @returns {Boolean}\n */\n\n\nvar getFetchDefaultLanguage = function getFetchDefaultLanguage() {\n  if (fetchDefaultLanguage === undefined) {\n    setFetchDefaultLanguage(getConfiguredFetchDefaultLanguage());\n  }\n\n  return fetchDefaultLanguage;\n};\n\nexport { getLanguage, setLanguage, setFetchDefaultLanguage, getFetchDefaultLanguage };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/config/Language.js"],"names":["getLanguage","getConfiguredLanguage","getFetchDefaultLanguage","getConfiguredFetchDefaultLanguage","fireLanguageChange","reRenderAllUI5Elements","language","fetchDefaultLanguage","undefined","setLanguage","newLanguage","languageAware","setFetchDefaultLanguage","fetchDefaultLang"],"mappings":";;AAAA,SACCA,WAAW,IAAIC,qBADhB,EAECC,uBAAuB,IAAIC,iCAF5B,QAGO,4BAHP;AAIA,SAASC,kBAAT,QAAmC,6BAAnC;AACA,SAASC,sBAAT,QAAuC,cAAvC;AAEA,IAAIC,QAAJ;AACA,IAAIC,oBAAJ;AAEA;AACA;AACA;AACA;;AACA,IAAMP,WAAW,GAAG,SAAdA,WAAc,GAAM;AACzB,MAAIM,QAAQ,KAAKE,SAAjB,EAA4B;AAC3BF,IAAAA,QAAQ,GAAGL,qBAAqB,EAAhC;AACA;;AACD,SAAOK,QAAP;AACA,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,WAAW;AAAA,sEAAG,iBAAMC,WAAN;AAAA;AAAA;AAAA;AAAA;AAAA,kBACfJ,QAAQ,KAAKI,WADE;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAKnBJ,YAAAA,QAAQ,GAAGI,WAAX;AALmB;AAAA,mBAObN,kBAAkB,CAACM,WAAD,CAPL;;AAAA;AAAA;AAAA,mBAQbL,sBAAsB,CAAC;AAAEM,cAAAA,aAAa,EAAE;AAAjB,aAAD,CART;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAXF,WAAW;AAAA;AAAA;AAAA,GAAjB;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAMG,uBAAuB,GAAG,SAA1BA,uBAA0B,CAAAC,gBAAgB,EAAI;AACnDN,EAAAA,oBAAoB,GAAGM,gBAAvB;AACA,CAFD;AAIA;AACA;AACA;AACA;;;AACA,IAAMX,uBAAuB,GAAG,SAA1BA,uBAA0B,GAAM;AACrC,MAAIK,oBAAoB,KAAKC,SAA7B,EAAwC;AACvCI,IAAAA,uBAAuB,CAACT,iCAAiC,EAAlC,CAAvB;AACA;;AAED,SAAOI,oBAAP;AACA,CAND;;AAQA,SACCP,WADD,EAECS,WAFD,EAGCG,uBAHD,EAICV,uBAJD","sourcesContent":["import {\n\tgetLanguage as getConfiguredLanguage,\n\tgetFetchDefaultLanguage as getConfiguredFetchDefaultLanguage,\n} from \"../InitialConfiguration.js\";\nimport { fireLanguageChange } from \"../locale/languageChange.js\";\nimport { reRenderAllUI5Elements } from \"../Render.js\";\n\nlet language;\nlet fetchDefaultLanguage;\n\n/**\n * Returns the currently configured language, or the browser language as a fallback\n * @returns {String}\n */\nconst getLanguage = () => {\n\tif (language === undefined) {\n\t\tlanguage = getConfiguredLanguage();\n\t}\n\treturn language;\n};\n\n/**\n * Changes the current language, re-fetches all message bundles, updates all language-aware components\n * and returns a promise that resolves when all rendering is done\n *\n * @param newLanguage\n * @returns {Promise<void>}\n */\nconst setLanguage = async newLanguage => {\n\tif (language === newLanguage) {\n\t\treturn;\n\t}\n\n\tlanguage = newLanguage;\n\n\tawait fireLanguageChange(newLanguage);\n\tawait reRenderAllUI5Elements({ languageAware: true });\n};\n\n/**\n * Defines if the default language, that is inlined, should be\n * fetched over the network instead of using the inlined one.\n * <b>Note:</b> By default the language will not be fetched.\n *\n * @param {Boolean} fetchDefaultLanguage\n */\nconst setFetchDefaultLanguage = fetchDefaultLang => {\n\tfetchDefaultLanguage = fetchDefaultLang;\n};\n\n/**\n * Returns if the default language, that is inlined, should be fetched over the network.\n * @returns {Boolean}\n */\nconst getFetchDefaultLanguage = () => {\n\tif (fetchDefaultLanguage === undefined) {\n\t\tsetFetchDefaultLanguage(getConfiguredFetchDefaultLanguage());\n\t}\n\n\treturn fetchDefaultLanguage;\n};\n\nexport {\n\tgetLanguage,\n\tsetLanguage,\n\tsetFetchDefaultLanguage,\n\tgetFetchDefaultLanguage,\n};\n"]},"metadata":{},"sourceType":"module"}