{"ast":null,"code":"/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = this && this.__values || function (o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}; // package com.google.zxing.pdf417;\n// import com.google.zxing.BarcodeFormat;\n\n\nimport BarcodeFormat from '../BarcodeFormat'; // import com.google.zxing.ChecksumException;\n\nimport ChecksumException from '../ChecksumException'; // import com.google.zxing.FormatException;\n\nimport FormatException from '../FormatException'; // import com.google.zxing.NotFoundException;\n\nimport NotFoundException from '../NotFoundException'; // import com.google.zxing.Result;\n\nimport Result from '../Result'; // import com.google.zxing.common.DecoderResult;\n// import com.google.zxing.multi.MultipleBarcodeReader;\n// import com.google.zxing.pdf417.decoder.PDF417ScanningDecoder;\n// import com.google.zxing.pdf417.detector.Detector;\n// import com.google.zxing.pdf417.detector.PDF417DetectorResult;\n\nimport PDF417Common from './PDF417Common';\nimport Integer from '../util/Integer';\nimport ResultMetadataType from '../ResultMetadataType';\nimport Detector from './detector/Detector';\nimport PDF417ScanningDecoder from './decoder/PDF417ScanningDecoder'; // import java.util.ArrayList;\n// import java.util.List;\n// import java.util.Map;\n\n/**\n * This implementation can detect and decode PDF417 codes in an image.\n *\n * @author Guenther Grau\n */\n\nvar PDF417Reader = function () {\n  function PDF417Reader() {} // private static /*final Result[]*/ EMPTY_RESULT_ARRAY: Result[] = new Result([0]);\n\n  /**\n   * Locates and decodes a PDF417 code in an image.\n   *\n   * @return a String representing the content encoded by the PDF417 code\n   * @throws NotFoundException if a PDF417 code cannot be found,\n   * @throws FormatException if a PDF417 cannot be decoded\n   * @throws ChecksumException\n   */\n  // @Override\n\n\n  PDF417Reader.prototype.decode = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    var result = PDF417Reader.decode(image, hints, false);\n\n    if (result == null || result.length === 0 || result[0] == null) {\n      throw NotFoundException.getNotFoundInstance();\n    }\n\n    return result[0];\n  };\n  /**\n   *\n   * @param BinaryBitmap\n   * @param image\n   * @throws NotFoundException\n   */\n  //   @Override\n\n\n  PDF417Reader.prototype.decodeMultiple = function (image, hints) {\n    if (hints === void 0) {\n      hints = null;\n    }\n\n    try {\n      return PDF417Reader.decode(image, hints, true);\n    } catch (ignored) {\n      if (ignored instanceof FormatException || ignored instanceof ChecksumException) {\n        throw NotFoundException.getNotFoundInstance();\n      }\n\n      throw ignored;\n    }\n  };\n  /**\n   *\n   * @param image\n   * @param hints\n   * @param multiple\n   *\n   * @throws NotFoundException\n   * @throws FormatException√ü\n   * @throws ChecksumException\n   */\n\n\n  PDF417Reader.decode = function (image, hints, multiple) {\n    var e_1, _a;\n\n    var results = new Array();\n    var detectorResult = Detector.detectMultiple(image, hints, multiple);\n\n    try {\n      for (var _b = __values(detectorResult.getPoints()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var points = _c.value;\n        var decoderResult = PDF417ScanningDecoder.decode(detectorResult.getBits(), points[4], points[5], points[6], points[7], PDF417Reader.getMinCodewordWidth(points), PDF417Reader.getMaxCodewordWidth(points));\n        var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat.PDF_417);\n        result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, decoderResult.getECLevel());\n        var pdf417ResultMetadata = decoderResult.getOther();\n\n        if (pdf417ResultMetadata != null) {\n          result.putMetadata(ResultMetadataType.PDF417_EXTRA_METADATA, pdf417ResultMetadata);\n        }\n\n        results.push(result);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    return results.map(function (x) {\n      return x;\n    });\n  };\n\n  PDF417Reader.getMaxWidth = function (p1, p2) {\n    if (p1 == null || p2 == null) {\n      return 0;\n    }\n\n    return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n  };\n\n  PDF417Reader.getMinWidth = function (p1, p2) {\n    if (p1 == null || p2 == null) {\n      return Integer.MAX_VALUE;\n    }\n\n    return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n  };\n\n  PDF417Reader.getMaxCodewordWidth = function (p) {\n    return Math.floor(Math.max(Math.max(PDF417Reader.getMaxWidth(p[0], p[4]), PDF417Reader.getMaxWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN), Math.max(PDF417Reader.getMaxWidth(p[1], p[5]), PDF417Reader.getMaxWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN)));\n  };\n\n  PDF417Reader.getMinCodewordWidth = function (p) {\n    return Math.floor(Math.min(Math.min(PDF417Reader.getMinWidth(p[0], p[4]), PDF417Reader.getMinWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN), Math.min(PDF417Reader.getMinWidth(p[1], p[5]), PDF417Reader.getMinWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD / PDF417Common.MODULES_IN_STOP_PATTERN)));\n  }; // @Override\n\n\n  PDF417Reader.prototype.reset = function () {// nothing needs to be reset\n  };\n\n  return PDF417Reader;\n}();\n\nexport default PDF417Reader;","map":{"version":3,"sources":["../../../../src/core/pdf417/PDF417Reader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2009 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\n// package com.google.zxing.pdf417;\n// import com.google.zxing.BarcodeFormat;\nimport BarcodeFormat from '../BarcodeFormat';\n// import com.google.zxing.ChecksumException;\nimport ChecksumException from '../ChecksumException';\n// import com.google.zxing.FormatException;\nimport FormatException from '../FormatException';\n// import com.google.zxing.NotFoundException;\nimport NotFoundException from '../NotFoundException';\n// import com.google.zxing.Result;\nimport Result from '../Result';\n// import com.google.zxing.common.DecoderResult;\n// import com.google.zxing.multi.MultipleBarcodeReader;\n// import com.google.zxing.pdf417.decoder.PDF417ScanningDecoder;\n// import com.google.zxing.pdf417.detector.Detector;\n// import com.google.zxing.pdf417.detector.PDF417DetectorResult;\nimport PDF417Common from './PDF417Common';\nimport Integer from '../util/Integer';\nimport ResultMetadataType from '../ResultMetadataType';\nimport Detector from './detector/Detector';\nimport PDF417ScanningDecoder from './decoder/PDF417ScanningDecoder';\n// import java.util.ArrayList;\n// import java.util.List;\n// import java.util.Map;\n/**\n * This implementation can detect and decode PDF417 codes in an image.\n *\n * @author Guenther Grau\n */\nvar PDF417Reader = /** @class */ (function () {\n    function PDF417Reader() {\n    }\n    // private static /*final Result[]*/ EMPTY_RESULT_ARRAY: Result[] = new Result([0]);\n    /**\n     * Locates and decodes a PDF417 code in an image.\n     *\n     * @return a String representing the content encoded by the PDF417 code\n     * @throws NotFoundException if a PDF417 code cannot be found,\n     * @throws FormatException if a PDF417 cannot be decoded\n     * @throws ChecksumException\n     */\n    // @Override\n    PDF417Reader.prototype.decode = function (image, hints) {\n        if (hints === void 0) { hints = null; }\n        var result = PDF417Reader.decode(image, hints, false);\n        if (result == null || result.length === 0 || result[0] == null) {\n            throw NotFoundException.getNotFoundInstance();\n        }\n        return result[0];\n    };\n    /**\n     *\n     * @param BinaryBitmap\n     * @param image\n     * @throws NotFoundException\n     */\n    //   @Override\n    PDF417Reader.prototype.decodeMultiple = function (image, hints) {\n        if (hints === void 0) { hints = null; }\n        try {\n            return PDF417Reader.decode(image, hints, true);\n        }\n        catch (ignored) {\n            if (ignored instanceof FormatException || ignored instanceof ChecksumException) {\n                throw NotFoundException.getNotFoundInstance();\n            }\n            throw ignored;\n        }\n    };\n    /**\n     *\n     * @param image\n     * @param hints\n     * @param multiple\n     *\n     * @throws NotFoundException\n     * @throws FormatException√ü\n     * @throws ChecksumException\n     */\n    PDF417Reader.decode = function (image, hints, multiple) {\n        var e_1, _a;\n        var results = new Array();\n        var detectorResult = Detector.detectMultiple(image, hints, multiple);\n        try {\n            for (var _b = __values(detectorResult.getPoints()), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var points = _c.value;\n                var decoderResult = PDF417ScanningDecoder.decode(detectorResult.getBits(), points[4], points[5], points[6], points[7], PDF417Reader.getMinCodewordWidth(points), PDF417Reader.getMaxCodewordWidth(points));\n                var result = new Result(decoderResult.getText(), decoderResult.getRawBytes(), undefined, points, BarcodeFormat.PDF_417);\n                result.putMetadata(ResultMetadataType.ERROR_CORRECTION_LEVEL, decoderResult.getECLevel());\n                var pdf417ResultMetadata = decoderResult.getOther();\n                if (pdf417ResultMetadata != null) {\n                    result.putMetadata(ResultMetadataType.PDF417_EXTRA_METADATA, pdf417ResultMetadata);\n                }\n                results.push(result);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return results.map(function (x) { return x; });\n    };\n    PDF417Reader.getMaxWidth = function (p1, p2) {\n        if (p1 == null || p2 == null) {\n            return 0;\n        }\n        return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n    };\n    PDF417Reader.getMinWidth = function (p1, p2) {\n        if (p1 == null || p2 == null) {\n            return Integer.MAX_VALUE;\n        }\n        return Math.trunc(Math.abs(p1.getX() - p2.getX()));\n    };\n    PDF417Reader.getMaxCodewordWidth = function (p) {\n        return Math.floor(Math.max(Math.max(PDF417Reader.getMaxWidth(p[0], p[4]), PDF417Reader.getMaxWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD /\n            PDF417Common.MODULES_IN_STOP_PATTERN), Math.max(PDF417Reader.getMaxWidth(p[1], p[5]), PDF417Reader.getMaxWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD /\n            PDF417Common.MODULES_IN_STOP_PATTERN)));\n    };\n    PDF417Reader.getMinCodewordWidth = function (p) {\n        return Math.floor(Math.min(Math.min(PDF417Reader.getMinWidth(p[0], p[4]), PDF417Reader.getMinWidth(p[6], p[2]) * PDF417Common.MODULES_IN_CODEWORD /\n            PDF417Common.MODULES_IN_STOP_PATTERN), Math.min(PDF417Reader.getMinWidth(p[1], p[5]), PDF417Reader.getMinWidth(p[7], p[3]) * PDF417Common.MODULES_IN_CODEWORD /\n            PDF417Common.MODULES_IN_STOP_PATTERN)));\n    };\n    // @Override\n    PDF417Reader.prototype.reset = function () {\n        // nothing needs to be reset\n    };\n    return PDF417Reader;\n}());\nexport default PDF417Reader;\n//# sourceMappingURL=PDF417Reader.js.map"]},"metadata":{},"sourceType":"module"}