{"ast":null,"code":"import _slicedToArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScope.js\";\n/**\n *\n * @class\n * @public\n */\n\nvar UI5ElementMetadata = /*#__PURE__*/function () {\n  function UI5ElementMetadata(metadata) {\n    _classCallCheck(this, UI5ElementMetadata);\n\n    this.metadata = metadata;\n  }\n\n  _createClass(UI5ElementMetadata, [{\n    key: \"getInitialState\",\n    value: function getInitialState() {\n      if (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n        return this._initialState;\n      }\n\n      var initialState = {};\n      var slotsAreManaged = this.slotsAreManaged(); // Initialize properties\n\n      var props = this.getProperties();\n\n      for (var propName in props) {\n        // eslint-disable-line\n        var propType = props[propName].type;\n        var propDefaultValue = props[propName].defaultValue;\n\n        if (propType === Boolean) {\n          initialState[propName] = false;\n\n          if (propDefaultValue !== undefined) {\n            console.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n          }\n        } else if (props[propName].multiple) {\n          initialState[propName] = [];\n        } else if (propType === Object) {\n          initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n        } else if (propType === String) {\n          initialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n        } else {\n          initialState[propName] = propDefaultValue;\n        }\n      } // Initialize slots\n\n\n      if (slotsAreManaged) {\n        var slots = this.getSlots();\n\n        for (var _i = 0, _Object$entries = Object.entries(slots); _i < _Object$entries.length; _i++) {\n          var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n              slotName = _Object$entries$_i[0],\n              slotData = _Object$entries$_i[1];\n\n          // eslint-disable-line\n          var propertyName = slotData.propertyName || slotName;\n          initialState[propertyName] = [];\n        }\n      }\n\n      this._initialState = initialState;\n      return initialState;\n    }\n    /**\n     * Only intended for use by UI5Element.js\n     * @protected\n     */\n\n  }, {\n    key: \"getPureTag\",\n    value:\n    /**\n     * Returns the tag of the UI5 Element without the scope\n     * @public\n     */\n    function getPureTag() {\n      return this.metadata.tag;\n    }\n    /**\n     * Returns the tag of the UI5 Element\n     * @public\n     */\n\n  }, {\n    key: \"getTag\",\n    value: function getTag() {\n      var pureTag = this.metadata.tag;\n      var suffix = getEffectiveScopingSuffixForTag(pureTag);\n\n      if (!suffix) {\n        return pureTag;\n      }\n\n      return \"\".concat(pureTag, \"-\").concat(suffix);\n    }\n    /**\n     * Used to get the tag we need to register for backwards compatibility\n     * @public\n     */\n\n  }, {\n    key: \"getAltTag\",\n    value: function getAltTag() {\n      var pureAltTag = this.metadata.altTag;\n\n      if (!pureAltTag) {\n        return;\n      }\n\n      var suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n\n      if (!suffix) {\n        return pureAltTag;\n      }\n\n      return \"\".concat(pureAltTag, \"-\").concat(suffix);\n    }\n    /**\n     * Determines whether a property should have an attribute counterpart\n     * @public\n     * @param propName\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"hasAttribute\",\n    value: function hasAttribute(propName) {\n      var propData = this.getProperties()[propName];\n      return propData.type !== Object && !propData.noAttribute && !propData.multiple;\n    }\n    /**\n     * Returns an array with the properties of the UI5 Element (in camelCase)\n     * @public\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"getPropertiesList\",\n    value: function getPropertiesList() {\n      return Object.keys(this.getProperties());\n    }\n    /**\n     * Returns an array with the attributes of the UI5 Element (in kebab-case)\n     * @public\n     * @returns {string[]}\n     */\n\n  }, {\n    key: \"getAttributesList\",\n    value: function getAttributesList() {\n      return this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n    }\n    /**\n     * Returns an object with key-value pairs of slots and their metadata definitions\n     * @public\n     */\n\n  }, {\n    key: \"getSlots\",\n    value: function getSlots() {\n      return this.metadata.slots || {};\n    }\n    /**\n     * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"canSlotText\",\n    value: function canSlotText() {\n      var defaultSlot = this.getSlots().default;\n      return defaultSlot && defaultSlot.type === Node;\n    }\n    /**\n     * Determines whether this UI5 Element supports any slots\n     * @public\n     */\n\n  }, {\n    key: \"hasSlots\",\n    value: function hasSlots() {\n      return !!Object.entries(this.getSlots()).length;\n    }\n    /**\n     * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n     * @public\n     */\n\n  }, {\n    key: \"hasIndividualSlots\",\n    value: function hasIndividualSlots() {\n      return this.slotsAreManaged() && Object.entries(this.getSlots()).some(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            _slotName = _ref2[0],\n            slotData = _ref2[1];\n\n        return slotData.individualSlots;\n      });\n    }\n    /**\n     * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n     * @public\n     */\n\n  }, {\n    key: \"slotsAreManaged\",\n    value: function slotsAreManaged() {\n      return !!this.metadata.managedSlots;\n    }\n    /**\n     * Determines whether this control supports F6 fast navigation\n     * @public\n     */\n\n  }, {\n    key: \"supportsF6FastNavigation\",\n    value: function supportsF6FastNavigation() {\n      return !!this.metadata.fastNavigation;\n    }\n    /**\n     * Returns an object with key-value pairs of properties and their metadata definitions\n     * @public\n     */\n\n  }, {\n    key: \"getProperties\",\n    value: function getProperties() {\n      return this.metadata.properties || {};\n    }\n    /**\n     * Returns an object with key-value pairs of events and their metadata definitions\n     * @public\n     */\n\n  }, {\n    key: \"getEvents\",\n    value: function getEvents() {\n      return this.metadata.events || {};\n    }\n    /**\n     * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isLanguageAware\",\n    value: function isLanguageAware() {\n      return !!this.metadata.languageAware;\n    }\n    /**\n     * Determines whether this UI5 Element has any theme dependant carachteristics.\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"isThemeAware\",\n    value: function isThemeAware() {\n      return !!this.metadata.themeAware;\n    }\n    /**\n     * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n     * and determines whether this should cause and invalidation\n     *\n     * @param slotName the name of the slot in which a child was changed\n     * @param type the type of change in the child: \"property\" or \"slot\"\n     * @param name the name of the property/slot that changed\n     * @returns {boolean}\n     */\n\n  }, {\n    key: \"shouldInvalidateOnChildChange\",\n    value: function shouldInvalidateOnChildChange(slotName, type, name) {\n      var config = this.getSlots()[slotName].invalidateOnChildChange; // invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\n      if (config === undefined) {\n        return false;\n      } // The simple format was used: invalidateOnChildChange: true/false;\n\n\n      if (typeof config === \"boolean\") {\n        return config;\n      } // The complex format was used: invalidateOnChildChange: { properties, slots }\n\n\n      if (typeof config === \"object\") {\n        // A property was changed\n        if (type === \"property\") {\n          // The config object does not have a properties field\n          if (config.properties === undefined) {\n            return false;\n          } // The config object has the short format: properties: true/false\n\n\n          if (typeof config.properties === \"boolean\") {\n            return config.properties;\n          } // The config object has the complex format: properties: [...]\n\n\n          if (Array.isArray(config.properties)) {\n            return config.properties.includes(name);\n          }\n\n          throw new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n        } // A slot was changed\n\n\n        if (type === \"slot\") {\n          // The config object does not have a slots field\n          if (config.slots === undefined) {\n            return false;\n          } // The config object has the short format: slots: true/false\n\n\n          if (typeof config.slots === \"boolean\") {\n            return config.slots;\n          } // The config object has the complex format: slots: [...]\n\n\n          if (Array.isArray(config.slots)) {\n            return config.slots.includes(name);\n          }\n\n          throw new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n        }\n      }\n\n      throw new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n    }\n  }], [{\n    key: \"validatePropertyValue\",\n    value: function validatePropertyValue(value, propData) {\n      var isMultiple = propData.multiple;\n\n      if (isMultiple) {\n        return value.map(function (propValue) {\n          return validateSingleProperty(propValue, propData);\n        });\n      }\n\n      return validateSingleProperty(value, propData);\n    }\n    /**\n     * Only intended for use by UI5Element.js\n     * @protected\n     */\n\n  }, {\n    key: \"validateSlotValue\",\n    value: function validateSlotValue(value, slotData) {\n      return validateSingleSlot(value, slotData);\n    }\n  }]);\n\n  return UI5ElementMetadata;\n}();\n\nvar validateSingleProperty = function validateSingleProperty(value, propData) {\n  var propertyType = propData.type;\n\n  if (propertyType === Boolean) {\n    return typeof value === \"boolean\" ? value : false;\n  }\n\n  if (propertyType === String) {\n    return typeof value === \"string\" || typeof value === \"undefined\" || value === null ? value : value.toString();\n  }\n\n  if (propertyType === Object) {\n    return typeof value === \"object\" ? value : propData.defaultValue;\n  }\n\n  if (isDescendantOf(propertyType, DataType)) {\n    return propertyType.isValid(value) ? value : propData.defaultValue;\n  }\n};\n\nvar validateSingleSlot = function validateSingleSlot(value, slotData) {\n  value && getSlottedElements(value).forEach(function (el) {\n    if (!(el instanceof slotData.type)) {\n      throw new Error(\"\".concat(el, \" is not of type \").concat(slotData.type));\n    }\n  });\n  return value;\n};\n\nexport default UI5ElementMetadata;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/UI5ElementMetadata.js"],"names":["DataType","isDescendantOf","camelToKebabCase","getSlottedElements","getEffectiveScopingSuffixForTag","UI5ElementMetadata","metadata","Object","prototype","hasOwnProperty","call","_initialState","initialState","slotsAreManaged","props","getProperties","propName","propType","type","propDefaultValue","defaultValue","Boolean","undefined","console","warn","multiple","String","slots","getSlots","entries","slotName","slotData","propertyName","tag","pureTag","suffix","pureAltTag","altTag","propData","noAttribute","keys","getPropertiesList","filter","hasAttribute","map","defaultSlot","default","Node","length","some","_slotName","individualSlots","managedSlots","fastNavigation","properties","events","languageAware","themeAware","name","config","invalidateOnChildChange","Array","isArray","includes","Error","value","isMultiple","propValue","validateSingleProperty","validateSingleSlot","propertyType","toString","isValid","forEach","el"],"mappings":"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","sourcesContent":["import DataType from \"./types/DataType.js\";\nimport isDescendantOf from \"./util/isDescendantOf.js\";\nimport { camelToKebabCase } from \"./util/StringHelper.js\";\nimport { getSlottedElements } from \"./util/SlotsHelper.js\";\nimport { getEffectiveScopingSuffixForTag } from \"./CustomElementsScope.js\";\n\n/**\n *\n * @class\n * @public\n */\nclass UI5ElementMetadata {\n\tconstructor(metadata) {\n\t\tthis.metadata = metadata;\n\t}\n\n\tgetInitialState() {\n\t\tif (Object.prototype.hasOwnProperty.call(this, \"_initialState\")) {\n\t\t\treturn this._initialState;\n\t\t}\n\n\t\tconst initialState = {};\n\t\tconst slotsAreManaged = this.slotsAreManaged();\n\n\t\t// Initialize properties\n\t\tconst props = this.getProperties();\n\t\tfor (const propName in props) { // eslint-disable-line\n\t\t\tconst propType = props[propName].type;\n\t\t\tconst propDefaultValue = props[propName].defaultValue;\n\n\t\t\tif (propType === Boolean) {\n\t\t\t\tinitialState[propName] = false;\n\n\t\t\t\tif (propDefaultValue !== undefined) {\n\t\t\t\t\tconsole.warn(\"The 'defaultValue' metadata key is ignored for all booleans properties, they would be initialized with 'false' by default\"); // eslint-disable-line\n\t\t\t\t}\n\t\t\t} else if (props[propName].multiple) {\n\t\t\t\tinitialState[propName] = [];\n\t\t\t} else if (propType === Object) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : {};\n\t\t\t} else if (propType === String) {\n\t\t\t\tinitialState[propName] = \"defaultValue\" in props[propName] ? props[propName].defaultValue : \"\";\n\t\t\t} else {\n\t\t\t\tinitialState[propName] = propDefaultValue;\n\t\t\t}\n\t\t}\n\n\t\t// Initialize slots\n\t\tif (slotsAreManaged) {\n\t\t\tconst slots = this.getSlots();\n\t\t\tfor (const [slotName, slotData] of Object.entries(slots)) { // eslint-disable-line\n\t\t\t\tconst propertyName = slotData.propertyName || slotName;\n\t\t\t\tinitialState[propertyName] = [];\n\t\t\t}\n\t\t}\n\n\t\tthis._initialState = initialState;\n\t\treturn initialState;\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validatePropertyValue(value, propData) {\n\t\tconst isMultiple = propData.multiple;\n\t\tif (isMultiple) {\n\t\t\treturn value.map(propValue => validateSingleProperty(propValue, propData));\n\t\t}\n\t\treturn validateSingleProperty(value, propData);\n\t}\n\n\t/**\n\t * Only intended for use by UI5Element.js\n\t * @protected\n\t */\n\tstatic validateSlotValue(value, slotData) {\n\t\treturn validateSingleSlot(value, slotData);\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element without the scope\n\t * @public\n\t */\n\tgetPureTag() {\n\t\treturn this.metadata.tag;\n\t}\n\n\t/**\n\t * Returns the tag of the UI5 Element\n\t * @public\n\t */\n\tgetTag() {\n\t\tconst pureTag = this.metadata.tag;\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureTag);\n\t\tif (!suffix) {\n\t\t\treturn pureTag;\n\t\t}\n\n\t\treturn `${pureTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Used to get the tag we need to register for backwards compatibility\n\t * @public\n\t */\n\tgetAltTag() {\n\t\tconst pureAltTag = this.metadata.altTag;\n\t\tif (!pureAltTag) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst suffix = getEffectiveScopingSuffixForTag(pureAltTag);\n\t\tif (!suffix) {\n\t\t\treturn pureAltTag;\n\t\t}\n\n\t\treturn `${pureAltTag}-${suffix}`;\n\t}\n\n\t/**\n\t * Determines whether a property should have an attribute counterpart\n\t * @public\n\t * @param propName\n\t * @returns {boolean}\n\t */\n\thasAttribute(propName) {\n\t\tconst propData = this.getProperties()[propName];\n\t\treturn propData.type !== Object && !propData.noAttribute && !propData.multiple;\n\t}\n\n\t/**\n\t * Returns an array with the properties of the UI5 Element (in camelCase)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetPropertiesList() {\n\t\treturn Object.keys(this.getProperties());\n\t}\n\n\t/**\n\t * Returns an array with the attributes of the UI5 Element (in kebab-case)\n\t * @public\n\t * @returns {string[]}\n\t */\n\tgetAttributesList() {\n\t\treturn this.getPropertiesList().filter(this.hasAttribute, this).map(camelToKebabCase);\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of slots and their metadata definitions\n\t * @public\n\t */\n\tgetSlots() {\n\t\treturn this.metadata.slots || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has a default slot of type Node, therefore can slot text\n\t * @returns {boolean}\n\t */\n\tcanSlotText() {\n\t\tconst defaultSlot = this.getSlots().default;\n\t\treturn defaultSlot && defaultSlot.type === Node;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots\n\t * @public\n\t */\n\thasSlots() {\n\t\treturn !!Object.entries(this.getSlots()).length;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element supports any slots with \"individualSlots: true\"\n\t * @public\n\t */\n\thasIndividualSlots() {\n\t\treturn this.slotsAreManaged() && Object.entries(this.getSlots()).some(([_slotName, slotData]) => slotData.individualSlots);\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element needs to invalidate if children are added/removed/changed\n\t * @public\n\t */\n\tslotsAreManaged() {\n\t\treturn !!this.metadata.managedSlots;\n\t}\n\n\t/**\n\t * Determines whether this control supports F6 fast navigation\n\t * @public\n\t */\n\tsupportsF6FastNavigation() {\n\t\treturn !!this.metadata.fastNavigation;\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of properties and their metadata definitions\n\t * @public\n\t */\n\tgetProperties() {\n\t\treturn this.metadata.properties || {};\n\t}\n\n\t/**\n\t * Returns an object with key-value pairs of events and their metadata definitions\n\t * @public\n\t */\n\tgetEvents() {\n\t\treturn this.metadata.events || {};\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any translatable texts (needs to be invalidated upon language change)\n\t * @returns {boolean}\n\t */\n\tisLanguageAware() {\n\t\treturn !!this.metadata.languageAware;\n\t}\n\n\t/**\n\t * Determines whether this UI5 Element has any theme dependant carachteristics.\n\t * @returns {boolean}\n\t */\n\t isThemeAware() {\n\t\treturn !!this.metadata.themeAware;\n\t}\n\n\t/**\n\t * Matches a changed entity (property/slot) with the given name against the \"invalidateOnChildChange\" configuration\n\t * and determines whether this should cause and invalidation\n\t *\n\t * @param slotName the name of the slot in which a child was changed\n\t * @param type the type of change in the child: \"property\" or \"slot\"\n\t * @param name the name of the property/slot that changed\n\t * @returns {boolean}\n\t */\n\tshouldInvalidateOnChildChange(slotName, type, name) {\n\t\tconst config = this.getSlots()[slotName].invalidateOnChildChange;\n\n\t\t// invalidateOnChildChange was not set in the slot metadata - by default child changes do not affect the component\n\t\tif (config === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// The simple format was used: invalidateOnChildChange: true/false;\n\t\tif (typeof config === \"boolean\") {\n\t\t\treturn config;\n\t\t}\n\n\t\t// The complex format was used: invalidateOnChildChange: { properties, slots }\n\t\tif (typeof config === \"object\") {\n\t\t\t// A property was changed\n\t\t\tif (type === \"property\") {\n\t\t\t\t// The config object does not have a properties field\n\t\t\t\tif (config.properties === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: properties: true/false\n\t\t\t\tif (typeof config.properties === \"boolean\") {\n\t\t\t\t\treturn config.properties;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: properties: [...]\n\t\t\t\tif (Array.isArray(config.properties)) {\n\t\t\t\t\treturn config.properties.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.properties: boolean or array is expected\");\n\t\t\t}\n\n\t\t\t// A slot was changed\n\t\t\tif (type === \"slot\") {\n\t\t\t\t// The config object does not have a slots field\n\t\t\t\tif (config.slots === undefined) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the short format: slots: true/false\n\t\t\t\tif (typeof config.slots === \"boolean\") {\n\t\t\t\t\treturn config.slots;\n\t\t\t\t}\n\n\t\t\t\t// The config object has the complex format: slots: [...]\n\t\t\t\tif (Array.isArray(config.slots)) {\n\t\t\t\t\treturn config.slots.includes(name);\n\t\t\t\t}\n\n\t\t\t\tthrow new Error(\"Wrong format for invalidateOnChildChange.slots: boolean or array is expected\");\n\t\t\t}\n\t\t}\n\n\t\tthrow new Error(\"Wrong format for invalidateOnChildChange: boolean or object is expected\");\n\t}\n}\n\nconst validateSingleProperty = (value, propData) => {\n\tconst propertyType = propData.type;\n\n\tif (propertyType === Boolean) {\n\t\treturn typeof value === \"boolean\" ? value : false;\n\t}\n\tif (propertyType === String) {\n\t\treturn (typeof value === \"string\" || typeof value === \"undefined\" || value === null) ? value : value.toString();\n\t}\n\tif (propertyType === Object) {\n\t\treturn typeof value === \"object\" ? value : propData.defaultValue;\n\t}\n\tif (isDescendantOf(propertyType, DataType)) {\n\t\treturn propertyType.isValid(value) ? value : propData.defaultValue;\n\t}\n};\n\nconst validateSingleSlot = (value, slotData) => {\n\tvalue && getSlottedElements(value).forEach(el => {\n\t\tif (!(el instanceof slotData.type)) {\n\t\t\tthrow new Error(`${el} is not of type ${slotData.type}`);\n\t\t}\n\t});\n\n\treturn value;\n};\n\nexport default UI5ElementMetadata;\n"]},"metadata":{},"sourceType":"module"}