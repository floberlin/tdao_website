{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport { createUseStyles } from 'react-jss';\nimport { useConsolidatedRef, useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/dist/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { SHOW_MORE } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';\nimport { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';\nimport React, { useRef, useState, useCallback, useEffect, forwardRef, useMemo, cloneElement, useLayoutEffect, createRef } from 'react';\nimport '@ui5/webcomponents-icons/dist/overflow';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';\nimport { Popover } from '@ui5/webcomponents-react/dist/Popover';\nimport { ToggleButton } from '@ui5/webcomponents-react/dist/ToggleButton';\nimport { createPortal } from 'react-dom';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\n\nvar stopPropagation = function stopPropagation(e) {\n  var _e$stopImmediatePropa;\n\n  e.stopPropagation();\n  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);\n};\n\nvar OverflowPopover = function OverflowPopover(props) {\n  var lastVisibleIndex = props.lastVisibleIndex,\n      contentClass = props.contentClass,\n      children = props.children;\n  var popoverRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var handleToggleButtonClick = useCallback(function (e) {\n    e.stopPropagation();\n\n    if (popoverRef.current) {\n      if (!pressed) {\n        popoverRef.current.showAt(e.target);\n        setPressed(true);\n      } else {\n        popoverRef.current.close();\n      }\n    }\n  }, [pressed]);\n  useEffect(function () {\n    return function () {\n      if (popoverRef.current) {\n        popoverRef.current.close();\n      }\n    };\n  }, []);\n  var handleClose = useCallback(function (e) {\n    stopPropagation(e);\n    setPressed(false);\n  }, [setPressed]);\n  var renderChildren = useCallback(function () {\n    return React.Children.toArray((children === null || children === void 0 ? void 0 : children.type) === React.Fragment ? children.props.children : children).map(function (item, index) {\n      if (index > lastVisibleIndex) {\n        if (item.type.displayName === 'ToolbarSeparator') {\n          return /*#__PURE__*/React.cloneElement(item, {\n            style: {\n              height: '0.0625rem',\n              margin: '0.375rem 0.1875rem',\n              width: '100%'\n            }\n          });\n        }\n\n        return item;\n      }\n\n      return null;\n    });\n  }, [children, lastVisibleIndex]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToggleButton, {\n    design: ButtonDesign.Transparent,\n    icon: \"overflow\",\n    onClick: handleToggleButtonClick,\n    pressed: pressed\n  }), /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popover, {\n    placementType: PopoverPlacementType.Bottom,\n    ref: popoverRef,\n    onAfterClose: handleClose\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: contentClass\n  }, renderChildren())), document.body));\n};\n\nvar styles = {\n  outerContainer: {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: CssSizeVariables.sapWcrToolbarHeight,\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: \"solid 0.0625rem \".concat(ThemingParameters.sapGroup_TitleBorderColor)\n  },\n  hasOverflow: {\n    '& $toolbar': {\n      maxWidth: 'calc(100% - 44px)'\n    }\n  },\n  clear: {\n    borderBottom: 'none'\n  },\n  active: {\n    cursor: 'pointer',\n    '&:active': {\n      backgroundColor: ThemingParameters.sapActiveColor\n    },\n    '&:hover': {\n      backgroundColor: ThemingParameters.sapList_Hover_Background\n    }\n  },\n  info: {\n    // This color is most similar to darken(@sapUiBaseColor, 10)\n    backgroundColor: ThemingParameters.sapList_HeaderBorderColor,\n    '&$active': {\n      backgroundColor: ThemingParameters.sapInfobar_Active_Background,\n      '&:active': {\n        backgroundColor: \"\".concat(ThemingParameters.sapInfobar_Active_Background)\n      },\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapInfobar_Hover_Background\n      }\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapBackgroundColor\n  },\n  transparent: {\n    backgroundColor: ThemingParameters.sapToolbar_Background\n  },\n  toolbar: {\n    width: '100%',\n    '& >:first-child:not(.spacer)': {\n      margin: '0 0.25rem 0 0'\n    },\n    '& >:last-child:not(.spacer)': {\n      margin: '0 0.5rem 0 0.25rem'\n    },\n    '& > *:not(first-child):not(last-child):not(.spacer)': {\n      margin: '0 0.25rem'\n    },\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '100%'\n  },\n  overflowButtonContainer: {\n    marginRight: '0.5rem'\n  },\n  popoverContent: {\n    maxWidth: '20rem',\n    padding: CssSizeVariables.sapWcrToolbarPopoverContentPadding,\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  childContainer: {\n    display: 'flex'\n  }\n};\nvar useStyles = createUseStyles(styles, {\n  name: 'Toolbar'\n});\n/**\n * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.\n *\n * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.\n * It can be accessed by the user through the overflow button that opens it in a popover.\n */\n\nvar Toolbar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      toolbarStyle = props.toolbarStyle,\n      design = props.design,\n      active = props.active,\n      style = props.style,\n      tooltip = props.tooltip,\n      className = props.className,\n      onClick = props.onClick,\n      slot = props.slot;\n  var classes = useStyles();\n  var outerContainer = useConsolidatedRef(ref);\n  var controlMetaData = useRef([]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastVisibleIndex = _useState2[0],\n      setLastVisibleIndex = _useState2[1];\n\n  var passThroughProps = usePassThroughHtmlProps(props, ['onClick']);\n  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  var toolbarClasses = StyleClassHelper.of(classes.outerContainer);\n\n  if (toolbarStyle === ToolbarStyle.Clear) {\n    toolbarClasses.put(classes.clear);\n  }\n\n  if (active) {\n    toolbarClasses.put(classes.active);\n  }\n\n  switch (design) {\n    case ToolbarDesign.Solid:\n      toolbarClasses.put(classes.solid);\n      break;\n\n    case ToolbarDesign.Transparent:\n      toolbarClasses.put(classes.transparent);\n      break;\n\n    case ToolbarDesign.Info:\n      toolbarClasses.put(classes.info);\n      break;\n  }\n\n  toolbarClasses.putIfPresent(className);\n  var childrenWithRef = useMemo(function () {\n    controlMetaData.current = [];\n    var refactoredChildren = React.Children.toArray(children).map(function (child, index) {\n      if (child.type === React.Fragment) {\n        return child.props.children.filter(Boolean).map(function (item, itemIndex) {\n          return /*#__PURE__*/cloneElement(item, {\n            key: \".\".concat(index, \":\").concat(itemIndex)\n          });\n        });\n      }\n\n      return child;\n    });\n    return refactoredChildren.flat().map(function (item, index) {\n      var _item$type;\n\n      var itemRef = /*#__PURE__*/createRef();\n      controlMetaData.current.push({\n        ref: itemRef\n      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      if ((item === null || item === void 0 ? void 0 : (_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.displayName) === 'ToolbarSpacer') {\n        return item;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: itemRef,\n        key: index,\n        className: classes.childContainer,\n        \"data-component-name\": \"ToolbarChildContainer\"\n      }, item);\n    });\n  }, [children, controlMetaData, classes.childContainer]);\n  var overflowNeeded = (lastVisibleIndex || lastVisibleIndex === 0) && React.Children.count(childrenWithRef) !== lastVisibleIndex + 1;\n  toolbarClasses.putIfPresent(overflowNeeded && classes.hasOverflow);\n  var calculateVisibleItems = useCallback(function () {\n    var OVERFLOW_BUTTON_WIDTH = 32 + 8;\n    requestAnimationFrame(function () {\n      if (!outerContainer.current) return;\n      var availableWidth = outerContainer.current.getBoundingClientRect().width;\n      var consumedWidth = 0;\n      var lastIndex = null;\n\n      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {\n        lastIndex = -1;\n      } else {\n        controlMetaData.current.forEach(function (item, index) {\n          var currentMeta = controlMetaData.current[index];\n\n          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {\n            var nextWidth = currentMeta.ref.current.getBoundingClientRect().width;\n            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px\n\n            if (index === controlMetaData.current.length - 1) {\n              if (consumedWidth + nextWidth <= availableWidth - 8) {\n                lastIndex = index;\n              }\n            } else {\n              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index;\n              }\n\n              if (consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH && consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index - 1;\n              }\n            }\n\n            consumedWidth += nextWidth;\n          }\n        });\n      }\n\n      setLastVisibleIndex(lastIndex);\n    });\n  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);\n  var observer = useRef(new ResizeObserver(calculateVisibleItems));\n  useEffect(function () {\n    if (outerContainer.current) {\n      observer.current.observe(outerContainer.current);\n    }\n\n    return function () {\n      observer.current.disconnect();\n    };\n  }, [outerContainer.current]);\n  useLayoutEffect(function () {\n    calculateVisibleItems();\n  }, [calculateVisibleItems]);\n  var handleToolbarClick = useCallback(function (e) {\n    if (active && typeof onClick === 'function') {\n      onClick(enrichEventWithDetails(e));\n    }\n  }, [onClick, active]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    title: tooltip,\n    style: style,\n    className: toolbarClasses.className,\n    ref: outerContainer,\n    slot: slot,\n    onClick: handleToolbarClick\n  }, passThroughProps), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    \"data-component-name\": \"ToolbarContent\"\n  }, overflowNeeded && React.Children.map(childrenWithRef, function (item, index) {\n    if (index >= lastVisibleIndex + 1) {\n      return /*#__PURE__*/React.cloneElement(item, {\n        style: {\n          visibility: 'hidden'\n        }\n      });\n    }\n\n    return item;\n  }), !overflowNeeded && childrenWithRef), overflowNeeded && /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.overflowButtonContainer,\n    title: i18nBundle.getText(SHOW_MORE),\n    \"data-component-name\": \"ToolbarOverflowButtonContainer\"\n  }, /*#__PURE__*/React.createElement(OverflowPopover, {\n    lastVisibleIndex: lastVisibleIndex,\n    contentClass: classes.popoverContent\n  }, React.Children.toArray(children).map(function (child) {\n    if (child.type === React.Fragment) {\n      return child.props.children;\n    }\n\n    return child;\n  }))));\n});\nToolbar.defaultProps = {\n  toolbarStyle: ToolbarStyle.Standard,\n  design: ToolbarDesign.Auto,\n  active: false\n};\nToolbar.displayName = 'Toolbar';\nexport { Toolbar };","map":{"version":3,"sources":["../src/internal/stopPropagation.ts","../src/components/Toolbar/OverflowPopover.tsx","../src/components/Toolbar/Toolbar.jss.ts","../src/components/Toolbar/index.tsx"],"names":["stopPropagation","e","OverflowPopover","lastVisibleIndex","contentClass","children","props","popoverRef","useRef","pressed","setPressed","useState","handleToggleButtonClick","useCallback","useEffect","handleClose","renderChildren","React","index","item","style","height","margin","width","ButtonDesign","createPortal","PopoverPlacementType","document","styles","outerContainer","boxSizing","CssSizeVariables","position","overflow","display","justifyContent","alignItems","borderBottom","ThemingParameters","hasOverflow","maxWidth","clear","active","cursor","backgroundColor","sapActiveColor","sapList_Hover_Background","info","sapInfobar_Hover_Background","solid","sapBackgroundColor","transparent","sapToolbar_Background","toolbar","overflowButtonContainer","marginRight","popoverContent","padding","flexDirection","childContainer","useStyles","createUseStyles","name","Toolbar","forwardRef","toolbarStyle","design","tooltip","className","onClick","slot","classes","useConsolidatedRef","controlMetaData","setLastVisibleIndex","passThroughProps","usePassThroughHtmlProps","i18nBundle","useI18nBundle","toolbarClasses","StyleClassHelper","ToolbarStyle","ToolbarDesign","childrenWithRef","useMemo","refactoredChildren","child","cloneElement","key","itemRef","createRef","ref","overflowNeeded","calculateVisibleItems","OVERFLOW_BUTTON_WIDTH","requestAnimationFrame","availableWidth","consumedWidth","lastIndex","currentMeta","nextWidth","observer","useLayoutEffect","handleToolbarClick","enrichEventWithDetails","visibility"],"mappings":"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","sourcesContent":["export const stopPropagation = (e) => {\n  e.stopPropagation();\n  e.stopImmediatePropagation?.();\n};\n","import '@ui5/webcomponents-icons/dist/overflow';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';\nimport { Popover } from '@ui5/webcomponents-react/dist/Popover';\nimport { ToggleButton } from '@ui5/webcomponents-react/dist/ToggleButton';\nimport React, { FC, ReactElement, ReactNode, useCallback, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { Ui5PopoverDomRef } from '@ui5/webcomponents-react/interfaces/Ui5PopoverDomRef';\nimport { stopPropagation } from '../../internal/stopPropagation';\n\ninterface OverflowPopoverProps {\n  lastVisibleIndex: number;\n  contentClass: string;\n  children: ReactNode;\n}\n\nexport const OverflowPopover: FC<OverflowPopoverProps> = (props: OverflowPopoverProps) => {\n  const { lastVisibleIndex, contentClass, children } = props;\n  const popoverRef = useRef<Ui5PopoverDomRef>();\n  const [pressed, setPressed] = useState(false);\n\n  const handleToggleButtonClick = useCallback(\n    (e) => {\n      e.stopPropagation();\n      if (popoverRef.current) {\n        if (!pressed) {\n          popoverRef.current.showAt(e.target);\n          setPressed(true);\n        } else {\n          popoverRef.current.close();\n        }\n      }\n    },\n    [pressed]\n  );\n\n  useEffect(() => {\n    return () => {\n      if (popoverRef.current) {\n        popoverRef.current.close();\n      }\n    };\n  }, []);\n\n  const handleClose = useCallback(\n    (e) => {\n      stopPropagation(e);\n      setPressed(false);\n    },\n    [setPressed]\n  );\n\n  const renderChildren = useCallback(() => {\n    return React.Children.toArray(\n      (children as ReactElement)?.type === React.Fragment ? (children as ReactElement).props.children : children\n    ).map((item: ReactElement<any>, index) => {\n      if (index > lastVisibleIndex) {\n        if ((item.type as any).displayName === 'ToolbarSeparator') {\n          return React.cloneElement(item, {\n            style: {\n              height: '0.0625rem',\n              margin: '0.375rem 0.1875rem',\n              width: '100%'\n            }\n          });\n        }\n        return item;\n      }\n      return null;\n    });\n  }, [children, lastVisibleIndex]);\n\n  return (\n    <>\n      <ToggleButton\n        design={ButtonDesign.Transparent}\n        icon=\"overflow\"\n        onClick={handleToggleButtonClick}\n        pressed={pressed}\n      />\n      {createPortal(\n        <Popover placementType={PopoverPlacementType.Bottom} ref={popoverRef} onAfterClose={handleClose}>\n          <div className={contentClass}>{renderChildren()}</div>\n        </Popover>,\n        document.body\n      )}\n    </>\n  );\n};\n","import { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\n\nexport const styles = {\n  outerContainer: {\n    boxSizing: 'border-box',\n    width: '100%',\n    height: CssSizeVariables.sapWcrToolbarHeight,\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: `solid 0.0625rem ${ThemingParameters.sapGroup_TitleBorderColor}`\n  },\n  hasOverflow: {\n    '& $toolbar': {\n      maxWidth: 'calc(100% - 44px)'\n    }\n  },\n  clear: {\n    borderBottom: 'none'\n  },\n  active: {\n    cursor: 'pointer',\n    '&:active': {\n      backgroundColor: ThemingParameters.sapActiveColor\n    },\n    '&:hover': {\n      backgroundColor: ThemingParameters.sapList_Hover_Background\n    }\n  },\n  info: {\n    // This color is most similar to darken(@sapUiBaseColor, 10)\n    backgroundColor: ThemingParameters.sapList_HeaderBorderColor,\n    '&$active': {\n      backgroundColor: ThemingParameters.sapInfobar_Active_Background,\n      '&:active': {\n        backgroundColor: `${ThemingParameters.sapInfobar_Active_Background}`\n      },\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapInfobar_Hover_Background\n      }\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapBackgroundColor\n  },\n  transparent: {\n    backgroundColor: ThemingParameters.sapToolbar_Background\n  },\n  toolbar: {\n    width: '100%',\n    '& >:first-child:not(.spacer)': {\n      margin: '0 0.25rem 0 0'\n    },\n    '& >:last-child:not(.spacer)': {\n      margin: '0 0.5rem 0 0.25rem'\n    },\n    '& > *:not(first-child):not(last-child):not(.spacer)': {\n      margin: '0 0.25rem'\n    },\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '100%'\n  },\n  overflowButtonContainer: {\n    marginRight: '0.5rem'\n  },\n  popoverContent: {\n    maxWidth: '20rem',\n    padding: CssSizeVariables.sapWcrToolbarPopoverContentPadding,\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  childContainer: { display: 'flex' }\n};\n","import { createUseStyles } from 'react-jss';\nimport { useConsolidatedRef, useI18nBundle } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { StyleClassHelper } from '@ui5/webcomponents-react-base/dist/StyleClassHelper';\nimport { usePassThroughHtmlProps } from '@ui5/webcomponents-react-base/dist/usePassThroughHtmlProps';\nimport { enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { SHOW_MORE } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';\nimport { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';\nimport React, {\n  cloneElement,\n  createRef,\n  forwardRef,\n  ReactElement,\n  ReactFragment,\n  ReactNode,\n  ReactNodeArray,\n  Ref,\n  RefObject,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { OverflowPopover } from './OverflowPopover';\nimport { styles } from './Toolbar.jss';\n\nconst useStyles = createUseStyles(styles, { name: 'Toolbar' });\n\nexport interface ToolbarPropTypes extends Omit<CommonProps, 'onClick'> {\n  /**\n   * Defines the content of the `Toolbar`.\n   */\n  children?: ReactNode | ReactNodeArray | ReactFragment;\n  /**\n   * Defines the visual style of the `Toolbar`.<br />\n   * <b>Note:</b> The visual styles are theme-dependent.\n   */\n  toolbarStyle?: ToolbarStyle;\n  /**\n   * Defines the `Toolbar` design.<br />\n   * <b>Note:</b> Design settings are theme-dependent.\n   */\n  design?: ToolbarDesign;\n  /**\n   * Indicates that the whole `Toolbar` is clickable. The Press event is fired only if `active` is set to true.\n   */\n  active?: boolean;\n  /**\n   * Fired when the user clicks on the `Toolbar`, if the `active` prop is set to \"true\".\n   */\n  onClick?: (event: CustomEvent) => void;\n}\n\n/**\n * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.\n *\n * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.\n * It can be accessed by the user through the overflow button that opens it in a popover.\n */\nconst Toolbar = forwardRef((props: ToolbarPropTypes, ref: Ref<HTMLDivElement>) => {\n  const { children, toolbarStyle, design, active, style, tooltip, className, onClick, slot } = props;\n  const classes = useStyles();\n  const outerContainer: RefObject<HTMLDivElement> = useConsolidatedRef(ref);\n  const controlMetaData = useRef([]);\n  const [lastVisibleIndex, setLastVisibleIndex] = useState<number>(null);\n\n  const passThroughProps = usePassThroughHtmlProps(props, ['onClick']);\n\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  const toolbarClasses = StyleClassHelper.of(classes.outerContainer);\n  if (toolbarStyle === ToolbarStyle.Clear) {\n    toolbarClasses.put(classes.clear);\n  }\n  if (active) {\n    toolbarClasses.put(classes.active);\n  }\n  switch (design) {\n    case ToolbarDesign.Solid:\n      toolbarClasses.put(classes.solid);\n      break;\n    case ToolbarDesign.Transparent:\n      toolbarClasses.put(classes.transparent);\n      break;\n    case ToolbarDesign.Info:\n      toolbarClasses.put(classes.info);\n      break;\n    default:\n      break;\n  }\n  toolbarClasses.putIfPresent(className);\n\n  const childrenWithRef = useMemo(() => {\n    controlMetaData.current = [];\n\n    const refactoredChildren = React.Children.toArray(children).map((child, index) => {\n      if ((child as ReactElement).type === React.Fragment) {\n        return (child as ReactElement).props.children.filter(Boolean).map((item, itemIndex: number) => {\n          return cloneElement(item, { key: `.${index}:${itemIndex}` });\n        });\n      }\n      return child;\n    });\n\n    return refactoredChildren.flat().map((item: ReactElement, index) => {\n      const itemRef: RefObject<HTMLDivElement> = createRef();\n\n      controlMetaData.current.push({\n        ref: itemRef\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if ((item?.type as any)?.displayName === 'ToolbarSpacer') {\n        return item;\n      }\n      return (\n        <div ref={itemRef} key={index} className={classes.childContainer} data-component-name=\"ToolbarChildContainer\">\n          {item}\n        </div>\n      );\n    });\n  }, [children, controlMetaData, classes.childContainer]);\n\n  const overflowNeeded =\n    (lastVisibleIndex || lastVisibleIndex === 0) && React.Children.count(childrenWithRef) !== lastVisibleIndex + 1;\n\n  toolbarClasses.putIfPresent(overflowNeeded && classes.hasOverflow);\n\n  const calculateVisibleItems = useCallback(() => {\n    const OVERFLOW_BUTTON_WIDTH = 32 + 8;\n    requestAnimationFrame(() => {\n      if (!outerContainer.current) return;\n      const availableWidth = outerContainer.current.getBoundingClientRect().width;\n      let consumedWidth = 0;\n      let lastIndex = null;\n      let lastFitWidth = 0;\n\n      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {\n        lastIndex = -1;\n        lastFitWidth = 0;\n      } else {\n        controlMetaData.current.forEach((item, index) => {\n          const currentMeta = controlMetaData.current[index] as { ref: RefObject<HTMLElement> };\n          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {\n            let nextWidth = currentMeta.ref.current.getBoundingClientRect().width;\n            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px\n            if (index === controlMetaData.current.length - 1) {\n              if (consumedWidth + nextWidth <= availableWidth - 8) {\n                lastIndex = index;\n                lastFitWidth = consumedWidth + nextWidth;\n              }\n            } else {\n              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index;\n                lastFitWidth = consumedWidth + nextWidth;\n              }\n              if (\n                consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH &&\n                consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH\n              ) {\n                lastIndex = index - 1;\n                lastFitWidth = 0;\n              }\n            }\n            consumedWidth += nextWidth;\n          }\n        });\n      }\n      setLastVisibleIndex(lastIndex);\n    });\n  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);\n\n  const observer = useRef(new ResizeObserver(calculateVisibleItems));\n\n  useEffect(() => {\n    if (outerContainer.current) {\n      observer.current.observe(outerContainer.current);\n    }\n    return () => {\n      observer.current.disconnect();\n    };\n  }, [outerContainer.current]);\n\n  useLayoutEffect(() => {\n    calculateVisibleItems();\n  }, [calculateVisibleItems]);\n\n  const handleToolbarClick = useCallback(\n    (e) => {\n      if (active && typeof onClick === 'function') {\n        onClick(enrichEventWithDetails(e));\n      }\n    },\n    [onClick, active]\n  );\n\n  return (\n    <div\n      title={tooltip}\n      style={style}\n      className={toolbarClasses.className}\n      ref={outerContainer}\n      slot={slot}\n      onClick={handleToolbarClick}\n      {...passThroughProps}\n    >\n      <div className={classes.toolbar} data-component-name=\"ToolbarContent\">\n        {overflowNeeded &&\n          React.Children.map(childrenWithRef, (item, index) => {\n            if (index >= lastVisibleIndex + 1) {\n              return React.cloneElement(item as ReactElement, { style: { visibility: 'hidden' } });\n            }\n            return item;\n          })}\n        {!overflowNeeded && childrenWithRef}\n      </div>\n      {overflowNeeded && (\n        <div\n          className={classes.overflowButtonContainer}\n          title={i18nBundle.getText(SHOW_MORE)}\n          data-component-name=\"ToolbarOverflowButtonContainer\"\n        >\n          <OverflowPopover lastVisibleIndex={lastVisibleIndex} contentClass={classes.popoverContent}>\n            {React.Children.toArray(children).map((child) => {\n              if ((child as ReactElement).type === React.Fragment) {\n                return (child as ReactElement).props.children;\n              }\n              return child;\n            })}\n          </OverflowPopover>\n        </div>\n      )}\n    </div>\n  );\n});\n\nToolbar.defaultProps = {\n  toolbarStyle: ToolbarStyle.Standard,\n  design: ToolbarDesign.Auto,\n  active: false\n};\n\nToolbar.displayName = 'Toolbar';\nexport { Toolbar };\n"]},"metadata":{},"sourceType":"module"}