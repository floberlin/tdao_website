{"ast":null,"code":"import InvisibleMessageMode from \"../types/InvisibleMessageMode.js\";\nimport getSingletonElementInstance from \"./getSingletonElementInstance.js\";\nimport { attachBoot } from \"../Boot.js\";\nlet politeSpan;\nlet assertiveSpan;\nattachBoot(() => {\n  if (politeSpan && assertiveSpan) {\n    return;\n  }\n\n  const styles = `position: absolute;\n\tclip: rect(1px,1px,1px,1px);\n\tuser-select: none;\n\tleft: -1000px;\n\ttop: -1000px;\n\tpointer-events: none;`;\n  politeSpan = document.createElement(\"span\");\n  assertiveSpan = document.createElement(\"span\");\n  politeSpan.classList.add(\"ui5-invisiblemessage-polite\");\n  assertiveSpan.classList.add(\"ui5-invisiblemessage-assertive\");\n  politeSpan.setAttribute(\"aria-live\", \"polite\");\n  assertiveSpan.setAttribute(\"aria-live\", \"assertive\");\n  politeSpan.setAttribute(\"role\", \"alert\");\n  assertiveSpan.setAttribute(\"role\", \"alert\");\n  politeSpan.style.cssText = styles;\n  assertiveSpan.style.cssText = styles;\n  getSingletonElementInstance(\"ui5-static-area\").appendChild(politeSpan);\n  getSingletonElementInstance(\"ui5-static-area\").appendChild(assertiveSpan);\n});\n/**\n * Inserts the string into the respective span, depending on the mode provided.\n *\n * @param {string} message String to be announced by the screen reader.\n * @param {sap.ui.core.InvisibleMessageMode} mode The mode to be inserted in the aria-live attribute.\n */\n\nconst announce = (message, mode) => {\n  // If no type is presented, fallback to polite announcement.\n  const span = mode === InvisibleMessageMode.Assertive ? assertiveSpan : politeSpan; // Set textContent to empty string in order to trigger screen reader's announcement.\n\n  span.textContent = \"\";\n  span.textContent = message;\n\n  if (mode !== InvisibleMessageMode.Assertive && mode !== InvisibleMessageMode.Polite) {\n    console.warn(`You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".`); // eslint-disable-line\n  }\n};\n\nexport default announce;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/util/InvisibleMessage.js"],"names":["InvisibleMessageMode","getSingletonElementInstance","attachBoot","politeSpan","assertiveSpan","styles","document","createElement","classList","add","setAttribute","style","cssText","appendChild","announce","message","mode","span","Assertive","textContent","Polite","console","warn"],"mappings":"AAAA,OAAOA,oBAAP,MAAiC,kCAAjC;AACA,OAAOC,2BAAP,MAAwC,kCAAxC;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,IAAIC,UAAJ;AACA,IAAIC,aAAJ;AAEAF,UAAU,CAAC,MAAM;AAChB,MAAIC,UAAU,IAAIC,aAAlB,EAAiC;AAChC;AACA;;AAED,QAAMC,MAAM,GAAI;AACjB;AACA;AACA;AACA;AACA,uBALC;AAOAF,EAAAA,UAAU,GAAGG,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAb;AACAH,EAAAA,aAAa,GAAGE,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAhB;AAEAJ,EAAAA,UAAU,CAACK,SAAX,CAAqBC,GAArB,CAAyB,6BAAzB;AACAL,EAAAA,aAAa,CAACI,SAAd,CAAwBC,GAAxB,CAA4B,gCAA5B;AAEAN,EAAAA,UAAU,CAACO,YAAX,CAAwB,WAAxB,EAAqC,QAArC;AACAN,EAAAA,aAAa,CAACM,YAAd,CAA2B,WAA3B,EAAwC,WAAxC;AAEAP,EAAAA,UAAU,CAACO,YAAX,CAAwB,MAAxB,EAAgC,OAAhC;AACAN,EAAAA,aAAa,CAACM,YAAd,CAA2B,MAA3B,EAAmC,OAAnC;AAEAP,EAAAA,UAAU,CAACQ,KAAX,CAAiBC,OAAjB,GAA2BP,MAA3B;AACAD,EAAAA,aAAa,CAACO,KAAd,CAAoBC,OAApB,GAA8BP,MAA9B;AAEAJ,EAAAA,2BAA2B,CAAC,iBAAD,CAA3B,CAA+CY,WAA/C,CAA2DV,UAA3D;AACAF,EAAAA,2BAA2B,CAAC,iBAAD,CAA3B,CAA+CY,WAA/C,CAA2DT,aAA3D;AACA,CA7BS,CAAV;AA+BA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMU,QAAQ,GAAG,CAACC,OAAD,EAAUC,IAAV,KAAmB;AACnC;AACA,QAAMC,IAAI,GAAGD,IAAI,KAAKhB,oBAAoB,CAACkB,SAA9B,GAA0Cd,aAA1C,GAA0DD,UAAvE,CAFmC,CAInC;;AACAc,EAAAA,IAAI,CAACE,WAAL,GAAmB,EAAnB;AACAF,EAAAA,IAAI,CAACE,WAAL,GAAmBJ,OAAnB;;AAEA,MAAIC,IAAI,KAAKhB,oBAAoB,CAACkB,SAA9B,IAA2CF,IAAI,KAAKhB,oBAAoB,CAACoB,MAA7E,EAAqF;AACpFC,IAAAA,OAAO,CAACC,IAAR,CAAc,0IAAd,EADoF,CACsE;AAC1J;AACD,CAXD;;AAaA,eAAeR,QAAf","sourcesContent":["import InvisibleMessageMode from \"../types/InvisibleMessageMode.js\";\nimport getSingletonElementInstance from \"./getSingletonElementInstance.js\";\nimport { attachBoot } from \"../Boot.js\";\n\nlet politeSpan;\nlet assertiveSpan;\n\nattachBoot(() => {\n\tif (politeSpan && assertiveSpan) {\n\t\treturn;\n\t}\n\n\tconst styles = `position: absolute;\n\tclip: rect(1px,1px,1px,1px);\n\tuser-select: none;\n\tleft: -1000px;\n\ttop: -1000px;\n\tpointer-events: none;`;\n\n\tpoliteSpan = document.createElement(\"span\");\n\tassertiveSpan = document.createElement(\"span\");\n\n\tpoliteSpan.classList.add(\"ui5-invisiblemessage-polite\");\n\tassertiveSpan.classList.add(\"ui5-invisiblemessage-assertive\");\n\n\tpoliteSpan.setAttribute(\"aria-live\", \"polite\");\n\tassertiveSpan.setAttribute(\"aria-live\", \"assertive\");\n\n\tpoliteSpan.setAttribute(\"role\", \"alert\");\n\tassertiveSpan.setAttribute(\"role\", \"alert\");\n\n\tpoliteSpan.style.cssText = styles;\n\tassertiveSpan.style.cssText = styles;\n\n\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(politeSpan);\n\tgetSingletonElementInstance(\"ui5-static-area\").appendChild(assertiveSpan);\n});\n\n/**\n * Inserts the string into the respective span, depending on the mode provided.\n *\n * @param {string} message String to be announced by the screen reader.\n * @param {sap.ui.core.InvisibleMessageMode} mode The mode to be inserted in the aria-live attribute.\n */\nconst announce = (message, mode) => {\n\t// If no type is presented, fallback to polite announcement.\n\tconst span = mode === InvisibleMessageMode.Assertive ? assertiveSpan : politeSpan;\n\n\t// Set textContent to empty string in order to trigger screen reader's announcement.\n\tspan.textContent = \"\";\n\tspan.textContent = message;\n\n\tif (mode !== InvisibleMessageMode.Assertive && mode !== InvisibleMessageMode.Polite) {\n\t\tconsole.warn(`You have entered an invalid mode. Valid values are: \"Polite\" and \"Assertive\". The framework will automatically set the mode to \"Polite\".`); // eslint-disable-line\n\t}\n};\n\nexport default announce;\n"]},"metadata":{},"sourceType":"module"}