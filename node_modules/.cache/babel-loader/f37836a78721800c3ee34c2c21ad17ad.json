{"ast":null,"code":"import { isDesktop } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ValueState from \"@ui5/webcomponents-base/dist/types/ValueState.js\";\nimport { getFeature } from \"@ui5/webcomponents-base/dist/FeaturesRegistry.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport { isSpace, isEnter } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport \"@ui5/webcomponents-icons/dist/accept.js\";\nimport Icon from \"./Icon.js\";\nimport Label from \"./Label.js\";\nimport WrappingType from \"./types/WrappingType.js\";\nimport { VALUE_STATE_ERROR, VALUE_STATE_WARNING, VALUE_STATE_SUCCESS } from \"./generated/i18n/i18n-defaults.js\"; // Template\n\nimport CheckBoxTemplate from \"./generated/templates/CheckBoxTemplate.lit.js\"; // Styles\n\nimport checkboxCss from \"./generated/themes/CheckBox.css.js\";\nlet isGlobalHandlerAttached = false;\nlet activeCb = null;\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-checkbox\",\n  languageAware: true,\n  properties:\n  /** @lends sap.ui.webcomponents.main.CheckBox.prototype */\n  {\n    /**\n     * Receives id(or many ids) of the elements that label the component\n     * @type {String}\n     * @defaultvalue \"\"\n     * @public\n     * @since 1.1.0\n     */\n    accessibleNameRef: {\n      type: String,\n      defaultValue: \"\"\n    },\n\n    /**\n     * Sets the accessible aria name of the component.\n     *\n     * @type {String}\n     * @public\n     * @defaultvalue \"\"\n     * @since 1.1.0\n     */\n    accessibleName: {\n      type: String\n    },\n\n    /**\n     * Defines whether the component is disabled.\n     * <br><br>\n     * <b>Note:</b> A disabled component is completely noninteractive.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    disabled: {\n      type: Boolean\n    },\n\n    /**\n     * Defines whether the component is read-only.\n     * <br><br>\n     * <b>Note:</b> A red-only component is not editable,\n     * but still provides visual feedback upon user interaction.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    readonly: {\n      type: Boolean\n    },\n\n    /**\n    * Defines whether the component is displayed as partially checked.\n    * <br><br>\n    * <b>Note:</b> The indeterminate state can be set only programatically and canâ€™t be achieved by user\n    * interaction and the resulting visual state depends on the values of the <code>indeterminate</code>\n    * and <code>checked</code> properties:\n    * <ul>\n    * <li> If the component is checked and indeterminate, it will be displayed as partially checked\n    * <li> If the component is checked and it is not indeterminate, it will be displayed as checked\n    * <li> If the component is not checked, it will be displayed as not checked regardless value of the indeterminate attribute\n    * </ul>\n    *\n    * @type {boolean}\n    * @defaultvalue false\n    * @public\n    * @since 1.0.0-rc.15\n    */\n    indeterminate: {\n      type: Boolean\n    },\n\n    /**\n     * Defines if the component is checked.\n     * <br><br>\n     * <b>Note:</b> The property can be changed with user interaction,\n     * either by cliking/tapping on the component, or by\n     * pressing the Enter or Space key.\n     *\n     * @type {boolean}\n     * @defaultvalue false\n     * @public\n     */\n    checked: {\n      type: Boolean\n    },\n\n    /**\n     * Defines the text of the component.\n     *\n     * @type {string}\n     * @defaultvalue \"\"\n     * @public\n     */\n    text: {\n      type: String\n    },\n\n    /**\n     * Defines the value state of the component.\n     *\n     * <br><br>\n     * <b>Note:</b>\n     *\n     * <ul>\n     * <li><code>Warning</code></li>\n     * <li><code>Error</code></li>\n     * <li><code>None</code>(default)</li>\n     * <li><code>Success</code></li>\n     * <li><code>Information</code></li>\n     * </ul>\n     *\n     * @type {ValueState}\n     * @defaultvalue \"None\"\n     * @public\n     */\n    valueState: {\n      type: ValueState,\n      defaultValue: ValueState.None\n    },\n\n    /**\n     * Defines whether the component text wraps when there is not enough space.\n     * <br><br>\n     * Available options are:\n     * <ul>\n     * <li><code>None</code> - The text will be truncated with an ellipsis.</li>\n     * <li><code>Normal</code> - The text will wrap. The words will not be broken based on hyphenation.</li>\n     * </ul>\n     *\n     * @type {WrappingType}\n     * @defaultvalue \"None\"\n     * @public\n     */\n    wrappingType: {\n      type: WrappingType,\n      defaultValue: WrappingType.None\n    },\n\n    /**\n     * Determines the name with which the component will be submitted in an HTML form.\n     *\n     * <br><br>\n     * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:\n     * <code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>\n     *\n     * <br><br>\n     * <b>Note:</b> When set, a native <code>input</code> HTML element\n     * will be created inside the component so that it can be submitted as\n     * part of an HTML form. Do not use this property unless you need to submit a form.\n     *\n     * @type {string}\n     * @defaultvalue \"\"\n     * @public\n     */\n    name: {\n      type: String\n    },\n\n    /**\n     * Defines the active state (pressed or not) of the component.\n     * @private\n     */\n    active: {\n      type: Boolean\n    }\n  },\n  events:\n  /** @lends sap.ui.webcomponents.main.CheckBox.prototype */\n  {\n    /**\n     * Fired when the component checked state changes.\n     *\n     * @public\n     * @event\n     */\n    change: {}\n  },\n  slots:\n  /** @lends sap.ui.webcomponents.main.CheckBox.prototype */\n  {\n    /**\n     * The slot is used to render native <code>input</code> HTML element within Light DOM to enable form submit,\n     * when <code>name</code> property is set.\n     * @type {HTMLElement[]}\n     * @slot\n     * @private\n     */\n    formSupport: {\n      type: HTMLElement\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * Allows the user to set a binary value, such as true/false or yes/no for an item.\n * <br><br>\n * The <code>ui5-checkbox</code> component consists of a box and a label that describes its purpose.\n * If it's checked, an indicator is displayed inside the box.\n * To check/uncheck the <code>ui5-checkbox</code>, the user has to click or tap the square\n * box or its label.\n * <br><br>\n * The <code>ui5-checkbox</code> component only has 2 states - checked and unchecked.\n * Clicking or tapping toggles the <code>ui5-checkbox</code> between checked and unchecked state.\n *\n * <h3>Usage</h3>\n *\n * You can define the checkbox text with via the <code>text</code> property. If the text exceeds the available width, it is truncated by default.\n * In case you prefer text to wrap, set the <code>wrappingType</code> property to \"Normal\".\n * The touchable area for toggling the <code>ui5-checkbox</code> ends where the text ends.\n * <br><br>\n * You can disable the <code>ui5-checkbox</code> by setting the <code>disabled</code> property to\n * <code>true</code>,\n * or use the <code>ui5-checkbox</code> in read-only mode by setting the <code>readonly</code>\n * property to <code>true</code>.\n *\n * <br><br>\n * <h3>Keyboard Handling</h3>\n *\n * The user can use the following keyboard shortcuts to toggle the checked state of the <code>ui5-checkbox</code>.\n * <ul>\n * <li>[SPACE, ENTER] - Toggles between different states: checked, not checked.</li>\n * </ul>\n * <br><br>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/CheckBox\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.CheckBox\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-checkbox\n * @public\n */\n\nclass CheckBox extends UI5Element {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get render() {\n    return litRender;\n  }\n\n  static get template() {\n    return CheckBoxTemplate;\n  }\n\n  static get styles() {\n    return checkboxCss;\n  }\n\n  constructor() {\n    super();\n\n    this._deactivate = () => {\n      if (activeCb) {\n        activeCb.active = false;\n      }\n    };\n\n    if (!isGlobalHandlerAttached) {\n      document.addEventListener(\"mouseup\", this._deactivate);\n      isGlobalHandlerAttached = true;\n    }\n  }\n\n  onBeforeRendering() {\n    this._enableFormSupport();\n  }\n\n  _enableFormSupport() {\n    const FormSupport = getFeature(\"FormSupport\");\n\n    if (FormSupport) {\n      FormSupport.syncNativeHiddenInput(this, (element, nativeInput) => {\n        nativeInput.disabled = element.disabled || !element.checked;\n        nativeInput.value = element.checked ? \"on\" : \"\";\n      });\n    } else if (this.name) {\n      console.warn(`In order for the \"name\" property to have effect, you should also: import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`); // eslint-disable-line\n    }\n  }\n\n  _onclick() {\n    this.toggle();\n  }\n\n  _onmousedown() {\n    if (this.readonly || this.disabled) {\n      return;\n    }\n\n    this.active = true;\n    activeCb = this; // eslint-disable-line\n  }\n\n  _onmouseup() {\n    this.active = false;\n  }\n\n  _onfocusout() {\n    this.active = false;\n  }\n\n  _onkeydown(event) {\n    if (isSpace(event)) {\n      event.preventDefault();\n      this.active = true;\n    }\n\n    if (isEnter(event)) {\n      this.toggle();\n      this.active = true;\n    }\n  }\n\n  _onkeyup(event) {\n    if (isSpace(event)) {\n      this.toggle();\n    }\n\n    this.active = false;\n  }\n\n  toggle() {\n    if (this.canToggle()) {\n      if (this.indeterminate) {\n        this.indeterminate = false;\n        this.checked = true;\n      } else {\n        this.checked = !this.checked;\n      }\n\n      this.fireEvent(\"change\"); // Angular two way data binding\n\n      this.fireEvent(\"value-changed\");\n    }\n\n    return this;\n  }\n\n  canToggle() {\n    return !(this.disabled || this.readonly);\n  }\n\n  valueStateTextMappings() {\n    return {\n      \"Error\": CheckBox.i18nBundle.getText(VALUE_STATE_ERROR),\n      \"Warning\": CheckBox.i18nBundle.getText(VALUE_STATE_WARNING),\n      \"Success\": CheckBox.i18nBundle.getText(VALUE_STATE_SUCCESS)\n    };\n  }\n\n  get ariaLabelText() {\n    return getEffectiveAriaLabelText(this);\n  }\n\n  get classes() {\n    return {\n      main: {\n        \"ui5-checkbox--hoverable\": !this.disabled && !this.readonly && isDesktop()\n      }\n    };\n  }\n\n  get ariaReadonly() {\n    return this.readonly ? \"true\" : undefined;\n  }\n\n  get ariaDisabled() {\n    return this.disabled ? \"true\" : undefined;\n  }\n\n  get ariaChecked() {\n    return this.indeterminate && this.checked ? \"mixed\" : this.checked;\n  }\n\n  get ariaLabelledBy() {\n    if (!this.ariaLabelText) {\n      return this.text ? `${this._id}-label` : undefined;\n    }\n\n    return undefined;\n  }\n\n  get ariaDescribedBy() {\n    return this.hasValueState ? `${this._id}-descr` : undefined;\n  }\n\n  get hasValueState() {\n    return this.valueState !== ValueState.None;\n  }\n\n  get valueStateText() {\n    return this.valueStateTextMappings()[this.valueState];\n  }\n\n  get tabIndex() {\n    const tabindex = this.getAttribute(\"tabindex\");\n    return this.disabled ? undefined : tabindex || \"0\";\n  }\n\n  get isCompletelyChecked() {\n    return this.checked && !this.indeterminate;\n  }\n\n  static get dependencies() {\n    return [Label, Icon];\n  }\n\n  static async onDefine() {\n    CheckBox.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n  }\n\n}\n\nCheckBox.define();\nexport default CheckBox;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/CheckBox.js"],"names":["isDesktop","UI5Element","litRender","getI18nBundle","ValueState","getFeature","getEffectiveAriaLabelText","isSpace","isEnter","Icon","Label","WrappingType","VALUE_STATE_ERROR","VALUE_STATE_WARNING","VALUE_STATE_SUCCESS","CheckBoxTemplate","checkboxCss","isGlobalHandlerAttached","activeCb","metadata","tag","languageAware","properties","accessibleNameRef","type","String","defaultValue","accessibleName","disabled","Boolean","readonly","indeterminate","checked","text","valueState","None","wrappingType","name","active","events","change","slots","formSupport","HTMLElement","CheckBox","render","template","styles","constructor","_deactivate","document","addEventListener","onBeforeRendering","_enableFormSupport","FormSupport","syncNativeHiddenInput","element","nativeInput","value","console","warn","_onclick","toggle","_onmousedown","_onmouseup","_onfocusout","_onkeydown","event","preventDefault","_onkeyup","canToggle","fireEvent","valueStateTextMappings","i18nBundle","getText","ariaLabelText","classes","main","ariaReadonly","undefined","ariaDisabled","ariaChecked","ariaLabelledBy","_id","ariaDescribedBy","hasValueState","valueStateText","tabIndex","tabindex","getAttribute","isCompletelyChecked","dependencies","onDefine","define"],"mappings":"AAAA,SAASA,SAAT,QAA0B,wCAA1B;AACA,OAAOC,UAAP,MAAuB,4CAAvB;AACA,OAAOC,SAAP,MAAsB,sDAAtB;AACA,SAASC,aAAT,QAA8B,4CAA9B;AACA,OAAOC,UAAP,MAAuB,kDAAvB;AACA,SAASC,UAAT,QAA2B,kDAA3B;AACA,SAASC,yBAAT,QAA0C,sDAA1C;AACA,SAASC,OAAT,EAAkBC,OAAlB,QAAiC,sCAAjC;AACA,OAAO,yCAAP;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,KAAP,MAAkB,YAAlB;AACA,OAAOC,YAAP,MAAyB,yBAAzB;AACA,SACCC,iBADD,EAECC,mBAFD,EAGCC,mBAHD,QAIO,mCAJP,C,CAMA;;AACA,OAAOC,gBAAP,MAA6B,+CAA7B,C,CAEA;;AACA,OAAOC,WAAP,MAAwB,oCAAxB;AAEA,IAAIC,uBAAuB,GAAG,KAA9B;AACA,IAAIC,QAAQ,GAAG,IAAf;AAEA;AACA;AACA;;AACA,MAAMC,QAAQ,GAAG;AAChBC,EAAAA,GAAG,EAAE,cADW;AAEhBC,EAAAA,aAAa,EAAE,IAFC;AAGhBC,EAAAA,UAAU;AAAE;AAA2D;AAEtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,iBAAiB,EAAE;AAClBC,MAAAA,IAAI,EAAEC,MADY;AAElBC,MAAAA,YAAY,EAAE;AAFI,KATmD;;AActE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,cAAc,EAAE;AACfH,MAAAA,IAAI,EAAEC;AADS,KAtBsD;;AA0BtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,IAAAA,QAAQ,EAAE;AACTJ,MAAAA,IAAI,EAAEK;AADG,KAnC4D;;AAuCtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,QAAQ,EAAE;AACTN,MAAAA,IAAI,EAAEK;AADG,KAjD4D;;AAqDtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,IAAAA,aAAa,EAAE;AACdP,MAAAA,IAAI,EAAEK;AADQ,KAtEuD;;AA0EtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEG,IAAAA,OAAO,EAAE;AACRR,MAAAA,IAAI,EAAEK;AADE,KArF6D;;AAyFtE;AACF;AACA;AACA;AACA;AACA;AACA;AACEI,IAAAA,IAAI,EAAE;AACLT,MAAAA,IAAI,EAAEC;AADD,KAhGgE;;AAoGtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACES,IAAAA,UAAU,EAAE;AACXV,MAAAA,IAAI,EAAEpB,UADK;AAEXsB,MAAAA,YAAY,EAAEtB,UAAU,CAAC+B;AAFd,KAtH0D;;AA2HtE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACGC,IAAAA,YAAY,EAAE;AACdZ,MAAAA,IAAI,EAAEb,YADQ;AAEde,MAAAA,YAAY,EAAEf,YAAY,CAACwB;AAFb,KAxIuD;;AA6ItE;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACEE,IAAAA,IAAI,EAAE;AACLb,MAAAA,IAAI,EAAEC;AADD,KA7JgE;;AAiKtE;AACF;AACA;AACA;AACEa,IAAAA,MAAM,EAAE;AACPd,MAAAA,IAAI,EAAEK;AADC;AArK8D,GAHvD;AA4KhBU,EAAAA,MAAM;AAAE;AAA2D;AAElE;AACF;AACA;AACA;AACA;AACA;AACEC,IAAAA,MAAM,EAAE;AAR0D,GA5KnD;AAsLhBC,EAAAA,KAAK;AAAE;AAA2D;AACjE;AACF;AACA;AACA;AACA;AACA;AACA;AACEC,IAAAA,WAAW,EAAE;AACZlB,MAAAA,IAAI,EAAEmB;AADM;AARoD;AAtLlD,CAAjB;AAoMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA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","sourcesContent":["import { isDesktop } from \"@ui5/webcomponents-base/dist/Device.js\";\nimport UI5Element from \"@ui5/webcomponents-base/dist/UI5Element.js\";\nimport litRender from \"@ui5/webcomponents-base/dist/renderer/LitRenderer.js\";\nimport { getI18nBundle } from \"@ui5/webcomponents-base/dist/i18nBundle.js\";\nimport ValueState from \"@ui5/webcomponents-base/dist/types/ValueState.js\";\nimport { getFeature } from \"@ui5/webcomponents-base/dist/FeaturesRegistry.js\";\nimport { getEffectiveAriaLabelText } from \"@ui5/webcomponents-base/dist/util/AriaLabelHelper.js\";\nimport { isSpace, isEnter } from \"@ui5/webcomponents-base/dist/Keys.js\";\nimport \"@ui5/webcomponents-icons/dist/accept.js\";\nimport Icon from \"./Icon.js\";\nimport Label from \"./Label.js\";\nimport WrappingType from \"./types/WrappingType.js\";\nimport {\n\tVALUE_STATE_ERROR,\n\tVALUE_STATE_WARNING,\n\tVALUE_STATE_SUCCESS,\n} from \"./generated/i18n/i18n-defaults.js\";\n\n// Template\nimport CheckBoxTemplate from \"./generated/templates/CheckBoxTemplate.lit.js\";\n\n// Styles\nimport checkboxCss from \"./generated/themes/CheckBox.css.js\";\n\nlet isGlobalHandlerAttached = false;\nlet activeCb = null;\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-checkbox\",\n\tlanguageAware: true,\n\tproperties: /** @lends sap.ui.webcomponents.main.CheckBox.prototype */ {\n\n\t\t/**\n\t\t * Receives id(or many ids) of the elements that label the component\n\t\t * @type {String}\n\t\t * @defaultvalue \"\"\n\t\t * @public\n\t\t * @since 1.1.0\n\t\t */\n\t\taccessibleNameRef: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: \"\",\n\t\t},\n\n\t\t/**\n\t\t * Sets the accessible aria name of the component.\n\t\t *\n\t\t * @type {String}\n\t\t * @public\n\t\t * @defaultvalue \"\"\n\t\t * @since 1.1.0\n\t\t */\n\t\taccessibleName: {\n\t\t\ttype: String,\n\t\t},\n\n\t\t/**\n\t\t * Defines whether the component is disabled.\n\t\t * <br><br>\n\t\t * <b>Note:</b> A disabled component is completely noninteractive.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\tdisabled: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Defines whether the component is read-only.\n\t\t * <br><br>\n\t\t * <b>Note:</b> A red-only component is not editable,\n\t\t * but still provides visual feedback upon user interaction.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\treadonly: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t* Defines whether the component is displayed as partially checked.\n\t\t* <br><br>\n\t\t* <b>Note:</b> The indeterminate state can be set only programatically and canâ€™t be achieved by user\n\t\t* interaction and the resulting visual state depends on the values of the <code>indeterminate</code>\n\t\t* and <code>checked</code> properties:\n\t\t* <ul>\n\t\t* <li> If the component is checked and indeterminate, it will be displayed as partially checked\n\t\t* <li> If the component is checked and it is not indeterminate, it will be displayed as checked\n\t\t* <li> If the component is not checked, it will be displayed as not checked regardless value of the indeterminate attribute\n\t\t* </ul>\n\t\t*\n\t\t* @type {boolean}\n\t\t* @defaultvalue false\n\t\t* @public\n\t\t* @since 1.0.0-rc.15\n\t\t*/\n\t\tindeterminate: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Defines if the component is checked.\n\t\t * <br><br>\n\t\t * <b>Note:</b> The property can be changed with user interaction,\n\t\t * either by cliking/tapping on the component, or by\n\t\t * pressing the Enter or Space key.\n\t\t *\n\t\t * @type {boolean}\n\t\t * @defaultvalue false\n\t\t * @public\n\t\t */\n\t\tchecked: {\n\t\t\ttype: Boolean,\n\t\t},\n\n\t\t/**\n\t\t * Defines the text of the component.\n\t\t *\n\t\t * @type {string}\n\t\t * @defaultvalue \"\"\n\t\t * @public\n\t\t */\n\t\ttext: {\n\t\t\ttype: String,\n\t\t},\n\n\t\t/**\n\t\t * Defines the value state of the component.\n\t\t *\n\t\t * <br><br>\n\t\t * <b>Note:</b>\n\t\t *\n\t\t * <ul>\n\t\t * <li><code>Warning</code></li>\n\t\t * <li><code>Error</code></li>\n\t\t * <li><code>None</code>(default)</li>\n\t\t * <li><code>Success</code></li>\n\t\t * <li><code>Information</code></li>\n\t\t * </ul>\n\t\t *\n\t\t * @type {ValueState}\n\t\t * @defaultvalue \"None\"\n\t\t * @public\n\t\t */\n\t\tvalueState: {\n\t\t\ttype: ValueState,\n\t\t\tdefaultValue: ValueState.None,\n\t\t},\n\n\t\t/**\n\t\t * Defines whether the component text wraps when there is not enough space.\n\t\t * <br><br>\n\t\t * Available options are:\n\t\t * <ul>\n\t\t * <li><code>None</code> - The text will be truncated with an ellipsis.</li>\n\t\t * <li><code>Normal</code> - The text will wrap. The words will not be broken based on hyphenation.</li>\n\t\t * </ul>\n\t\t *\n\t\t * @type {WrappingType}\n\t\t * @defaultvalue \"None\"\n\t\t * @public\n\t\t */\n\t\t wrappingType: {\n\t\t\ttype: WrappingType,\n\t\t\tdefaultValue: WrappingType.None,\n\t\t},\n\n\t\t/**\n\t\t * Determines the name with which the component will be submitted in an HTML form.\n\t\t *\n\t\t * <br><br>\n\t\t * <b>Important:</b> For the <code>name</code> property to have effect, you must add the following import to your project:\n\t\t * <code>import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";</code>\n\t\t *\n\t\t * <br><br>\n\t\t * <b>Note:</b> When set, a native <code>input</code> HTML element\n\t\t * will be created inside the component so that it can be submitted as\n\t\t * part of an HTML form. Do not use this property unless you need to submit a form.\n\t\t *\n\t\t * @type {string}\n\t\t * @defaultvalue \"\"\n\t\t * @public\n\t\t */\n\t\tname: {\n\t\t\ttype: String,\n\t\t},\n\n\t\t/**\n\t\t * Defines the active state (pressed or not) of the component.\n\t\t * @private\n\t\t */\n\t\tactive: {\n\t\t\ttype: Boolean,\n\t\t},\n\t},\n\tevents: /** @lends sap.ui.webcomponents.main.CheckBox.prototype */ {\n\n\t\t/**\n\t\t * Fired when the component checked state changes.\n\t\t *\n\t\t * @public\n\t\t * @event\n\t\t */\n\t\tchange: {},\n\t},\n\tslots: /** @lends sap.ui.webcomponents.main.CheckBox.prototype */ {\n\t\t/**\n\t\t * The slot is used to render native <code>input</code> HTML element within Light DOM to enable form submit,\n\t\t * when <code>name</code> property is set.\n\t\t * @type {HTMLElement[]}\n\t\t * @slot\n\t\t * @private\n\t\t */\n\t\tformSupport: {\n\t\t\ttype: HTMLElement,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n *\n * Allows the user to set a binary value, such as true/false or yes/no for an item.\n * <br><br>\n * The <code>ui5-checkbox</code> component consists of a box and a label that describes its purpose.\n * If it's checked, an indicator is displayed inside the box.\n * To check/uncheck the <code>ui5-checkbox</code>, the user has to click or tap the square\n * box or its label.\n * <br><br>\n * The <code>ui5-checkbox</code> component only has 2 states - checked and unchecked.\n * Clicking or tapping toggles the <code>ui5-checkbox</code> between checked and unchecked state.\n *\n * <h3>Usage</h3>\n *\n * You can define the checkbox text with via the <code>text</code> property. If the text exceeds the available width, it is truncated by default.\n * In case you prefer text to wrap, set the <code>wrappingType</code> property to \"Normal\".\n * The touchable area for toggling the <code>ui5-checkbox</code> ends where the text ends.\n * <br><br>\n * You can disable the <code>ui5-checkbox</code> by setting the <code>disabled</code> property to\n * <code>true</code>,\n * or use the <code>ui5-checkbox</code> in read-only mode by setting the <code>readonly</code>\n * property to <code>true</code>.\n *\n * <br><br>\n * <h3>Keyboard Handling</h3>\n *\n * The user can use the following keyboard shortcuts to toggle the checked state of the <code>ui5-checkbox</code>.\n * <ul>\n * <li>[SPACE, ENTER] - Toggles between different states: checked, not checked.</li>\n * </ul>\n * <br><br>\n *\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/CheckBox\";</code>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.CheckBox\n * @extends sap.ui.webcomponents.base.UI5Element\n * @tagname ui5-checkbox\n * @public\n */\nclass CheckBox extends UI5Element {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get render() {\n\t\treturn litRender;\n\t}\n\n\tstatic get template() {\n\t\treturn CheckBoxTemplate;\n\t}\n\n\tstatic get styles() {\n\t\treturn checkboxCss;\n\t}\n\n\tconstructor() {\n\t\tsuper();\n\n\t\tthis._deactivate = () => {\n\t\t\tif (activeCb) {\n\t\t\t\tactiveCb.active = false;\n\t\t\t}\n\t\t};\n\n\t\tif (!isGlobalHandlerAttached) {\n\t\t\tdocument.addEventListener(\"mouseup\", this._deactivate);\n\t\t\tisGlobalHandlerAttached = true;\n\t\t}\n\t}\n\n\tonBeforeRendering() {\n\t\tthis._enableFormSupport();\n\t}\n\n\t_enableFormSupport() {\n\t\tconst FormSupport = getFeature(\"FormSupport\");\n\t\tif (FormSupport) {\n\t\t\tFormSupport.syncNativeHiddenInput(this, (element, nativeInput) => {\n\t\t\t\tnativeInput.disabled = element.disabled || !element.checked;\n\t\t\t\tnativeInput.value = element.checked ? \"on\" : \"\";\n\t\t\t});\n\t\t} else if (this.name) {\n\t\t\tconsole.warn(`In order for the \"name\" property to have effect, you should also: import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`); // eslint-disable-line\n\t\t}\n\t}\n\n\t_onclick() {\n\t\tthis.toggle();\n\t}\n\n\t_onmousedown() {\n\t\tif (this.readonly || this.disabled) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.active = true;\n\t\tactiveCb = this; // eslint-disable-line\n\t}\n\n\t_onmouseup() {\n\t\tthis.active = false;\n\t}\n\n\t_onfocusout() {\n\t\tthis.active = false;\n\t}\n\n\t_onkeydown(event) {\n\t\tif (isSpace(event)) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.active = true;\n\t\t}\n\n\t\tif (isEnter(event)) {\n\t\t\tthis.toggle();\n\t\t\tthis.active = true;\n\t\t}\n\t}\n\n\t_onkeyup(event) {\n\t\tif (isSpace(event)) {\n\t\t\tthis.toggle();\n\t\t}\n\n\t\tthis.active = false;\n\t}\n\n\ttoggle() {\n\t\tif (this.canToggle()) {\n\t\t\tif (this.indeterminate) {\n\t\t\t\tthis.indeterminate = false;\n\t\t\t\tthis.checked = true;\n\t\t\t} else {\n\t\t\t\tthis.checked = !this.checked;\n\t\t\t}\n\n\t\t\tthis.fireEvent(\"change\");\n\t\t\t// Angular two way data binding\n\t\t\tthis.fireEvent(\"value-changed\");\n\t\t}\n\t\treturn this;\n\t}\n\n\tcanToggle() {\n\t\treturn !(this.disabled || this.readonly);\n\t}\n\n\tvalueStateTextMappings() {\n\t\treturn {\n\t\t\t\"Error\": CheckBox.i18nBundle.getText(VALUE_STATE_ERROR),\n\t\t\t\"Warning\": CheckBox.i18nBundle.getText(VALUE_STATE_WARNING),\n\t\t\t\"Success\": CheckBox.i18nBundle.getText(VALUE_STATE_SUCCESS),\n\t\t};\n\t}\n\n\tget ariaLabelText() {\n\t\treturn getEffectiveAriaLabelText(this);\n\t}\n\n\tget classes() {\n\t\treturn {\n\t\t\tmain: {\n\t\t\t\t\"ui5-checkbox--hoverable\": !this.disabled && !this.readonly && isDesktop(),\n\t\t\t},\n\t\t};\n\t}\n\n\tget ariaReadonly() {\n\t\treturn this.readonly ? \"true\" : undefined;\n\t}\n\n\tget ariaDisabled() {\n\t\treturn this.disabled ? \"true\" : undefined;\n\t}\n\n\tget ariaChecked() {\n\t\treturn this.indeterminate && this.checked ? \"mixed\" : this.checked;\n\t}\n\n\tget ariaLabelledBy() {\n\t\tif (!this.ariaLabelText) {\n\t\t\treturn this.text ? `${this._id}-label` : undefined;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\tget ariaDescribedBy() {\n\t\treturn this.hasValueState ? `${this._id}-descr` : undefined;\n\t}\n\n\tget hasValueState() {\n\t\treturn this.valueState !== ValueState.None;\n\t}\n\n\tget valueStateText() {\n\t\treturn this.valueStateTextMappings()[this.valueState];\n\t}\n\n\tget tabIndex() {\n\t\tconst tabindex = this.getAttribute(\"tabindex\");\n\t\treturn this.disabled ? undefined : tabindex || \"0\";\n\t}\n\n\tget isCompletelyChecked() {\n\t\treturn this.checked && !this.indeterminate;\n\t}\n\n\tstatic get dependencies() {\n\t\treturn [\n\t\t\tLabel,\n\t\t\tIcon,\n\t\t];\n\t}\n\n\tstatic async onDefine() {\n\t\tCheckBox.i18nBundle = await getI18nBundle(\"@ui5/webcomponents\");\n\t}\n}\n\nCheckBox.define();\n\nexport default CheckBox;\n"]},"metadata":{},"sourceType":"module"}