{"ast":null,"code":"const querySets = {};\n/**\n * Initializes a screen width media query range set.\n *\n * This initialization step makes the range set ready to be used for one of the other functions in namespace <code>MediaRange</code>.\n *\n * A range set can be defined as shown in the following example:\n * <pre>\n * MediaRange.initRangeSet(\"MyRangeSet\", [200, 400], [\"Small\", \"Medium\", \"Large\"]);\n * </pre>\n * This example defines the following named ranges:\n * <ul>\n * <li><code>\"Small\"</code>: For screens smaller than 200 pixels.</li>\n * <li><code>\"Medium\"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li>\n * <li><code>\"Large\"</code>: For screens greater than or equal to 400 pixels.</li>\n * </ul>\n *\n * @param {string} name The name of the range set to be initialized.\n * The name must be a valid id and consist only of letters and numeric digits.\n *\n * @param {int[]} [borders] The range borders\n *\n * @param {string[]} [names] The names of the ranges. The names must be a valid id and consist only of letters and digits.\n *\n * @name MediaRange.initRangeSet\n * @function\n * @public\n */\n\nconst _initRangeSet = (name, borders, names) => {\n  querySets[name] = {\n    borders,\n    names\n  };\n};\n/**\n * Returns information about the current active range of the range set with the given name.\n *\n * If the optional parameter <code>width</code> is given, the active range will be determined for that width,\n * otherwise it is determined for the current window size.\n *\n * @param {string} name The name of the range set. The range set must be initialized beforehand ({@link MediaRange.initRangeSet})\n * @param {int} [width] An optional width, based on which the range should be determined;\n *             If <code>width</code> is not provided, the window size will be used.\n * @returns {string} The name of the current active interval of the range set.\n *\n * @name MediaRange.getCurrentRange\n * @function\n * @public\n */\n\n\nconst _getCurrentRange = (name, width = window.innerWidth) => {\n  const querySet = querySets[name];\n  let i = 0;\n\n  if (!querySet) {\n    return null;\n  }\n\n  for (; i < querySet.borders.length; i++) {\n    if (width < querySet.borders[i]) {\n      return querySet.names[i];\n    }\n  }\n\n  return querySet.names[i];\n};\n/**\n * Enumeration containing the names and settings of predefined screen width media query range sets.\n *\n * @namespace\n * @name MediaRange.RANGESETS\n * @public\n */\n\n\nconst RANGESETS = {\n  /**\n   * A 4-step range set (S-M-L-XL).\n   *\n   * The ranges of this set are:\n   * <ul>\n   * <li><code>\"S\"</code>: For screens smaller than 600 pixels.</li>\n   * <li><code>\"M\"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>\n   * <li><code>\"L\"</code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.</li>\n   * <li><code>\"XL\"</code>: For screens greater than or equal to 1440 pixels.</li>\n   * </ul>\n   *\n   * @name MediaRange.RANGESETS.RANGE_4STEPS\n   * @public\n   */\n  RANGE_4STEPS: \"4Step\"\n};\n/**\n * API for screen width changes.\n *\n * @namespace\n * @name MediaRange\n */\n\nconst MediaRange = {\n  RANGESETS,\n  initRangeSet: _initRangeSet,\n  getCurrentRange: _getCurrentRange\n};\nMediaRange.initRangeSet(MediaRange.RANGESETS.RANGE_4STEPS, [600, 1024, 1440], [\"S\", \"M\", \"L\", \"XL\"]);\nexport default MediaRange;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/MediaRange.js"],"names":["querySets","_initRangeSet","name","borders","names","_getCurrentRange","width","window","innerWidth","querySet","i","length","RANGESETS","RANGE_4STEPS","MediaRange","initRangeSet","getCurrentRange"],"mappings":"AAAA,MAAMA,SAAS,GAAG,EAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,OAAP,EAAgBC,KAAhB,KAA0B;AAC/CJ,EAAAA,SAAS,CAACE,IAAD,CAAT,GAAkB;AACjBC,IAAAA,OADiB;AAEjBC,IAAAA;AAFiB,GAAlB;AAIA,CALD;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,gBAAgB,GAAG,CAACH,IAAD,EAAOI,KAAK,GAAGC,MAAM,CAACC,UAAtB,KAAqC;AAC7D,QAAMC,QAAQ,GAAGT,SAAS,CAACE,IAAD,CAA1B;AACA,MAAIQ,CAAC,GAAG,CAAR;;AAEA,MAAI,CAACD,QAAL,EAAe;AACd,WAAO,IAAP;AACA;;AAED,SAAOC,CAAC,GAAGD,QAAQ,CAACN,OAAT,CAAiBQ,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACxC,QAAIJ,KAAK,GAAGG,QAAQ,CAACN,OAAT,CAAiBO,CAAjB,CAAZ,EAAiC;AAChC,aAAOD,QAAQ,CAACL,KAAT,CAAeM,CAAf,CAAP;AACA;AACD;;AAED,SAAOD,QAAQ,CAACL,KAAT,CAAeM,CAAf,CAAP;AACA,CAfD;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,SAAS,GAAG;AACjB;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACCC,EAAAA,YAAY,EAAE;AAfG,CAAlB;AAkBA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,UAAU,GAAG;AAClBF,EAAAA,SADkB;AAElBG,EAAAA,YAAY,EAAEd,aAFI;AAGlBe,EAAAA,eAAe,EAAEX;AAHC,CAAnB;AAMAS,UAAU,CAACC,YAAX,CAAwBD,UAAU,CAACF,SAAX,CAAqBC,YAA7C,EAA2D,CAAC,GAAD,EAAM,IAAN,EAAY,IAAZ,CAA3D,EAA8E,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,IAAhB,CAA9E;AAEA,eAAeC,UAAf","sourcesContent":["const querySets = {};\n\n/**\n * Initializes a screen width media query range set.\n *\n * This initialization step makes the range set ready to be used for one of the other functions in namespace <code>MediaRange</code>.\n *\n * A range set can be defined as shown in the following example:\n * <pre>\n * MediaRange.initRangeSet(\"MyRangeSet\", [200, 400], [\"Small\", \"Medium\", \"Large\"]);\n * </pre>\n * This example defines the following named ranges:\n * <ul>\n * <li><code>\"Small\"</code>: For screens smaller than 200 pixels.</li>\n * <li><code>\"Medium\"</code>: For screens greater than or equal to 200 pixels and smaller than 400 pixels.</li>\n * <li><code>\"Large\"</code>: For screens greater than or equal to 400 pixels.</li>\n * </ul>\n *\n * @param {string} name The name of the range set to be initialized.\n * The name must be a valid id and consist only of letters and numeric digits.\n *\n * @param {int[]} [borders] The range borders\n *\n * @param {string[]} [names] The names of the ranges. The names must be a valid id and consist only of letters and digits.\n *\n * @name MediaRange.initRangeSet\n * @function\n * @public\n */\nconst _initRangeSet = (name, borders, names) => {\n\tquerySets[name] = {\n\t\tborders,\n\t\tnames,\n\t};\n};\n\n/**\n * Returns information about the current active range of the range set with the given name.\n *\n * If the optional parameter <code>width</code> is given, the active range will be determined for that width,\n * otherwise it is determined for the current window size.\n *\n * @param {string} name The name of the range set. The range set must be initialized beforehand ({@link MediaRange.initRangeSet})\n * @param {int} [width] An optional width, based on which the range should be determined;\n *             If <code>width</code> is not provided, the window size will be used.\n * @returns {string} The name of the current active interval of the range set.\n *\n * @name MediaRange.getCurrentRange\n * @function\n * @public\n */\nconst _getCurrentRange = (name, width = window.innerWidth) => {\n\tconst querySet = querySets[name];\n\tlet i = 0;\n\n\tif (!querySet) {\n\t\treturn null;\n\t}\n\n\tfor (; i < querySet.borders.length; i++) {\n\t\tif (width < querySet.borders[i]) {\n\t\t\treturn querySet.names[i];\n\t\t}\n\t}\n\n\treturn querySet.names[i];\n};\n\n/**\n * Enumeration containing the names and settings of predefined screen width media query range sets.\n *\n * @namespace\n * @name MediaRange.RANGESETS\n * @public\n */\nconst RANGESETS = {\n\t/**\n\t * A 4-step range set (S-M-L-XL).\n\t *\n\t * The ranges of this set are:\n\t * <ul>\n\t * <li><code>\"S\"</code>: For screens smaller than 600 pixels.</li>\n\t * <li><code>\"M\"</code>: For screens greater than or equal to 600 pixels and smaller than 1024 pixels.</li>\n\t * <li><code>\"L\"</code>: For screens greater than or equal to 1024 pixels and smaller than 1440 pixels.</li>\n\t * <li><code>\"XL\"</code>: For screens greater than or equal to 1440 pixels.</li>\n\t * </ul>\n\t *\n\t * @name MediaRange.RANGESETS.RANGE_4STEPS\n\t * @public\n\t */\n\tRANGE_4STEPS: \"4Step\",\n};\n\n/**\n * API for screen width changes.\n *\n * @namespace\n * @name MediaRange\n */\n\nconst MediaRange = {\n\tRANGESETS,\n\tinitRangeSet: _initRangeSet,\n\tgetCurrentRange: _getCurrentRange,\n};\n\nMediaRange.initRangeSet(MediaRange.RANGESETS.RANGE_4STEPS, [600, 1024, 1440], [\"S\", \"M\", \"L\", \"XL\"]);\n\nexport default MediaRange;\n"]},"metadata":{},"sourceType":"module"}