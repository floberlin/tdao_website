{"ast":null,"code":"/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport MathUtils from '../../common/detector/MathUtils';\nimport DetectorResult from '../../common/DetectorResult'; // import GridSampler from '../../common/GridSampler';\n\nimport GridSamplerInstance from '../../common/GridSamplerInstance';\nimport PerspectiveTransform from '../../common/PerspectiveTransform';\nimport DecodeHintType from '../../DecodeHintType';\nimport NotFoundException from '../../NotFoundException';\nimport ResultPoint from '../../ResultPoint';\nimport Version from '../decoder/Version';\nimport AlignmentPatternFinder from './AlignmentPatternFinder';\nimport FinderPatternFinder from './FinderPatternFinder';\n/*import java.util.Map;*/\n\n/**\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\n\nvar Detector = function () {\n  function Detector(image) {\n    this.image = image;\n  }\n\n  Detector.prototype.getImage = function () {\n    return this.image;\n  };\n\n  Detector.prototype.getResultPointCallback = function () {\n    return this.resultPointCallback;\n  };\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n  // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n  //   return detect(null)\n  // }\n\n  /**\n   * <p>Detects a QR Code in an image.</p>\n   *\n   * @param hints optional hints to detector\n   * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n   * @throws NotFoundException if QR Code cannot be found\n   * @throws FormatException if a QR Code cannot be decoded\n   */\n\n\n  Detector.prototype.detect = function (hints) {\n    this.resultPointCallback = hints === null || hints === undefined ? null :\n    /*(ResultPointCallback) */\n    hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n    var finder = new FinderPatternFinder(this.image, this.resultPointCallback);\n    var info = finder.find(hints);\n    return this.processFinderPatternInfo(info);\n  };\n\n  Detector.prototype.processFinderPatternInfo = function (info) {\n    var topLeft = info.getTopLeft();\n    var topRight = info.getTopRight();\n    var bottomLeft = info.getBottomLeft();\n    var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n\n    if (moduleSize < 1.0) {\n      throw new NotFoundException('No pattern found in proccess finder.');\n    }\n\n    var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n    var provisionalVersion = Version.getProvisionalVersionForDimension(dimension);\n    var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n    var alignmentPattern = null; // Anything above version 1 has an alignment pattern\n\n    if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n      // Guess where a \"bottom right\" finder pattern would have been\n      var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY(); // Estimate that alignment pattern is closer by 3 modules\n      // from \"bottom right\" to known top left location\n\n      var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n      var estAlignmentX =\n      /*(int) */\n      Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n      var estAlignmentY =\n      /*(int) */\n      Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY())); // Kind of arbitrary -- expand search radius before giving up\n\n      for (var i = 4; i <= 16; i <<= 1) {\n        try {\n          alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n          break;\n        } catch (re\n        /*NotFoundException*/\n        ) {\n          if (!(re instanceof NotFoundException)) {\n            throw re;\n          } // try next round\n\n        }\n      } // If we didn't find alignment pattern... well try anyway without it\n\n    }\n\n    var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n    var bits = Detector.sampleGrid(this.image, transform, dimension);\n    var points;\n\n    if (alignmentPattern === null) {\n      points = [bottomLeft, topLeft, topRight];\n    } else {\n      points = [bottomLeft, topLeft, topRight, alignmentPattern];\n    }\n\n    return new DetectorResult(bits, points);\n  };\n\n  Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension\n  /*int*/\n  ) {\n    var dimMinusThree = dimension - 3.5;\n    var bottomRightX;\n    /*float*/\n\n    var bottomRightY;\n    /*float*/\n\n    var sourceBottomRightX;\n    /*float*/\n\n    var sourceBottomRightY;\n    /*float*/\n\n    if (alignmentPattern !== null) {\n      bottomRightX = alignmentPattern.getX();\n      bottomRightY = alignmentPattern.getY();\n      sourceBottomRightX = dimMinusThree - 3.0;\n      sourceBottomRightY = sourceBottomRightX;\n    } else {\n      // Don't have an alignment pattern, just make up the bottom-right point\n      bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n      bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n      sourceBottomRightX = dimMinusThree;\n      sourceBottomRightY = dimMinusThree;\n    }\n\n    return PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n  };\n\n  Detector.sampleGrid = function (image, transform, dimension\n  /*int*/\n  ) {\n    var sampler = GridSamplerInstance.getInstance();\n    return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n  };\n  /**\n   * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n   * of the finder patterns and estimated module size.</p>\n   */\n\n\n  Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize\n  /*float*/\n  ) {\n    var tltrCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, topRight) / moduleSize);\n    var tlblCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, bottomLeft) / moduleSize);\n    var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n\n    switch (dimension & 0x03) {\n      // mod 4\n      case 0:\n        dimension++;\n        break;\n      // 1? do nothing\n\n      case 2:\n        dimension--;\n        break;\n\n      case 3:\n        throw new NotFoundException('Dimensions could be not found.');\n    }\n\n    return dimension;\n  };\n  /**\n   * <p>Computes an average estimated module size based on estimated derived from the positions\n   * of the three finder patterns.</p>\n   *\n   * @param topLeft detected top-left finder pattern center\n   * @param topRight detected top-right finder pattern center\n   * @param bottomLeft detected bottom-left finder pattern center\n   * @return estimated module size\n   */\n\n\n  Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n    // Take the average\n    return (this.calculateModuleSizeOneWay(topLeft, topRight) + this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n  };\n  /**\n   * <p>Estimates module size based on two finder patterns -- it uses\n   * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n   * width of each, measuring along the axis between their centers.</p>\n   */\n\n\n  Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n    var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(\n    /*(int) */\n    Math.floor(pattern.getX()),\n    /*(int) */\n    Math.floor(pattern.getY()),\n    /*(int) */\n    Math.floor(otherPattern.getX()),\n    /*(int) */\n    Math.floor(otherPattern.getY()));\n    var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(\n    /*(int) */\n    Math.floor(otherPattern.getX()),\n    /*(int) */\n    Math.floor(otherPattern.getY()),\n    /*(int) */\n    Math.floor(pattern.getX()),\n    /*(int) */\n    Math.floor(pattern.getY()));\n\n    if (isNaN(moduleSizeEst1)) {\n      return moduleSizeEst2 / 7.0;\n    }\n\n    if (isNaN(moduleSizeEst2)) {\n      return moduleSizeEst1 / 7.0;\n    } // Average them, and divide by 7 since we've counted the width of 3 black modules,\n    // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n\n\n    return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n  };\n  /**\n   * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n   * a finder pattern by looking for a black-white-black run from the center in the direction\n   * of another point (another finder pattern center), and in the opposite direction too.\n   */\n\n\n  Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX\n  /*int*/\n  , fromY\n  /*int*/\n  , toX\n  /*int*/\n  , toY\n  /*int*/\n  ) {\n    var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY); // Now count other way -- don't run off image though of course\n\n    var scale = 1.0;\n    var otherToX = fromX - (toX - fromX);\n\n    if (otherToX < 0) {\n      scale = fromX / (fromX - otherToX);\n      otherToX = 0;\n    } else if (otherToX >= this.image.getWidth()) {\n      scale = (this.image.getWidth() - 1 - fromX) / (otherToX - fromX);\n      otherToX = this.image.getWidth() - 1;\n    }\n\n    var otherToY =\n    /*(int) */\n    Math.floor(fromY - (toY - fromY) * scale);\n    scale = 1.0;\n\n    if (otherToY < 0) {\n      scale = fromY / (fromY - otherToY);\n      otherToY = 0;\n    } else if (otherToY >= this.image.getHeight()) {\n      scale = (this.image.getHeight() - 1 - fromY) / (otherToY - fromY);\n      otherToY = this.image.getHeight() - 1;\n    }\n\n    otherToX =\n    /*(int) */\n    Math.floor(fromX + (otherToX - fromX) * scale);\n    result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY); // Middle pixel is double-counted this way; subtract 1\n\n    return result - 1.0;\n  };\n  /**\n   * <p>This method traces a line from a point in the image, in the direction towards another point.\n   * It begins in a black region, and keeps going until it finds white, then black, then white again.\n   * It reports the distance from the start to this point.</p>\n   *\n   * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n   * may be skewed or rotated.</p>\n   */\n\n\n  Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX\n  /*int*/\n  , fromY\n  /*int*/\n  , toX\n  /*int*/\n  , toY\n  /*int*/\n  ) {\n    // Mild variant of Bresenham's algorithm\n    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n\n    if (steep) {\n      var temp = fromX;\n      fromX = fromY;\n      fromY = temp;\n      temp = toX;\n      toX = toY;\n      toY = temp;\n    }\n\n    var dx = Math.abs(toX - fromX);\n    var dy = Math.abs(toY - fromY);\n    var error = -dx / 2;\n    var xstep = fromX < toX ? 1 : -1;\n    var ystep = fromY < toY ? 1 : -1; // In black pixels, looking for white, first or second time.\n\n    var state = 0; // Loop up until x == toX, but not beyond\n\n    var xLimit = toX + xstep;\n\n    for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n      var realX = steep ? y : x;\n      var realY = steep ? x : y; // Does current pixel mean we have moved white to black or vice versa?\n      // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n      // color, advance to next state or end if we are in state 2 already\n\n      if (state === 1 === this.image.get(realX, realY)) {\n        if (state === 2) {\n          return MathUtils.distance(x, y, fromX, fromY);\n        }\n\n        state++;\n      }\n\n      error += dy;\n\n      if (error > 0) {\n        if (y === toY) {\n          break;\n        }\n\n        y += ystep;\n        error -= dx;\n      }\n    } // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n    // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n    // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n\n\n    if (state === 2) {\n      return MathUtils.distance(toX + xstep, toY, fromX, fromY);\n    } // else we didn't find even black-white-black; no estimate is really possible\n\n\n    return NaN;\n  };\n  /**\n   * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n   * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n   *\n   * @param overallEstModuleSize estimated module size so far\n   * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n   * @param estAlignmentY y coordinate of above\n   * @param allowanceFactor number of pixels in all directions to search from the center\n   * @return {@link AlignmentPattern} if found, or null otherwise\n   * @throws NotFoundException if an unexpected error occurs during detection\n   */\n\n\n  Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize\n  /*float*/\n  , estAlignmentX\n  /*int*/\n  , estAlignmentY\n  /*int*/\n  , allowanceFactor\n  /*float*/\n  ) {\n    // Look for an alignment pattern (3 modules in size) around where it\n    // should be\n    var allowance =\n    /*(int) */\n    Math.floor(allowanceFactor * overallEstModuleSize);\n    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n    var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n\n    if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n      throw new NotFoundException('Alignment top exceeds estimated module size.');\n    }\n\n    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n    var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n\n    if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n      throw new NotFoundException('Alignment bottom exceeds estimated module size.');\n    }\n\n    var alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n    return alignmentFinder.find();\n  };\n\n  return Detector;\n}();\n\nexport default Detector;","map":{"version":3,"sources":["../../../../../src/core/qrcode/detector/Detector.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n * Copyright 2007 ZXing authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport MathUtils from '../../common/detector/MathUtils';\nimport DetectorResult from '../../common/DetectorResult';\n// import GridSampler from '../../common/GridSampler';\nimport GridSamplerInstance from '../../common/GridSamplerInstance';\nimport PerspectiveTransform from '../../common/PerspectiveTransform';\nimport DecodeHintType from '../../DecodeHintType';\nimport NotFoundException from '../../NotFoundException';\nimport ResultPoint from '../../ResultPoint';\nimport Version from '../decoder/Version';\nimport AlignmentPatternFinder from './AlignmentPatternFinder';\nimport FinderPatternFinder from './FinderPatternFinder';\n/*import java.util.Map;*/\n/**\n * <p>Encapsulates logic that can detect a QR Code in an image, even if the QR Code\n * is rotated or skewed, or partially obscured.</p>\n *\n * @author Sean Owen\n */\nvar Detector = /** @class */ (function () {\n    function Detector(image) {\n        this.image = image;\n    }\n    Detector.prototype.getImage = function () {\n        return this.image;\n    };\n    Detector.prototype.getResultPointCallback = function () {\n        return this.resultPointCallback;\n    };\n    /**\n     * <p>Detects a QR Code in an image.</p>\n     *\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n     * @throws NotFoundException if QR Code cannot be found\n     * @throws FormatException if a QR Code cannot be decoded\n     */\n    // public detect(): DetectorResult /*throws NotFoundException, FormatException*/ {\n    //   return detect(null)\n    // }\n    /**\n     * <p>Detects a QR Code in an image.</p>\n     *\n     * @param hints optional hints to detector\n     * @return {@link DetectorResult} encapsulating results of detecting a QR Code\n     * @throws NotFoundException if QR Code cannot be found\n     * @throws FormatException if a QR Code cannot be decoded\n     */\n    Detector.prototype.detect = function (hints) {\n        this.resultPointCallback = (hints === null || hints === undefined) ? null :\n            /*(ResultPointCallback) */ hints.get(DecodeHintType.NEED_RESULT_POINT_CALLBACK);\n        var finder = new FinderPatternFinder(this.image, this.resultPointCallback);\n        var info = finder.find(hints);\n        return this.processFinderPatternInfo(info);\n    };\n    Detector.prototype.processFinderPatternInfo = function (info) {\n        var topLeft = info.getTopLeft();\n        var topRight = info.getTopRight();\n        var bottomLeft = info.getBottomLeft();\n        var moduleSize = this.calculateModuleSize(topLeft, topRight, bottomLeft);\n        if (moduleSize < 1.0) {\n            throw new NotFoundException('No pattern found in proccess finder.');\n        }\n        var dimension = Detector.computeDimension(topLeft, topRight, bottomLeft, moduleSize);\n        var provisionalVersion = Version.getProvisionalVersionForDimension(dimension);\n        var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\n        var alignmentPattern = null;\n        // Anything above version 1 has an alignment pattern\n        if (provisionalVersion.getAlignmentPatternCenters().length > 0) {\n            // Guess where a \"bottom right\" finder pattern would have been\n            var bottomRightX = topRight.getX() - topLeft.getX() + bottomLeft.getX();\n            var bottomRightY = topRight.getY() - topLeft.getY() + bottomLeft.getY();\n            // Estimate that alignment pattern is closer by 3 modules\n            // from \"bottom right\" to known top left location\n            var correctionToTopLeft = 1.0 - 3.0 / modulesBetweenFPCenters;\n            var estAlignmentX = /*(int) */ Math.floor(topLeft.getX() + correctionToTopLeft * (bottomRightX - topLeft.getX()));\n            var estAlignmentY = /*(int) */ Math.floor(topLeft.getY() + correctionToTopLeft * (bottomRightY - topLeft.getY()));\n            // Kind of arbitrary -- expand search radius before giving up\n            for (var i = 4; i <= 16; i <<= 1) {\n                try {\n                    alignmentPattern = this.findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i);\n                    break;\n                }\n                catch (re /*NotFoundException*/) {\n                    if (!(re instanceof NotFoundException)) {\n                        throw re;\n                    }\n                    // try next round\n                }\n            }\n            // If we didn't find alignment pattern... well try anyway without it\n        }\n        var transform = Detector.createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension);\n        var bits = Detector.sampleGrid(this.image, transform, dimension);\n        var points;\n        if (alignmentPattern === null) {\n            points = [bottomLeft, topLeft, topRight];\n        }\n        else {\n            points = [bottomLeft, topLeft, topRight, alignmentPattern];\n        }\n        return new DetectorResult(bits, points);\n    };\n    Detector.createTransform = function (topLeft, topRight, bottomLeft, alignmentPattern, dimension /*int*/) {\n        var dimMinusThree = dimension - 3.5;\n        var bottomRightX; /*float*/\n        var bottomRightY; /*float*/\n        var sourceBottomRightX; /*float*/\n        var sourceBottomRightY; /*float*/\n        if (alignmentPattern !== null) {\n            bottomRightX = alignmentPattern.getX();\n            bottomRightY = alignmentPattern.getY();\n            sourceBottomRightX = dimMinusThree - 3.0;\n            sourceBottomRightY = sourceBottomRightX;\n        }\n        else {\n            // Don't have an alignment pattern, just make up the bottom-right point\n            bottomRightX = (topRight.getX() - topLeft.getX()) + bottomLeft.getX();\n            bottomRightY = (topRight.getY() - topLeft.getY()) + bottomLeft.getY();\n            sourceBottomRightX = dimMinusThree;\n            sourceBottomRightY = dimMinusThree;\n        }\n        return PerspectiveTransform.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.getX(), topLeft.getY(), topRight.getX(), topRight.getY(), bottomRightX, bottomRightY, bottomLeft.getX(), bottomLeft.getY());\n    };\n    Detector.sampleGrid = function (image, transform, dimension /*int*/) {\n        var sampler = GridSamplerInstance.getInstance();\n        return sampler.sampleGridWithTransform(image, dimension, dimension, transform);\n    };\n    /**\n     * <p>Computes the dimension (number of modules on a size) of the QR Code based on the position\n     * of the finder patterns and estimated module size.</p>\n     */\n    Detector.computeDimension = function (topLeft, topRight, bottomLeft, moduleSize /*float*/) {\n        var tltrCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, topRight) / moduleSize);\n        var tlblCentersDimension = MathUtils.round(ResultPoint.distance(topLeft, bottomLeft) / moduleSize);\n        var dimension = Math.floor((tltrCentersDimension + tlblCentersDimension) / 2) + 7;\n        switch (dimension & 0x03) { // mod 4\n            case 0:\n                dimension++;\n                break;\n            // 1? do nothing\n            case 2:\n                dimension--;\n                break;\n            case 3:\n                throw new NotFoundException('Dimensions could be not found.');\n        }\n        return dimension;\n    };\n    /**\n     * <p>Computes an average estimated module size based on estimated derived from the positions\n     * of the three finder patterns.</p>\n     *\n     * @param topLeft detected top-left finder pattern center\n     * @param topRight detected top-right finder pattern center\n     * @param bottomLeft detected bottom-left finder pattern center\n     * @return estimated module size\n     */\n    Detector.prototype.calculateModuleSize = function (topLeft, topRight, bottomLeft) {\n        // Take the average\n        return (this.calculateModuleSizeOneWay(topLeft, topRight) +\n            this.calculateModuleSizeOneWay(topLeft, bottomLeft)) / 2.0;\n    };\n    /**\n     * <p>Estimates module size based on two finder patterns -- it uses\n     * {@link #sizeOfBlackWhiteBlackRunBothWays(int, int, int, int)} to figure the\n     * width of each, measuring along the axis between their centers.</p>\n     */\n    Detector.prototype.calculateModuleSizeOneWay = function (pattern, otherPattern) {\n        var moduleSizeEst1 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(pattern.getX()), \n        /*(int) */ Math.floor(pattern.getY()), \n        /*(int) */ Math.floor(otherPattern.getX()), \n        /*(int) */ Math.floor(otherPattern.getY()));\n        var moduleSizeEst2 = this.sizeOfBlackWhiteBlackRunBothWays(/*(int) */ Math.floor(otherPattern.getX()), \n        /*(int) */ Math.floor(otherPattern.getY()), \n        /*(int) */ Math.floor(pattern.getX()), \n        /*(int) */ Math.floor(pattern.getY()));\n        if (isNaN(moduleSizeEst1)) {\n            return moduleSizeEst2 / 7.0;\n        }\n        if (isNaN(moduleSizeEst2)) {\n            return moduleSizeEst1 / 7.0;\n        }\n        // Average them, and divide by 7 since we've counted the width of 3 black modules,\n        // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\n        return (moduleSizeEst1 + moduleSizeEst2) / 14.0;\n    };\n    /**\n     * See {@link #sizeOfBlackWhiteBlackRun(int, int, int, int)}; computes the total width of\n     * a finder pattern by looking for a black-white-black run from the center in the direction\n     * of another point (another finder pattern center), and in the opposite direction too.\n     */\n    Detector.prototype.sizeOfBlackWhiteBlackRunBothWays = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n        var result = this.sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY);\n        // Now count other way -- don't run off image though of course\n        var scale = 1.0;\n        var otherToX = fromX - (toX - fromX);\n        if (otherToX < 0) {\n            scale = fromX / /*(float) */ (fromX - otherToX);\n            otherToX = 0;\n        }\n        else if (otherToX >= this.image.getWidth()) {\n            scale = (this.image.getWidth() - 1 - fromX) / /*(float) */ (otherToX - fromX);\n            otherToX = this.image.getWidth() - 1;\n        }\n        var otherToY = /*(int) */ Math.floor(fromY - (toY - fromY) * scale);\n        scale = 1.0;\n        if (otherToY < 0) {\n            scale = fromY / /*(float) */ (fromY - otherToY);\n            otherToY = 0;\n        }\n        else if (otherToY >= this.image.getHeight()) {\n            scale = (this.image.getHeight() - 1 - fromY) / /*(float) */ (otherToY - fromY);\n            otherToY = this.image.getHeight() - 1;\n        }\n        otherToX = /*(int) */ Math.floor(fromX + (otherToX - fromX) * scale);\n        result += this.sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY);\n        // Middle pixel is double-counted this way; subtract 1\n        return result - 1.0;\n    };\n    /**\n     * <p>This method traces a line from a point in the image, in the direction towards another point.\n     * It begins in a black region, and keeps going until it finds white, then black, then white again.\n     * It reports the distance from the start to this point.</p>\n     *\n     * <p>This is used when figuring out how wide a finder pattern is, when the finder pattern\n     * may be skewed or rotated.</p>\n     */\n    Detector.prototype.sizeOfBlackWhiteBlackRun = function (fromX /*int*/, fromY /*int*/, toX /*int*/, toY /*int*/) {\n        // Mild variant of Bresenham's algorithm\n        // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\n        var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\n        if (steep) {\n            var temp = fromX;\n            fromX = fromY;\n            fromY = temp;\n            temp = toX;\n            toX = toY;\n            toY = temp;\n        }\n        var dx = Math.abs(toX - fromX);\n        var dy = Math.abs(toY - fromY);\n        var error = -dx / 2;\n        var xstep = fromX < toX ? 1 : -1;\n        var ystep = fromY < toY ? 1 : -1;\n        // In black pixels, looking for white, first or second time.\n        var state = 0;\n        // Loop up until x == toX, but not beyond\n        var xLimit = toX + xstep;\n        for (var x = fromX, y = fromY; x !== xLimit; x += xstep) {\n            var realX = steep ? y : x;\n            var realY = steep ? x : y;\n            // Does current pixel mean we have moved white to black or vice versa?\n            // Scanning black in state 0,2 and white in state 1, so if we find the wrong\n            // color, advance to next state or end if we are in state 2 already\n            if ((state === 1) === this.image.get(realX, realY)) {\n                if (state === 2) {\n                    return MathUtils.distance(x, y, fromX, fromY);\n                }\n                state++;\n            }\n            error += dy;\n            if (error > 0) {\n                if (y === toY) {\n                    break;\n                }\n                y += ystep;\n                error -= dx;\n            }\n        }\n        // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\n        // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\n        // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\n        if (state === 2) {\n            return MathUtils.distance(toX + xstep, toY, fromX, fromY);\n        }\n        // else we didn't find even black-white-black; no estimate is really possible\n        return NaN;\n    };\n    /**\n     * <p>Attempts to locate an alignment pattern in a limited region of the image, which is\n     * guessed to contain it. This method uses {@link AlignmentPattern}.</p>\n     *\n     * @param overallEstModuleSize estimated module size so far\n     * @param estAlignmentX x coordinate of center of area probably containing alignment pattern\n     * @param estAlignmentY y coordinate of above\n     * @param allowanceFactor number of pixels in all directions to search from the center\n     * @return {@link AlignmentPattern} if found, or null otherwise\n     * @throws NotFoundException if an unexpected error occurs during detection\n     */\n    Detector.prototype.findAlignmentInRegion = function (overallEstModuleSize /*float*/, estAlignmentX /*int*/, estAlignmentY /*int*/, allowanceFactor /*float*/) {\n        // Look for an alignment pattern (3 modules in size) around where it\n        // should be\n        var allowance = /*(int) */ Math.floor(allowanceFactor * overallEstModuleSize);\n        var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\n        var alignmentAreaRightX = Math.min(this.image.getWidth() - 1, estAlignmentX + allowance);\n        if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\n            throw new NotFoundException('Alignment top exceeds estimated module size.');\n        }\n        var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\n        var alignmentAreaBottomY = Math.min(this.image.getHeight() - 1, estAlignmentY + allowance);\n        if (alignmentAreaBottomY - alignmentAreaTopY < overallEstModuleSize * 3) {\n            throw new NotFoundException('Alignment bottom exceeds estimated module size.');\n        }\n        var alignmentFinder = new AlignmentPatternFinder(this.image, alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, this.resultPointCallback);\n        return alignmentFinder.find();\n    };\n    return Detector;\n}());\nexport default Detector;\n//# sourceMappingURL=Detector.js.map"]},"metadata":{},"sourceType":"module"}