{"ast":null,"code":"import { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\"; // Styles\n\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n/**\n * @public\n */\n\nconst metadata = {\n  tag: \"ui5-daterange-picker\",\n  properties:\n  /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */\n  {\n    /**\n     * Determines the symbol which separates the dates.\n     * If not supplied, the default time interval delimiter for the current locale will be used.\n     *\n     * @type {string}\n     * @public\n     */\n    delimiter: {\n      type: String,\n      defaultValue: \"-\"\n    },\n\n    /**\n     * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n     * @private\n     */\n    _tempValue: {\n      type: String\n    }\n  }\n};\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\n\nclass DateRangePicker extends DatePicker {\n  static get metadata() {\n    return metadata;\n  }\n\n  static get styles() {\n    return [DatePicker.styles, DateRangePickerCss];\n  }\n  /**\n   * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n   *\n   * @readonly\n   * @type { Date }\n   * @public\n   */\n\n\n  get dateValue() {\n    return null;\n  }\n  /**\n   * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n   *\n   * @readonly\n   * @type { Date }\n   * @public\n   */\n\n\n  get dateValueUTC() {\n    return null;\n  }\n\n  get _startDateTimestamp() {\n    return this._extractFirstTimestamp(this.value);\n  }\n\n  get _endDateTimestamp() {\n    return this._extractLastTimestamp(this.value);\n  }\n\n  get _tempTimestamp() {\n    return this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n  }\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n\n\n  get _calendarSelectionMode() {\n    return \"Range\";\n  }\n  /**\n   * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n   * @override\n   */\n\n\n  get _calendarTimestamp() {\n    return this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n  }\n  /**\n   * Required by DatePicker.js\n   * @override\n   */\n\n\n  get _calendarSelectedDates() {\n    if (this._tempValue) {\n      return [this._tempValue];\n    }\n\n    if (this.value && this._checkValueValidity(this.value)) {\n      return this._splitValueByDelimiter(this.value);\n    }\n\n    return [];\n  }\n  /**\n   * Returns the start date of the currently selected range as JavaScript Date instance.\n   *\n   * @readonly\n   * @type { Date }\n   * @public\n   */\n\n\n  get startDateValue() {\n    return CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n  }\n  /**\n   * Returns the end date of the currently selected range as JavaScript Date instance.\n   *\n   * @readonly\n   * @type { Date }\n   * @public\n   */\n\n\n  get endDateValue() {\n    return CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n  }\n  /**\n   * @override\n   */\n\n\n  get _placeholder() {\n    return this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n  }\n\n  get dateAriaDescription() {\n    return DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n  }\n  /**\n   * @override\n   */\n\n\n  async _onInputSubmit(event) {\n    const input = this._getInput();\n\n    const caretPos = input.getCaretPosition();\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n  }\n  /**\n   * @override\n   */\n\n\n  onResponsivePopoverAfterClose() {\n    this._tempValue = \"\"; // reset _tempValue on popover close\n\n    super.onResponsivePopoverAfterClose();\n  }\n  /**\n   * @override\n   */\n\n\n  isValid(value) {\n    const parts = this._splitValueByDelimiter(value);\n\n    return parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n  }\n  /**\n   * @override\n   */\n\n\n  isInValidRange(value) {\n    return this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n  }\n  /**\n   * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n   * @override\n   */\n\n\n  normalizeValue(value) {\n    const firstDateTimestamp = this._extractFirstTimestamp(value);\n\n    const lastDateTimestamp = this._extractLastTimestamp(value);\n\n    if (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) {\n      // if both are timestamps (not undefined), flip if necessary\n      return this._buildValue(lastDateTimestamp, firstDateTimestamp);\n    }\n\n    return this._buildValue(firstDateTimestamp, lastDateTimestamp);\n  }\n  /**\n   * @override\n   */\n\n\n  onSelectedDatesChange(event) {\n    event.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\n    const values = event.detail.values;\n\n    if (values.length === 0) {\n      return;\n    }\n\n    if (values.length === 1) {\n      // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n      this._tempValue = values[0];\n      return;\n    }\n\n    const newValue = this._buildValue(...event.detail.dates); // the value will be normalized so we don't need to order them here\n\n\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n    this.closePicker();\n  }\n  /**\n   * @override\n   */\n\n\n  async _modifyDateValue(amount, unit) {\n    if (!this._endDateTimestamp) {\n      // If empty or only one date -> treat as datepicker entirely\n      return super._modifyDateValue(amount, unit);\n    }\n\n    const input = this._getInput();\n\n    let caretPos = input.getCaretPosition();\n    let newValue;\n\n    if (caretPos <= this.value.indexOf(this._effectiveDelimiter)) {\n      // The user is focusing the first date -> change it and keep the seoond date\n      const startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n      const newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\n      if (newStartDateTimestamp > this._endDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the last date\n        caretPos += Math.ceil(this.value.length / 2);\n      }\n\n      newValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n    } else {\n      const endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n      const newEndDateTimestamp = endDateModified.valueOf() / 1000;\n      newValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\n      if (newEndDateTimestamp < this._startDateTimestamp) {\n        // dates flipped -> move the caret to the same position but on the first date\n        caretPos -= Math.ceil(this.value.length / 2);\n      }\n    }\n\n    this._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n    await renderFinished();\n    input.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n  }\n\n  get _effectiveDelimiter() {\n    return this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n  }\n\n  _splitValueByDelimiter(value) {\n    const valuesArray = [];\n    const partsArray = value.split(this._effectiveDelimiter);\n    valuesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n    valuesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n    return valuesArray;\n  }\n  /**\n   * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n   * @private\n   */\n\n\n  _extractFirstTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n\n    const dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\n\n    return this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n  }\n  /**\n   * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n   * @private\n   */\n\n\n  _extractLastTimestamp(value) {\n    if (!value || !this._checkValueValidity(value)) {\n      return undefined;\n    }\n\n    const dateStrings = this._splitValueByDelimiter(value);\n\n    if (dateStrings[1]) {\n      return this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n    }\n\n    return undefined;\n  }\n  /**\n   * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n   * @private\n   */\n\n\n  _buildValue(firstDateTimestamp, lastDateTimestamp) {\n    if (firstDateTimestamp) {\n      const firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n      if (!lastDateTimestamp) {\n        return firstDateString;\n      }\n\n      const lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\n      return `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n    }\n\n    return \"\";\n  }\n\n}\n\nDateRangePicker.define();\nexport default DateRangePicker;","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents/dist/DateRangePicker.js"],"names":["renderFinished","CalendarDate","modifyDateBy","getTodayUTCTimestamp","DATERANGE_DESCRIPTION","DateRangePickerCss","DatePicker","metadata","tag","properties","delimiter","type","String","defaultValue","_tempValue","DateRangePicker","styles","dateValue","dateValueUTC","_startDateTimestamp","_extractFirstTimestamp","value","_endDateTimestamp","_extractLastTimestamp","_tempTimestamp","getFormat","parse","getTime","_calendarSelectionMode","_calendarTimestamp","_primaryCalendarType","_calendarSelectedDates","_checkValueValidity","_splitValueByDelimiter","startDateValue","fromTimestamp","toLocalJSDate","endDateValue","_placeholder","placeholder","undefined","_displayFormat","_effectiveDelimiter","dateAriaDescription","i18nBundle","getText","_onInputSubmit","event","input","_getInput","caretPos","getCaretPosition","setCaretPosition","onResponsivePopoverAfterClose","isValid","parts","length","every","dateString","isInValidRange","normalizeValue","firstDateTimestamp","lastDateTimestamp","_buildValue","onSelectedDatesChange","preventDefault","values","detail","newValue","dates","_updateValueAndFireEvents","closePicker","_modifyDateValue","amount","unit","indexOf","startDateModified","_minDate","_maxDate","newStartDateTimestamp","valueOf","Math","ceil","endDateModified","newEndDateTimestamp","constructor","getMetadata","getProperties","valuesArray","partsArray","split","slice","join","dateStrings","firstDateString","_getStringFromTimestamp","lastDateString","define"],"mappings":"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","sourcesContent":["import { renderFinished } from \"@ui5/webcomponents-base/dist/Render.js\";\nimport CalendarDate from \"@ui5/webcomponents-localization/dist/dates/CalendarDate.js\";\nimport modifyDateBy from \"@ui5/webcomponents-localization/dist/dates/modifyDateBy.js\";\nimport getTodayUTCTimestamp from \"@ui5/webcomponents-localization/dist/dates/getTodayUTCTimestamp.js\";\nimport { DATERANGE_DESCRIPTION } from \"./generated/i18n/i18n-defaults.js\";\n\n// Styles\nimport DateRangePickerCss from \"./generated/themes/DateRangePicker.css.js\";\nimport DatePicker from \"./DatePicker.js\";\n\n/**\n * @public\n */\nconst metadata = {\n\ttag: \"ui5-daterange-picker\",\n\tproperties: /** @lends sap.ui.webcomponents.main.DateRangePicker.prototype */ {\n\t\t/**\n\t\t * Determines the symbol which separates the dates.\n\t\t * If not supplied, the default time interval delimiter for the current locale will be used.\n\t\t *\n\t\t * @type {string}\n\t\t * @public\n\t\t */\n\t\tdelimiter: {\n\t\t\ttype: String,\n\t\t\tdefaultValue: \"-\",\n\t\t},\n\n\t\t/**\n\t\t * The first date in the range during selection (this is a temporary value, not the first date in the value range)\n\t\t * @private\n\t\t */\n\t\t_tempValue: {\n\t\t\ttype: String,\n\t\t},\n\t},\n};\n\n/**\n * @class\n *\n * <h3 class=\"comment-api-title\">Overview</h3>\n * The DateRangePicker enables the users to enter a localized date range using touch, mouse, keyboard input, or by selecting a date range in the calendar.\n *\n * <h3>Usage</h3>\n * The user can enter a date by:\n * Using the calendar that opens in a popup or typing it in directly in the input field (not available for mobile devices).\n * For the <code>ui5-daterange-picker</code>\n * <h3>ES6 Module Import</h3>\n *\n * <code>import \"@ui5/webcomponents/dist/DateRangePicker.js\";</code>\n *\n * <h3>Keyboard Handling</h3>\n * The <code>ui5-daterange-picker</code> provides advanced keyboard handling.\n * <br>\n *\n * When the <code>ui5-daterange-picker</code> input field is focused the user can\n * increment or decrement respectively the range start or end date, depending on where the cursor is.\n * The following shortcuts are available:\n * <br>\n * <ul>\n * <li>[PAGEDOWN] - Decrements the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEDOWN] - Decrements the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEDOWN] - Decrements the corresponding year by one</li>\n * <li>[PAGEUP] - Increments the corresponding day of the month by one</li>\n * <li>[SHIFT] + [PAGEUP] - Increments the corresponding month by one</li>\n * <li>[SHIFT] + [CTRL] + [PAGEUP] - Increments the corresponding year by one</li>\n * </ul>\n *\n * @constructor\n * @author SAP SE\n * @alias sap.ui.webcomponents.main.DateRangePicker\n * @extends DatePicker\n * @tagname ui5-daterange-picker\n * @since 1.0.0-rc.8\n * @public\n */\nclass DateRangePicker extends DatePicker {\n\tstatic get metadata() {\n\t\treturn metadata;\n\t}\n\n\tstatic get styles() {\n\t\treturn [DatePicker.styles, DateRangePickerCss];\n\t}\n\n\t/**\n\t * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget dateValue() {\n\t\treturn null;\n\t}\n\n\t/**\n\t * <b>Note:</b> The getter method is inherited and not supported. If called it will return an empty value.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget dateValueUTC() {\n\t\treturn null;\n\t}\n\n\tget _startDateTimestamp() {\n\t\treturn this._extractFirstTimestamp(this.value);\n\t}\n\n\tget _endDateTimestamp() {\n\t\treturn this._extractLastTimestamp(this.value);\n\t}\n\n\tget _tempTimestamp() {\n\t\treturn this._tempValue && this.getFormat().parse(this._tempValue, true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectionMode() {\n\t\treturn \"Range\";\n\t}\n\n\t/**\n\t * Required by DatePicker.js - set the calendar focus on the first selected date (or today if not set)\n\t * @override\n\t */\n\tget _calendarTimestamp() {\n\t\treturn this._tempTimestamp || this._startDateTimestamp || getTodayUTCTimestamp(this._primaryCalendarType);\n\t}\n\n\t/**\n\t * Required by DatePicker.js\n\t * @override\n\t */\n\tget _calendarSelectedDates() {\n\t\tif (this._tempValue) {\n\t\t\treturn [this._tempValue];\n\t\t}\n\t\tif (this.value && this._checkValueValidity(this.value)) {\n\t\t\treturn this._splitValueByDelimiter(this.value);\n\t\t}\n\t\treturn [];\n\t}\n\n\t/**\n\t * Returns the start date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget startDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._startDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * Returns the end date of the currently selected range as JavaScript Date instance.\n\t *\n\t * @readonly\n\t * @type { Date }\n\t * @public\n\t */\n\tget endDateValue() {\n\t\treturn CalendarDate.fromTimestamp(this._endDateTimestamp * 1000).toLocalJSDate();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tget _placeholder() {\n\t\treturn this.placeholder !== undefined ? this.placeholder : `${this._displayFormat} ${this._effectiveDelimiter} ${this._displayFormat}`;\n\t}\n\n\tget dateAriaDescription() {\n\t\treturn DateRangePicker.i18nBundle.getText(DATERANGE_DESCRIPTION);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _onInputSubmit(event) {\n\t\tconst input = this._getInput();\n\t\tconst caretPos = input.getCaretPosition();\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret on the previous position after rendering\n\t}\n\n\t/**\n\t * @override\n\t */\n\t onResponsivePopoverAfterClose() {\n\t\tthis._tempValue = \"\"; // reset _tempValue on popover close\n\t\tsuper.onResponsivePopoverAfterClose();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisValid(value) {\n\t\tconst parts = this._splitValueByDelimiter(value);\n\t\treturn parts.length <= 2 && parts.every(dateString => super.isValid(dateString)); // must be at most 2 dates and each must be valid\n\t}\n\n\t/**\n\t * @override\n\t */\n\tisInValidRange(value) {\n\t\treturn this._splitValueByDelimiter(value).every(dateString => super.isInValidRange(dateString));\n\t}\n\n\t/**\n\t * Extract both dates as timestamps, flip if necessary, and build (which will use the desired format so we enforce the format too)\n\t * @override\n\t */\n\tnormalizeValue(value) {\n\t\tconst firstDateTimestamp = this._extractFirstTimestamp(value);\n\t\tconst lastDateTimestamp = this._extractLastTimestamp(value);\n\t\tif (firstDateTimestamp && lastDateTimestamp && firstDateTimestamp > lastDateTimestamp) { // if both are timestamps (not undefined), flip if necessary\n\t\t\treturn this._buildValue(lastDateTimestamp, firstDateTimestamp);\n\t\t}\n\t\treturn this._buildValue(firstDateTimestamp, lastDateTimestamp);\n\t}\n\n\t/**\n\t * @override\n\t */\n\tonSelectedDatesChange(event) {\n\t\tevent.preventDefault(); // never let the calendar update its own dates, the parent component controls them\n\t\tconst values = event.detail.values;\n\n\t\tif (values.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (values.length === 1) { // Do nothing until the user selects 2 dates, we don't change any state at all for one date\n\t\t\tthis._tempValue = values[0];\n\t\t\treturn;\n\t\t}\n\n\t\tconst newValue = this._buildValue(...event.detail.dates); // the value will be normalized so we don't need to order them here\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\t\tthis.closePicker();\n\t}\n\n\t/**\n\t * @override\n\t */\n\tasync _modifyDateValue(amount, unit) {\n\t\tif (!this._endDateTimestamp) { // If empty or only one date -> treat as datepicker entirely\n\t\t\treturn super._modifyDateValue(amount, unit);\n\t\t}\n\n\t\tconst input = this._getInput();\n\t\tlet caretPos = input.getCaretPosition();\n\t\tlet newValue;\n\n\t\tif (caretPos <= this.value.indexOf(this._effectiveDelimiter)) { // The user is focusing the first date -> change it and keep the seoond date\n\t\t\tconst startDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._startDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newStartDateTimestamp = startDateModified.valueOf() / 1000;\n\t\t\tif (newStartDateTimestamp > this._endDateTimestamp) { // dates flipped -> move the caret to the same position but on the last date\n\t\t\t\tcaretPos += Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t\tnewValue = this._buildValue(newStartDateTimestamp, this._endDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t} else {\n\t\t\tconst endDateModified = modifyDateBy(CalendarDate.fromTimestamp(this._endDateTimestamp * 1000), amount, unit, this._minDate, this._maxDate);\n\t\t\tconst newEndDateTimestamp = endDateModified.valueOf() / 1000;\n\t\t\tnewValue = this._buildValue(this._startDateTimestamp, newEndDateTimestamp); // the value will be normalized so we don't try to order them here\n\t\t\tif (newEndDateTimestamp < this._startDateTimestamp) { // dates flipped -> move the caret to the same position but on the first date\n\t\t\t\tcaretPos -= Math.ceil(this.value.length / 2);\n\t\t\t}\n\t\t}\n\t\tthis._updateValueAndFireEvents(newValue, true, [\"change\", \"value-changed\"]);\n\n\t\tawait renderFinished();\n\t\tinput.setCaretPosition(caretPos); // Return the caret to the previous (or the adjusted, if dates flipped) position after rendering\n\t}\n\n\tget _effectiveDelimiter() {\n\t\treturn this.delimiter || this.constructor.getMetadata().getProperties().delimiter.defaultValue; // treat empty string as the default value\n\t}\n\n\t_splitValueByDelimiter(value) {\n\t\tconst valuesArray = [];\n\t\tconst partsArray = value.split(this._effectiveDelimiter);\n\n\t\tvaluesArray[0] = partsArray.slice(0, partsArray.length / 2).join(this._effectiveDelimiter);\n\t\tvaluesArray[1] = partsArray.slice(partsArray.length / 2).join(this._effectiveDelimiter);\n\n\t\treturn valuesArray;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the first date in the value string or undefined if the value is empty\n\t * @private\n\t */\n\t_extractFirstTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value); // at least one item guaranteed due to the checks above (non-empty and valid)\n\t\treturn this.getFormat().parse(dateStrings[0], true).getTime() / 1000;\n\t}\n\n\t/**\n\t * Returns a UTC timestamp, representing the last date in the value string or undefined if the value is empty or there is just one date\n\t * @private\n\t */\n\t_extractLastTimestamp(value) {\n\t\tif (!value || !this._checkValueValidity(value)) {\n\t\t\treturn undefined;\n\t\t}\n\n\t\tconst dateStrings = this._splitValueByDelimiter(value);\n\t\tif (dateStrings[1]) {\n\t\t\treturn this.getFormat().parse(dateStrings[1], true).getTime() / 1000;\n\t\t}\n\n\t\treturn undefined;\n\t}\n\n\t/**\n\t * Builds a string value out of two UTC timestamps - this method is the counterpart to _extractFirstTimestamp/_extractLastTimestamp\n\t * @private\n\t */\n\t_buildValue(firstDateTimestamp, lastDateTimestamp) {\n\t\tif (firstDateTimestamp) {\n\t\t\tconst firstDateString = this._getStringFromTimestamp(firstDateTimestamp * 1000);\n\n\t\t\tif (!lastDateTimestamp) {\n\t\t\t\treturn firstDateString;\n\t\t\t}\n\n\t\t\tconst lastDateString = this._getStringFromTimestamp(lastDateTimestamp * 1000);\n\t\t\treturn `${firstDateString} ${this._effectiveDelimiter} ${lastDateString}`;\n\t\t}\n\n\t\treturn \"\";\n\t}\n}\n\nDateRangePicker.define();\n\nexport default DateRangePicker;\n"]},"metadata":{},"sourceType":"module"}