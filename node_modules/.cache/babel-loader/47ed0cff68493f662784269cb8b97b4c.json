{"ast":null,"code":"import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport '@ui5/webcomponents/dist/TextArea.js';\n/**\n * The `TextArea` component is used to enter multiple lines of text.\n *\n * When empty, it can hold a placeholder similar to a `Input`. You can define the rows of the `TextArea` and also determine specific behavior when handling long texts.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/TextArea\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\n\nvar TextArea = withWebComponent('ui5-textarea', ['accessibleName', 'accessibleNameRef', 'growingMaxLines', 'maxlength', 'name', 'placeholder', 'rows', 'value', 'valueState'], ['disabled', 'growing', 'readonly', 'required', 'showExceededText'], ['valueStateMessage'], ['change', 'input']);\nTextArea.displayName = 'TextArea';\nTextArea.defaultProps = {\n  growingMaxLines: 0,\n  maxlength: null,\n  rows: 0,\n  valueState: ValueState.None\n};\nexport { TextArea };","map":{"version":3,"sources":["../src/webComponents/TextArea/index.tsx"],"names":["TextArea","withWebComponent","growingMaxLines","maxlength","rows","valueState","ValueState","None"],"mappings":";;;AAyHA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMA,QAAQ,GAAGC,gBAAgB,CAAA,cAAA,EAE/B,CAAA,gBAAA,EAAA,mBAAA,EAAA,iBAAA,EAAA,WAAA,EAAA,MAAA,EAAA,aAAA,EAAA,MAAA,EAAA,OAAA,EAF+B,YAE/B,CAF+B,EAa/B,CAAA,UAAA,EAAA,SAAA,EAAA,UAAA,EAAA,UAAA,EAb+B,kBAa/B,CAb+B,EAc/B,CAd+B,mBAc/B,CAd+B,EAe/B,CAAA,QAAA,EAf+B,OAe/B,CAf+B,C;AAkBjCD,QAAQ,CAARA,WAAAA,GAAAA,UAAAA;AAEAA,QAAQ,CAARA,YAAAA,GAAwB;AACtBE,EAAAA,eAAe,EADO,CAAA;AAEtBC,EAAAA,SAAS,EAFa,IAAA;AAGtBC,EAAAA,IAAI,EAHkB,CAAA;AAItBC,EAAAA,UAAU,EAAEC,UAAU,CAACC;AAJD,CAAxBP","sourcesContent":["import { ValueState } from '@ui5/webcomponents-react/dist/ValueState';\nimport { withWebComponent } from '@ui5/webcomponents-react/dist/withWebComponent';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { Ui5CustomEvent } from '@ui5/webcomponents-react/interfaces/Ui5CustomEvent';\nimport { Ui5DomRef } from '@ui5/webcomponents-react/interfaces/Ui5DomRef';\nimport { ReactNode } from 'react';\n\nimport '@ui5/webcomponents/dist/TextArea.js';\n\ninterface TextAreaAttributes {\n  /**\n   * Sets the accessible aria name of the component.\n   */\n  accessibleName?: string;\n  /**\n   * Receives id(or many ids) of the elements that label the textarea.\n   */\n  accessibleNameRef?: string;\n  /**\n   * Indicates whether the user can interact with the component or not.\n   *\n   * **Note:** A disabled component is completely noninteractive.\n   */\n  disabled?: boolean;\n  /**\n   * Enables the component to automatically grow and shrink dynamically with its content.\n   *\n   * **Note:** If set to `true`, the CSS `height` property is ignored.\n   */\n  growing?: boolean;\n  /**\n   * Defines the maximum number of lines that the component can grow.\n   */\n  growingMaxLines?: number;\n  /**\n   * Defines the maximum number of characters that the `value` can have.\n   */\n  maxlength?: number;\n  /**\n   * Determines the name with which the component will be submitted in an HTML form.\n   *\n   * **Important:** For the `name` property to have effect, you must add the following import to your project: `import \"@ui5/webcomponents/dist/features/InputElementsFormSupport.js\";`\n   *\n   * **Note:** When set, a native `input` HTML element will be created inside the component so that it can be submitted as part of an HTML form. Do not use this property unless you need to submit a form.\n   */\n  name?: string;\n  /**\n   * Defines a short hint intended to aid the user with data entry when the component has no value.\n   */\n  placeholder?: string;\n  /**\n   * Defines whether the component is read-only.\n   *\n   * **Note:** A read-only component is not editable, but still provides visual feedback upon user interaction.\n   */\n  readonly?: boolean;\n  /**\n   * Defines whether the component is required.\n   */\n  required?: boolean;\n  /**\n   * Defines the number of visible text lines for the component.\n   *\n   * **Notes:**\n   *\n   * *   If the `growing` property is enabled, this property defines the minimum rows to be displayed in the textarea.\n   * *   The CSS `height` property wins over the `rows` property, if both are set.\n   */\n  rows?: number;\n  /**\n   * Determines whether the characters exceeding the maximum allowed character count are visible in the component.\n   *\n   * If set to `false`, the user is not allowed to enter more characters than what is set in the `maxlength` property. If set to `true` the characters exceeding the `maxlength` value are selected on paste and the counter below the component displays their number.\n   */\n  showExceededText?: boolean;\n  /**\n   * Defines the value of the component.\n   */\n  value?: string;\n  /**\n   * Defines the value state of the component.\n   *\n   * Available options are:\n   *\n   * *   `None`\n   * *   `Error`\n   * *   `Warning`\n   * *   `Success`\n   * *   `Information`\n   *\n   *\n   *\n   * **Note:** If `maxlength` property is set, the component turns into \"Warning\" state once the characters exceeds the limit. In this case, only the \"Error\" state is considered and can be applied.\n   */\n  valueState?: ValueState | keyof typeof ValueState;\n}\n\nexport interface TextAreaDomRef extends TextAreaAttributes, Ui5DomRef {}\n\nexport interface TextAreaPropTypes extends TextAreaAttributes, Omit<CommonProps, 'onChange' | 'onInput'> {\n  /**\n   * Defines the value state message that will be displayed as pop up under the component.\n   *\n   * **Note:** If not specified, a default text (in the respective language) will be displayed.\n   *\n   * **Note:** The `valueStateMessage` would be displayed if the component has `valueState` of type `Information`, `Warning` or `Error`.\n   *\n   * __Note:__ When passing a custom React component to this prop, you have to make sure your component reads the `slot` prop and appends it to the most outer element of your component.\n   * Learn more about it [here](https://sap.github.io/ui5-webcomponents-react/?path=/docs/knowledge-base--page#adding-custom-components-to-slots).\n   */\n  valueStateMessage?: ReactNode | ReactNode[];\n  /**\n   * Fired when the text has changed and the focus leaves the component.\n   */\n  onChange?: (event: Ui5CustomEvent<HTMLTextAreaElement>) => void;\n  /**\n   * Fired when the value of the component changes at each keystroke or when something is pasted.\n   */\n  onInput?: (event: Ui5CustomEvent<HTMLTextAreaElement>) => void;\n}\n\n/**\n * The `TextArea` component is used to enter multiple lines of text.\n *\n * When empty, it can hold a placeholder similar to a `Input`. You can define the rows of the `TextArea` and also determine specific behavior when handling long texts.\n *\n * <ui5-link href=\"https://sap.github.io/ui5-webcomponents/playground/components/TextArea\" target=\"_blank\">UI5 Web Components Playground</ui5-link>\n */\nconst TextArea = withWebComponent<TextAreaPropTypes, TextAreaDomRef>(\n  'ui5-textarea',\n  [\n    'accessibleName',\n    'accessibleNameRef',\n    'growingMaxLines',\n    'maxlength',\n    'name',\n    'placeholder',\n    'rows',\n    'value',\n    'valueState'\n  ],\n  ['disabled', 'growing', 'readonly', 'required', 'showExceededText'],\n  ['valueStateMessage'],\n  ['change', 'input']\n);\n\nTextArea.displayName = 'TextArea';\n\nTextArea.defaultProps = {\n  growingMaxLines: 0,\n  maxlength: null,\n  rows: 0,\n  valueState: ValueState.None\n};\n\nexport { TextArea };\n"]},"metadata":{},"sourceType":"module"}