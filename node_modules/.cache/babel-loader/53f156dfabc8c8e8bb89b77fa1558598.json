{"ast":null,"code":"import _toConsumableArray from \"/Users/flo/Desktop/mdao.fioriapp/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { html as t, svg as e } from \"./lit-html.js\";\n/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nvar o = function o(t) {\n  return {\n    It: t\n  };\n},\n    r = function r(t) {\n  for (var _len = arguments.length, e = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    e[_key - 1] = arguments[_key];\n  }\n\n  return {\n    It: e.reduce(function (e, o, r) {\n      return e + function (t) {\n        if (void 0 !== t.It) return t.It;\n        throw Error(\"Value passed to 'literal' function must be a 'literal' result: \".concat(t, \". Use 'unsafeStatic' to pass non-literal values, but\\n            take care to ensure page security.\"));\n      }(o) + t[r + 1];\n    }, t[0])\n  };\n},\n    i = new Map(),\n    a = function a(t) {\n  return function (e) {\n    for (var _len2 = arguments.length, o = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      o[_key2 - 1] = arguments[_key2];\n    }\n\n    var r;\n    var a = o.length;\n    var l, s;\n    var n = [],\n        u = [];\n    var c,\n        $ = 0,\n        v = !1;\n\n    for (; $ < a;) {\n      for (c = e[$]; $ < a && void 0 !== (s = o[$], l = null === (r = s) || void 0 === r ? void 0 : r.It);) {\n        c += l + e[++$], v = !0;\n      }\n\n      u.push(s), n.push(c), $++;\n    }\n\n    if ($ === a && n.push(e[a]), v) {\n      var _t = n.join(\"$$lit$$\");\n\n      void 0 === (e = i.get(_t)) && i.set(_t, e = n), o = u;\n    }\n\n    return t.apply(void 0, [e].concat(_toConsumableArray(o)));\n  };\n},\n    l = a(t),\n    s = a(e);\n\nexport { l as html, r as literal, s as svg, o as unsafeStatic, a as withStatic };","map":{"version":3,"sources":["src/static.ts"],"names":["unsafeStatic","value","It","_$litStatic$","undefined","Error","literal","strings","values","reduce","acc","v","idx","stringsCache","Map","withStatic","coreTag","l","length","staticValue","dynamicValue","staticStrings","dynamicValues","i","hasStatics","s","push","key","join","get","set","html","coreHtml","svg","coreSvg"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport {html as coreHtml, svg as coreSvg, TemplateResult} from './lit-html.js';\n\n/**\n * Wraps a string so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Note that this function is unsafe to use on untrusted content, as it will be\n * directly parsed into HTML. Do not pass user input to this function\n * without sanitizing it.\n *\n * Static values can be changed, but they will cause a complete re-render\n * since they effectively create a new template.\n */\nexport const unsafeStatic = (value: string) => ({\n  _$litStatic$: value,\n});\n\nconst textFromStatic = (value: StaticValue) => {\n  if (value._$litStatic$ !== undefined) {\n    return value._$litStatic$;\n  } else {\n    throw new Error(\n      `Value passed to 'literal' function must be a 'literal' result: ${value}. Use 'unsafeStatic' to pass non-literal values, but\n            take care to ensure page security.`\n    );\n  }\n};\n\n/**\n * Tags a string literal so that it behaves like part of the static template\n * strings instead of a dynamic value.\n *\n * The only values that may be used in template expressions are other tagged\n * `literal` results or `unsafeStatic` values (note that untrusted content\n * should never be passed to `unsafeStatic`).\n *\n * Users must take care to ensure that adding the static string to the template\n * results in well-formed HTML, or else templates may break unexpectedly.\n *\n * Static values can be changed, but they will cause a complete re-render since\n * they effectively create a new template.\n */\nexport const literal = (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n) => ({\n  _$litStatic$: values.reduce(\n    (acc, v, idx) => acc + textFromStatic(v as StaticValue) + strings[idx + 1],\n    strings[0]\n  ),\n});\n\ntype StaticValue = ReturnType<typeof unsafeStatic>;\n\nconst stringsCache = new Map<string, TemplateStringsArray>();\n\n/**\n * Wraps a lit-html template tag (`html` or `svg`) to add static value support.\n */\nexport const withStatic = (coreTag: typeof coreHtml | typeof coreSvg) => (\n  strings: TemplateStringsArray,\n  ...values: unknown[]\n): TemplateResult => {\n  const l = values.length;\n  let staticValue: string | undefined;\n  let dynamicValue: unknown;\n  const staticStrings: Array<string> = [];\n  const dynamicValues: Array<unknown> = [];\n  let i = 0;\n  let hasStatics = false;\n  let s: string;\n\n  while (i < l) {\n    s = strings[i];\n    // Collect any unsafeStatic values, and their following template strings\n    // so that we treat a run of template strings and unsafe static values as\n    // a single template string.\n    while (\n      i < l &&\n      ((dynamicValue = values[i]),\n      (staticValue = (dynamicValue as StaticValue)?._$litStatic$)) !== undefined\n    ) {\n      s += staticValue + strings[++i];\n      hasStatics = true;\n    }\n    dynamicValues.push(dynamicValue);\n    staticStrings.push(s);\n    i++;\n  }\n  // If the last value isn't static (which would have consumed the last\n  // string), then we need to add the last string.\n  if (i === l) {\n    staticStrings.push(strings[l]);\n  }\n\n  if (hasStatics) {\n    const key = staticStrings.join('$$lit$$');\n    strings = stringsCache.get(key)!;\n    if (strings === undefined) {\n      stringsCache.set(\n        key,\n        (strings = (staticStrings as unknown) as TemplateStringsArray)\n      );\n    }\n    values = dynamicValues;\n  }\n  return coreTag(strings, ...values);\n};\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const html = withStatic(coreHtml);\n\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n *\n * Includes static value support from `lit-html/static.js`.\n */\nexport const svg = withStatic(coreSvg);\n"]},"metadata":{},"sourceType":"module"}