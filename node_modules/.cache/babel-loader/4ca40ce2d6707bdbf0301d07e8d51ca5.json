{"ast":null,"code":"import _extends from '@babel/runtime/helpers/extends';\nimport _objectSpread from '@babel/runtime/helpers/objectSpread2';\nimport _slicedToArray from '@babel/runtime/helpers/slicedToArray';\nimport _objectWithoutProperties from '@babel/runtime/helpers/objectWithoutProperties';\nimport { createUseStyles } from 'react-jss';\nimport { useSyncRef, useI18nBundle, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { debounce, enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { SHOW_MORE } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';\nimport { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';\nimport React, { useRef, useState, useCallback, useEffect, forwardRef, useMemo, cloneElement, createRef } from 'react';\nimport '@ui5/webcomponents-icons/dist/overflow.js';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';\nimport { Popover } from '@ui5/webcomponents-react/dist/Popover';\nimport { ToggleButton } from '@ui5/webcomponents-react/dist/ToggleButton';\nimport { createPortal } from 'react-dom';\nimport { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\nimport clsx from 'clsx';\n\nvar stopPropagation = function stopPropagation(e) {\n  var _e$stopImmediatePropa;\n\n  e.stopPropagation();\n  (_e$stopImmediatePropa = e.stopImmediatePropagation) === null || _e$stopImmediatePropa === void 0 ? void 0 : _e$stopImmediatePropa.call(e);\n};\n\nvar OverflowPopover = function OverflowPopover(props) {\n  var lastVisibleIndex = props.lastVisibleIndex,\n      contentClass = props.contentClass,\n      children = props.children,\n      portalContainer = props.portalContainer,\n      overflowContentRef = props.overflowContentRef,\n      numberOfAlwaysVisibleItems = props.numberOfAlwaysVisibleItems;\n  var popoverRef = useRef();\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      pressed = _useState2[0],\n      setPressed = _useState2[1];\n\n  var handleToggleButtonClick = useCallback(function (e) {\n    e.stopPropagation();\n\n    if (popoverRef.current) {\n      if (!pressed) {\n        popoverRef.current.showAt(e.target);\n        setPressed(true);\n      } else {\n        popoverRef.current.close();\n      }\n    }\n  }, [pressed]);\n  useEffect(function () {\n    return function () {\n      if (popoverRef.current) {\n        popoverRef.current.close();\n      }\n    };\n  }, []);\n  var handleClose = useCallback(function (e) {\n    stopPropagation(e);\n    setPressed(false);\n  }, [setPressed]);\n  var renderChildren = useCallback(function () {\n    return React.Children.toArray((children === null || children === void 0 ? void 0 : children.type) === React.Fragment ? children.props.children : children).map(function (item, index) {\n      if (index > lastVisibleIndex && index > numberOfAlwaysVisibleItems - 1) {\n        if (item.type.displayName === 'ToolbarSeparator') {\n          return /*#__PURE__*/React.cloneElement(item, {\n            style: {\n              height: '0.0625rem',\n              margin: '0.375rem 0.1875rem',\n              width: '100%'\n            }\n          });\n        }\n\n        return item;\n      }\n\n      return null;\n    });\n  }, [children, lastVisibleIndex]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ToggleButton, {\n    design: ButtonDesign.Transparent,\n    icon: \"overflow\",\n    onClick: handleToggleButtonClick,\n    pressed: pressed\n  }), /*#__PURE__*/createPortal( /*#__PURE__*/React.createElement(Popover, {\n    placementType: PopoverPlacementType.Bottom,\n    ref: popoverRef,\n    onAfterClose: handleClose,\n    hideArrow: true\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: contentClass,\n    ref: overflowContentRef\n  }, renderChildren())), portalContainer));\n};\n\nvar styles = {\n  outerContainer: {\n    boxSizing: 'border-box',\n    width: '100%',\n    maxWidth: '100%',\n    height: CssSizeVariables.sapWcrToolbarHeight,\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: \"solid 0.0625rem \".concat(ThemingParameters.sapGroup_TitleBorderColor)\n  },\n  hasOverflow: {\n    '& $toolbar': {\n      maxWidth: 'calc(100% - 44px)'\n    }\n  },\n  clear: {\n    borderBottom: 'none'\n  },\n  active: {\n    cursor: 'pointer',\n    '&:active': {\n      backgroundColor: ThemingParameters.sapActiveColor\n    },\n    '&:hover': {\n      backgroundColor: ThemingParameters.sapList_Hover_Background\n    }\n  },\n  info: {\n    // This color is most similar to darken(@sapUiBaseColor, 10)\n    backgroundColor: ThemingParameters.sapList_HeaderBorderColor,\n    '&$active': {\n      backgroundColor: ThemingParameters.sapInfobar_Active_Background,\n      '&:active': {\n        backgroundColor: \"\".concat(ThemingParameters.sapInfobar_Active_Background)\n      },\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapInfobar_Hover_Background\n      }\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapBackgroundColor\n  },\n  transparent: {\n    backgroundColor: ThemingParameters.sapToolbar_Background\n  },\n  toolbar: {\n    width: '100%',\n    '& >:first-child:not(.spacer)': {\n      margin: '0 0.25rem 0 0'\n    },\n    '& >:last-child:not(.spacer)': {\n      margin: '0 0.5rem 0 0.25rem'\n    },\n    '& > *:not(first-child):not(last-child):not(.spacer)': {\n      margin: '0 0.25rem'\n    },\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '100%'\n  },\n  overflowButtonContainer: {\n    marginRight: '0.5rem'\n  },\n  popoverContent: {\n    maxWidth: '20rem',\n    padding: CssSizeVariables.sapWcrToolbarPopoverContentPadding,\n    display: 'flex',\n    flexDirection: 'column',\n    '& [ui5-button]': {\n      marginBottom: '0.25rem'\n    },\n    '& [ui5-button]::part(button)': {\n      justifyContent: 'flex-start'\n    },\n    '& :last-child': {\n      marginBottom: 0\n    }\n  },\n  childContainer: {\n    display: 'flex'\n  }\n};\nvar _excluded = [\"children\", \"toolbarStyle\", \"design\", \"active\", \"style\", \"tooltip\", \"className\", \"onClick\", \"slot\", \"as\", \"portalContainer\", \"numberOfAlwaysVisibleItems\", \"onOverflowChange\"];\nvar useStyles = createUseStyles(styles, {\n  name: 'Toolbar'\n});\nvar OVERFLOW_BUTTON_WIDTH = 32 + 8;\n/**\n * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.\n *\n * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.\n * It can be accessed by the user through the overflow button that opens it in a popover.\n */\n\nvar Toolbar = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      toolbarStyle = props.toolbarStyle,\n      design = props.design,\n      active = props.active,\n      style = props.style,\n      tooltip = props.tooltip,\n      className = props.className,\n      onClick = props.onClick,\n      slot = props.slot,\n      as = props.as,\n      portalContainer = props.portalContainer,\n      numberOfAlwaysVisibleItems = props.numberOfAlwaysVisibleItems,\n      onOverflowChange = props.onOverflowChange,\n      rest = _objectWithoutProperties(props, _excluded);\n\n  var classes = useStyles();\n\n  var _useSyncRef = useSyncRef(ref),\n      _useSyncRef2 = _slicedToArray(_useSyncRef, 2),\n      componentRef = _useSyncRef2[0],\n      outerContainer = _useSyncRef2[1];\n\n  var controlMetaData = useRef([]);\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      lastVisibleIndex = _useState2[0],\n      setLastVisibleIndex = _useState2[1];\n\n  var contentRef = useRef(null);\n  var overflowContentRef = useRef(null);\n  var overflowBtnRef = useRef(null);\n\n  var _useState3 = useState('0'),\n      _useState4 = _slicedToArray(_useState3, 2),\n      minWidth = _useState4[0],\n      setMinWidth = _useState4[1];\n\n  var i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n  var toolbarClasses = clsx(classes.outerContainer, toolbarStyle === ToolbarStyle.Clear && classes.clear, active && classes.active, design === ToolbarDesign.Solid && classes.solid, design === ToolbarDesign.Transparent && classes.transparent, design === ToolbarDesign.Info && classes.info, className);\n  var childrenWithRef = useMemo(function () {\n    controlMetaData.current = [];\n    var refactoredChildren = React.Children.toArray(children).map(function (child, index) {\n      if (child.type === React.Fragment) {\n        return child.props.children.filter(Boolean).map(function (item, itemIndex) {\n          return /*#__PURE__*/cloneElement(item, {\n            key: \".\".concat(index, \":\").concat(itemIndex)\n          });\n        });\n      }\n\n      return child;\n    });\n    return refactoredChildren.flat().map(function (item, index) {\n      var _item$type;\n\n      var itemRef = /*#__PURE__*/createRef();\n      controlMetaData.current.push({\n        ref: itemRef\n      }); // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\n      if ((item === null || item === void 0 ? void 0 : (_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.displayName) === 'ToolbarSpacer') {\n        return item;\n      }\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: itemRef,\n        key: index,\n        className: classes.childContainer,\n        \"data-component-name\": \"ToolbarChildContainer\"\n      }, item);\n    });\n  }, [children, controlMetaData, classes.childContainer]);\n  var overflowNeeded = (lastVisibleIndex || lastVisibleIndex === 0) && React.Children.count(childrenWithRef) !== lastVisibleIndex + 1 && numberOfAlwaysVisibleItems < React.Children.count(children);\n  useEffect(function () {\n    var lastElementResizeObserver;\n    var lastElement = contentRef.current.children[numberOfAlwaysVisibleItems - 1];\n\n    if (numberOfAlwaysVisibleItems && overflowNeeded && lastElement) {\n      lastElementResizeObserver = new ResizeObserver(debounce(function () {\n        setMinWidth(\"\".concat(lastElement.getBoundingClientRect().right + OVERFLOW_BUTTON_WIDTH, \"px\"));\n      }, 200));\n      lastElementResizeObserver.observe(contentRef.current);\n    }\n\n    return function () {\n      var _lastElementResizeObs;\n\n      (_lastElementResizeObs = lastElementResizeObserver) === null || _lastElementResizeObs === void 0 ? void 0 : _lastElementResizeObs.disconnect();\n    };\n  }, [numberOfAlwaysVisibleItems, overflowNeeded]);\n  var requestAnimationFrameRef = useRef();\n  var calculateVisibleItems = useCallback(function () {\n    requestAnimationFrameRef.current = requestAnimationFrame(function () {\n      if (!outerContainer.current) return;\n      var availableWidth = outerContainer.current.getBoundingClientRect().width;\n      var consumedWidth = 0;\n      var lastIndex = null;\n\n      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {\n        lastIndex = -1;\n      } else {\n        controlMetaData.current.forEach(function (item, index) {\n          var currentMeta = controlMetaData.current[index];\n\n          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {\n            var nextWidth = currentMeta.ref.current.getBoundingClientRect().width;\n            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px\n\n            if (index === controlMetaData.current.length - 1) {\n              if (consumedWidth + nextWidth <= availableWidth - 8) {\n                lastIndex = index;\n              }\n            } else {\n              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index;\n              }\n\n              if (consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH && consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index - 1;\n              }\n            }\n\n            consumedWidth += nextWidth;\n          }\n        });\n      }\n\n      setLastVisibleIndex(lastIndex);\n    });\n  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);\n  var observer = useRef(new ResizeObserver(calculateVisibleItems));\n  useEffect(function () {\n    if (outerContainer.current) {\n      observer.current.observe(outerContainer.current);\n    }\n\n    return function () {\n      cancelAnimationFrame(requestAnimationFrameRef.current);\n      observer.current.disconnect();\n    };\n  }, [outerContainer.current]);\n  useIsomorphicLayoutEffect(function () {\n    calculateVisibleItems();\n  }, [calculateVisibleItems]);\n  var handleToolbarClick = useCallback(function (e) {\n    if (active && typeof onClick === 'function') {\n      onClick(enrichEventWithDetails(e));\n    }\n  }, [onClick, active]);\n  useEffect(function () {\n    if (lastVisibleIndex !== null && typeof onOverflowChange === 'function') {\n      var _contentRef$current, _overflowContentRef$c;\n\n      var toolbarChildren = (_contentRef$current = contentRef.current) === null || _contentRef$current === void 0 ? void 0 : _contentRef$current.children;\n      var toolbarElements = [];\n      var overflowElements = (_overflowContentRef$c = overflowContentRef.current) === null || _overflowContentRef$c === void 0 ? void 0 : _overflowContentRef$c.children;\n\n      if ((toolbarChildren === null || toolbarChildren === void 0 ? void 0 : toolbarChildren.length) > 0) {\n        toolbarElements = Array.from(toolbarChildren).filter(function (item, index) {\n          return index <= lastVisibleIndex;\n        });\n      }\n\n      onOverflowChange({\n        toolbarElements: toolbarElements,\n        overflowElements: overflowElements,\n        target: outerContainer.current\n      });\n    }\n  }, [lastVisibleIndex]);\n  var CustomTag = as;\n  var styleWithMinWidth = minWidth !== '0' ? _objectSpread({\n    minWidth: minWidth\n  }, style) : style;\n  return /*#__PURE__*/React.createElement(CustomTag, _extends({\n    title: tooltip,\n    style: styleWithMinWidth,\n    className: clsx(toolbarClasses, overflowNeeded && classes.hasOverflow),\n    ref: componentRef,\n    slot: slot,\n    onClick: handleToolbarClick\n  }, rest), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.toolbar,\n    \"data-component-name\": \"ToolbarContent\",\n    ref: contentRef\n  }, overflowNeeded && React.Children.map(childrenWithRef, function (item, index) {\n    if (index >= lastVisibleIndex + 1 && index > numberOfAlwaysVisibleItems - 1) {\n      return /*#__PURE__*/React.cloneElement(item, {\n        style: {\n          visibility: 'hidden'\n        }\n      });\n    }\n\n    return item;\n  }), !overflowNeeded && childrenWithRef), overflowNeeded && /*#__PURE__*/React.createElement(\"div\", {\n    ref: overflowBtnRef,\n    className: classes.overflowButtonContainer,\n    title: i18nBundle.getText(SHOW_MORE),\n    \"data-component-name\": \"ToolbarOverflowButtonContainer\"\n  }, /*#__PURE__*/React.createElement(OverflowPopover, {\n    lastVisibleIndex: lastVisibleIndex,\n    contentClass: classes.popoverContent,\n    portalContainer: portalContainer,\n    overflowContentRef: overflowContentRef,\n    numberOfAlwaysVisibleItems: numberOfAlwaysVisibleItems\n  }, React.Children.toArray(children).map(function (child) {\n    if (child.type === React.Fragment) {\n      return child.props.children;\n    }\n\n    return child;\n  }))));\n});\nToolbar.defaultProps = {\n  as: 'div',\n  toolbarStyle: ToolbarStyle.Standard,\n  design: ToolbarDesign.Auto,\n  active: false,\n  portalContainer: document.body,\n  numberOfAlwaysVisibleItems: 0\n};\nToolbar.displayName = 'Toolbar';\nexport { Toolbar };","map":{"version":3,"sources":["../src/internal/stopPropagation.ts","../src/components/Toolbar/OverflowPopover.tsx","../src/components/Toolbar/Toolbar.jss.ts","../src/components/Toolbar/index.tsx"],"names":["stopPropagation","e","OverflowPopover","lastVisibleIndex","contentClass","children","portalContainer","overflowContentRef","numberOfAlwaysVisibleItems","props","popoverRef","useRef","pressed","setPressed","useState","handleToggleButtonClick","useCallback","useEffect","handleClose","renderChildren","React","index","item","style","height","margin","width","ButtonDesign","createPortal","PopoverPlacementType","styles","outerContainer","boxSizing","maxWidth","CssSizeVariables","position","overflow","display","justifyContent","alignItems","borderBottom","ThemingParameters","hasOverflow","clear","active","cursor","backgroundColor","sapActiveColor","sapList_Hover_Background","info","sapInfobar_Hover_Background","solid","sapBackgroundColor","transparent","sapToolbar_Background","toolbar","overflowButtonContainer","marginRight","popoverContent","padding","flexDirection","marginBottom","childContainer","useStyles","createUseStyles","name","OVERFLOW_BUTTON_WIDTH","Toolbar","forwardRef","toolbarStyle","design","tooltip","className","onClick","slot","as","onOverflowChange","rest","classes","componentRef","useSyncRef","controlMetaData","setLastVisibleIndex","contentRef","overflowBtnRef","minWidth","setMinWidth","i18nBundle","useI18nBundle","toolbarClasses","clsx","ToolbarStyle","ToolbarDesign","childrenWithRef","useMemo","refactoredChildren","child","cloneElement","key","itemRef","createRef","ref","overflowNeeded","lastElement","lastElementResizeObserver","debounce","requestAnimationFrameRef","calculateVisibleItems","requestAnimationFrame","availableWidth","consumedWidth","lastIndex","currentMeta","nextWidth","observer","cancelAnimationFrame","useIsomorphicLayoutEffect","handleToolbarClick","enrichEventWithDetails","toolbarChildren","toolbarElements","overflowElements","target","current","CustomTag","styleWithMinWidth","visibility","document"],"mappings":"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","sourcesContent":["export const stopPropagation = (e) => {\n  e.stopPropagation();\n  e.stopImmediatePropagation?.();\n};\n","import '@ui5/webcomponents-icons/dist/overflow.js';\nimport { ButtonDesign } from '@ui5/webcomponents-react/dist/ButtonDesign';\nimport { PopoverPlacementType } from '@ui5/webcomponents-react/dist/PopoverPlacementType';\nimport { Popover, PopoverDomRef } from '@ui5/webcomponents-react/dist/Popover';\nimport { ToggleButton } from '@ui5/webcomponents-react/dist/ToggleButton';\nimport React, { FC, ReactElement, ReactNode, Ref, useCallback, useEffect, useRef, useState } from 'react';\nimport { createPortal } from 'react-dom';\nimport { stopPropagation } from '../../internal/stopPropagation';\n\ninterface OverflowPopoverProps {\n  lastVisibleIndex: number;\n  contentClass: string;\n  children: ReactNode;\n  portalContainer: Element;\n  overflowContentRef: Ref<HTMLDivElement>;\n  numberOfAlwaysVisibleItems?: number;\n}\n\nexport const OverflowPopover: FC<OverflowPopoverProps> = (props: OverflowPopoverProps) => {\n  const { lastVisibleIndex, contentClass, children, portalContainer, overflowContentRef, numberOfAlwaysVisibleItems } =\n    props;\n  const popoverRef = useRef<PopoverDomRef>();\n  const [pressed, setPressed] = useState(false);\n\n  const handleToggleButtonClick = useCallback(\n    (e) => {\n      e.stopPropagation();\n      if (popoverRef.current) {\n        if (!pressed) {\n          popoverRef.current.showAt(e.target);\n          setPressed(true);\n        } else {\n          popoverRef.current.close();\n        }\n      }\n    },\n    [pressed]\n  );\n\n  useEffect(() => {\n    return () => {\n      if (popoverRef.current) {\n        popoverRef.current.close();\n      }\n    };\n  }, []);\n\n  const handleClose = useCallback(\n    (e) => {\n      stopPropagation(e);\n      setPressed(false);\n    },\n    [setPressed]\n  );\n\n  const renderChildren = useCallback(() => {\n    return React.Children.toArray(\n      (children as ReactElement)?.type === React.Fragment ? (children as ReactElement).props.children : children\n    ).map((item: ReactElement<any>, index) => {\n      if (index > lastVisibleIndex && index > numberOfAlwaysVisibleItems - 1) {\n        if ((item.type as any).displayName === 'ToolbarSeparator') {\n          return React.cloneElement(item, {\n            style: {\n              height: '0.0625rem',\n              margin: '0.375rem 0.1875rem',\n              width: '100%'\n            }\n          });\n        }\n        return item;\n      }\n      return null;\n    });\n  }, [children, lastVisibleIndex]);\n\n  return (\n    <>\n      <ToggleButton\n        design={ButtonDesign.Transparent}\n        icon=\"overflow\"\n        onClick={handleToggleButtonClick}\n        pressed={pressed}\n      />\n      {createPortal(\n        <Popover placementType={PopoverPlacementType.Bottom} ref={popoverRef} onAfterClose={handleClose} hideArrow>\n          <div className={contentClass} ref={overflowContentRef}>\n            {renderChildren()}\n          </div>\n        </Popover>,\n        portalContainer\n      )}\n    </>\n  );\n};\n","import { CssSizeVariables } from '@ui5/webcomponents-react-base/dist/CssSizeVariables';\nimport { ThemingParameters } from '@ui5/webcomponents-react-base/dist/ThemingParameters';\n\nexport const styles = {\n  outerContainer: {\n    boxSizing: 'border-box',\n    width: '100%',\n    maxWidth: '100%',\n    height: CssSizeVariables.sapWcrToolbarHeight,\n    position: 'relative',\n    overflow: 'hidden',\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderBottom: `solid 0.0625rem ${ThemingParameters.sapGroup_TitleBorderColor}`\n  },\n  hasOverflow: {\n    '& $toolbar': {\n      maxWidth: 'calc(100% - 44px)'\n    }\n  },\n  clear: {\n    borderBottom: 'none'\n  },\n  active: {\n    cursor: 'pointer',\n    '&:active': {\n      backgroundColor: ThemingParameters.sapActiveColor\n    },\n    '&:hover': {\n      backgroundColor: ThemingParameters.sapList_Hover_Background\n    }\n  },\n  info: {\n    // This color is most similar to darken(@sapUiBaseColor, 10)\n    backgroundColor: ThemingParameters.sapList_HeaderBorderColor,\n    '&$active': {\n      backgroundColor: ThemingParameters.sapInfobar_Active_Background,\n      '&:active': {\n        backgroundColor: `${ThemingParameters.sapInfobar_Active_Background}`\n      },\n      '&:hover': {\n        backgroundColor: ThemingParameters.sapInfobar_Hover_Background\n      }\n    }\n  },\n  solid: {\n    backgroundColor: ThemingParameters.sapBackgroundColor\n  },\n  transparent: {\n    backgroundColor: ThemingParameters.sapToolbar_Background\n  },\n  toolbar: {\n    width: '100%',\n    '& >:first-child:not(.spacer)': {\n      margin: '0 0.25rem 0 0'\n    },\n    '& >:last-child:not(.spacer)': {\n      margin: '0 0.5rem 0 0.25rem'\n    },\n    '& > *:not(first-child):not(last-child):not(.spacer)': {\n      margin: '0 0.25rem'\n    },\n    display: 'flex',\n    alignItems: 'center',\n    maxWidth: '100%'\n  },\n  overflowButtonContainer: {\n    marginRight: '0.5rem'\n  },\n  popoverContent: {\n    maxWidth: '20rem',\n    padding: CssSizeVariables.sapWcrToolbarPopoverContentPadding,\n    display: 'flex',\n    flexDirection: 'column',\n    '& [ui5-button]': {\n      marginBottom: '0.25rem'\n    },\n    '& [ui5-button]::part(button)': {\n      justifyContent: 'flex-start'\n    },\n    '& :last-child': {\n      marginBottom: 0\n    }\n  },\n  childContainer: { display: 'flex' }\n};\n","import { createUseStyles } from 'react-jss';\nimport { useSyncRef, useI18nBundle, useIsomorphicLayoutEffect } from '@ui5/webcomponents-react-base/dist/hooks';\nimport { debounce, enrichEventWithDetails } from '@ui5/webcomponents-react-base/dist/Utils';\nimport { SHOW_MORE } from '@ui5/webcomponents-react/dist/assets/i18n/i18n-defaults';\nimport { CommonProps } from '@ui5/webcomponents-react/interfaces/CommonProps';\nimport { ToolbarDesign } from '@ui5/webcomponents-react/dist/ToolbarDesign';\nimport { ToolbarStyle } from '@ui5/webcomponents-react/dist/ToolbarStyle';\nimport React, {\n  cloneElement,\n  createRef,\n  forwardRef,\n  ReactElement,\n  ReactFragment,\n  ReactNode,\n  Ref,\n  RefObject,\n  useCallback,\n  useEffect,\n  useMemo,\n  useRef,\n  useState\n} from 'react';\nimport { OverflowPopover } from './OverflowPopover';\nimport { styles } from './Toolbar.jss';\nimport clsx from 'clsx';\n\nconst useStyles = createUseStyles(styles, { name: 'Toolbar' });\n\nexport interface ToolbarPropTypes extends Omit<CommonProps, 'onClick'> {\n  /**\n   * Defines the content of the `Toolbar`.\n   */\n  children?: ReactNode | ReactNode[] | ReactFragment;\n  /**\n   * Defines the visual style of the `Toolbar`.<br />\n   * <b>Note:</b> The visual styles are theme-dependent.\n   */\n  toolbarStyle?: ToolbarStyle | keyof typeof ToolbarStyle;\n  /**\n   * Defines the `Toolbar` design.<br />\n   * <b>Note:</b> Design settings are theme-dependent.\n   */\n  design?: ToolbarDesign | keyof typeof ToolbarDesign;\n  /**\n   * Indicates that the whole `Toolbar` is clickable. The Press event is fired only if `active` is set to true.\n   */\n  active?: boolean;\n  /**\n   * Sets the components outer HTML tag.\n   *\n   * __Note:__ For TypeScript the types of `ref` are bound to the default tag name, if you change it you are responsible to set the respective types yourself.\n   */\n  as?: keyof HTMLElementTagNameMap;\n  /**\n   * Defines where modals are rendered into via `React.createPortal`.\n   *\n   * Defaults to: `document.body`\n   */\n  portalContainer?: Element;\n  /**\n   * Defines the number of items inside the toolbar which should always be visible.\n   * _E.g.: `numberOfAlwaysVisibleItems={3}` would always show the first three items, no matter the size of the toolbar._\n   *\n   * __Note__: To preserve the intended design, it's not recommended to overwrite the `min-width` when using this prop.\n   */\n  numberOfAlwaysVisibleItems?: number;\n  /**\n   * Fired when the user clicks on the `Toolbar`, if the `active` prop is set to \"true\".\n   */\n  onClick?: (event: CustomEvent) => void;\n  /**\n   * Fired when the content of the overflow popover has changed.\n   */\n  onOverflowChange?: (event: {\n    toolbarElements: HTMLElement[];\n    overflowElements: HTMLCollection;\n    target: HTMLElement;\n  }) => void;\n}\n\nconst OVERFLOW_BUTTON_WIDTH = 32 + 8;\n\n/**\n * Horizontal container most commonly used to display buttons, labels, selects and various other input controls.\n *\n * The content of the `Toolbar` moves into the overflow area from right to left when the available space is not enough in the visible area of the container.\n * It can be accessed by the user through the overflow button that opens it in a popover.\n */\nconst Toolbar = forwardRef((props: ToolbarPropTypes, ref: Ref<HTMLDivElement>) => {\n  const {\n    children,\n    toolbarStyle,\n    design,\n    active,\n    style,\n    tooltip,\n    className,\n    onClick,\n    slot,\n    as,\n    portalContainer,\n    numberOfAlwaysVisibleItems,\n    onOverflowChange,\n    ...rest\n  } = props;\n  const classes = useStyles();\n  const [componentRef, outerContainer] = useSyncRef<HTMLDivElement>(ref);\n  const controlMetaData = useRef([]);\n  const [lastVisibleIndex, setLastVisibleIndex] = useState<number>(null);\n  const contentRef = useRef(null);\n  const overflowContentRef = useRef(null);\n  const overflowBtnRef = useRef(null);\n  const [minWidth, setMinWidth] = useState('0');\n\n  const i18nBundle = useI18nBundle('@ui5/webcomponents-react');\n\n  const toolbarClasses = clsx(\n    classes.outerContainer,\n    toolbarStyle === ToolbarStyle.Clear && classes.clear,\n    active && classes.active,\n    design === ToolbarDesign.Solid && classes.solid,\n    design === ToolbarDesign.Transparent && classes.transparent,\n    design === ToolbarDesign.Info && classes.info,\n    className\n  );\n\n  const childrenWithRef = useMemo(() => {\n    controlMetaData.current = [];\n\n    const refactoredChildren = React.Children.toArray(children).map((child, index) => {\n      if ((child as ReactElement).type === React.Fragment) {\n        return (child as ReactElement).props.children.filter(Boolean).map((item, itemIndex: number) => {\n          return cloneElement(item, { key: `.${index}:${itemIndex}` });\n        });\n      }\n      return child;\n    });\n\n    return refactoredChildren.flat().map((item: ReactElement, index) => {\n      const itemRef: RefObject<HTMLDivElement> = createRef();\n\n      controlMetaData.current.push({\n        ref: itemRef\n      });\n\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if ((item?.type as any)?.displayName === 'ToolbarSpacer') {\n        return item;\n      }\n      return (\n        <div ref={itemRef} key={index} className={classes.childContainer} data-component-name=\"ToolbarChildContainer\">\n          {item}\n        </div>\n      );\n    });\n  }, [children, controlMetaData, classes.childContainer]);\n\n  const overflowNeeded =\n    (lastVisibleIndex || lastVisibleIndex === 0) &&\n    React.Children.count(childrenWithRef) !== lastVisibleIndex + 1 &&\n    numberOfAlwaysVisibleItems < React.Children.count(children);\n\n  useEffect(() => {\n    let lastElementResizeObserver;\n    const lastElement = contentRef.current.children[numberOfAlwaysVisibleItems - 1];\n    if (numberOfAlwaysVisibleItems && overflowNeeded && lastElement) {\n      lastElementResizeObserver = new ResizeObserver(\n        debounce(() => {\n          setMinWidth(`${lastElement.getBoundingClientRect().right + OVERFLOW_BUTTON_WIDTH}px`);\n        }, 200)\n      );\n      lastElementResizeObserver.observe(contentRef.current);\n    }\n    return () => {\n      lastElementResizeObserver?.disconnect();\n    };\n  }, [numberOfAlwaysVisibleItems, overflowNeeded]);\n\n  const requestAnimationFrameRef = useRef<undefined | number>();\n  const calculateVisibleItems = useCallback(() => {\n    requestAnimationFrameRef.current = requestAnimationFrame(() => {\n      if (!outerContainer.current) return;\n      const availableWidth = outerContainer.current.getBoundingClientRect().width;\n      let consumedWidth = 0;\n      let lastIndex = null;\n      let lastFitWidth = 0;\n\n      if (availableWidth - OVERFLOW_BUTTON_WIDTH <= 0) {\n        lastIndex = -1;\n        lastFitWidth = 0;\n      } else {\n        controlMetaData.current.forEach((item, index) => {\n          const currentMeta = controlMetaData.current[index] as { ref: RefObject<HTMLElement> };\n          if (currentMeta && currentMeta.ref && currentMeta.ref.current) {\n            let nextWidth = currentMeta.ref.current.getBoundingClientRect().width;\n            nextWidth += index === 0 || index === controlMetaData.current.length - 1 ? 4 : 8; // first & last element = padding: 4px\n            if (index === controlMetaData.current.length - 1) {\n              if (consumedWidth + nextWidth <= availableWidth - 8) {\n                lastIndex = index;\n                lastFitWidth = consumedWidth + nextWidth;\n              }\n            } else {\n              if (consumedWidth + nextWidth <= availableWidth - OVERFLOW_BUTTON_WIDTH) {\n                lastIndex = index;\n                lastFitWidth = consumedWidth + nextWidth;\n              }\n              if (\n                consumedWidth < availableWidth - OVERFLOW_BUTTON_WIDTH &&\n                consumedWidth + nextWidth >= availableWidth - OVERFLOW_BUTTON_WIDTH\n              ) {\n                lastIndex = index - 1;\n                lastFitWidth = 0;\n              }\n            }\n            consumedWidth += nextWidth;\n          }\n        });\n      }\n      setLastVisibleIndex(lastIndex);\n    });\n  }, [outerContainer.current, controlMetaData.current, setLastVisibleIndex, childrenWithRef, overflowNeeded]);\n\n  const observer = useRef(new ResizeObserver(calculateVisibleItems));\n\n  useEffect(() => {\n    if (outerContainer.current) {\n      observer.current.observe(outerContainer.current);\n    }\n    return () => {\n      cancelAnimationFrame(requestAnimationFrameRef.current);\n      observer.current.disconnect();\n    };\n  }, [outerContainer.current]);\n\n  useIsomorphicLayoutEffect(() => {\n    calculateVisibleItems();\n  }, [calculateVisibleItems]);\n\n  const handleToolbarClick = useCallback(\n    (e) => {\n      if (active && typeof onClick === 'function') {\n        onClick(enrichEventWithDetails(e));\n      }\n    },\n    [onClick, active]\n  );\n\n  useEffect(() => {\n    if (lastVisibleIndex !== null && typeof onOverflowChange === 'function') {\n      const toolbarChildren = contentRef.current?.children;\n      let toolbarElements = [];\n      const overflowElements = overflowContentRef.current?.children;\n      if (toolbarChildren?.length > 0) {\n        toolbarElements = Array.from(toolbarChildren).filter((item, index) => index <= lastVisibleIndex);\n      }\n      onOverflowChange({\n        toolbarElements: toolbarElements,\n        overflowElements: overflowElements,\n        target: outerContainer.current\n      });\n    }\n  }, [lastVisibleIndex]);\n  const CustomTag = as as React.ElementType;\n  const styleWithMinWidth = minWidth !== '0' ? { minWidth: minWidth, ...style } : style;\n  return (\n    <CustomTag\n      title={tooltip}\n      style={styleWithMinWidth}\n      className={clsx(toolbarClasses, overflowNeeded && classes.hasOverflow)}\n      ref={componentRef}\n      slot={slot}\n      onClick={handleToolbarClick}\n      {...rest}\n    >\n      <div className={classes.toolbar} data-component-name=\"ToolbarContent\" ref={contentRef}>\n        {overflowNeeded &&\n          React.Children.map(childrenWithRef, (item, index) => {\n            if (index >= lastVisibleIndex + 1 && index > numberOfAlwaysVisibleItems - 1) {\n              return React.cloneElement(item as ReactElement, { style: { visibility: 'hidden' } });\n            }\n            return item;\n          })}\n        {!overflowNeeded && childrenWithRef}\n      </div>\n      {overflowNeeded && (\n        <div\n          ref={overflowBtnRef}\n          className={classes.overflowButtonContainer}\n          title={i18nBundle.getText(SHOW_MORE)}\n          data-component-name=\"ToolbarOverflowButtonContainer\"\n        >\n          <OverflowPopover\n            lastVisibleIndex={lastVisibleIndex}\n            contentClass={classes.popoverContent}\n            portalContainer={portalContainer}\n            overflowContentRef={overflowContentRef}\n            numberOfAlwaysVisibleItems={numberOfAlwaysVisibleItems}\n          >\n            {React.Children.toArray(children).map((child) => {\n              if ((child as ReactElement).type === React.Fragment) {\n                return (child as ReactElement).props.children;\n              }\n              return child;\n            })}\n          </OverflowPopover>\n        </div>\n      )}\n    </CustomTag>\n  );\n});\n\nToolbar.defaultProps = {\n  as: 'div',\n  toolbarStyle: ToolbarStyle.Standard,\n  design: ToolbarDesign.Auto,\n  active: false,\n  portalContainer: document.body,\n  numberOfAlwaysVisibleItems: 0\n};\n\nToolbar.displayName = 'Toolbar';\nexport { Toolbar };\n"]},"metadata":{},"sourceType":"module"}