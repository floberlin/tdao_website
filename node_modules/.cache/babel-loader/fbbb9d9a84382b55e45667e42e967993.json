{"ast":null,"code":"let resizeObserver;\nconst observedElements = new Map();\n\nconst getResizeObserver = () => {\n  if (!resizeObserver) {\n    resizeObserver = new window.ResizeObserver(entries => {\n      entries.forEach(entry => {\n        const callbacks = observedElements.get(entry.target);\n        callbacks.forEach(callback => callback());\n      });\n    });\n  }\n\n  return resizeObserver;\n};\n\nlet observe = (element, callback) => {\n  const callbacks = observedElements.get(element) || []; // if no callbacks have been added for this element - start observing it\n\n  if (!callbacks.length) {\n    getResizeObserver().observe(element);\n  } // save the callbacks in an array\n\n\n  observedElements.set(element, [...callbacks, callback]);\n};\n\nlet unobserve = (element, callback) => {\n  const callbacks = observedElements.get(element) || [];\n\n  if (callbacks.length === 0) {\n    return;\n  }\n\n  const filteredCallbacks = callbacks.filter(fn => fn !== callback);\n\n  if (filteredCallbacks.length === 0) {\n    getResizeObserver().unobserve(element);\n    observedElements.delete(element);\n  } else {\n    observedElements.set(element, filteredCallbacks);\n  }\n};\n/**\n * Allows to register/deregister resize observers for a DOM element\n *\n * @public\n * @class\n  */\n\n\nclass ResizeHandler {\n  /**\n   * @static\n   * @public\n   * @param {*} element UI5 Web Component or DOM Element to be observed\n   * @param {*} callback Callback to be executed\n   */\n  static register(element, callback) {\n    if (element.isUI5Element) {\n      element = element.getDomRef();\n    }\n\n    if (element instanceof HTMLElement) {\n      observe(element, callback);\n    } else {\n      console.warn(\"Cannot register ResizeHandler for element\", element); // eslint-disable-line\n    }\n  }\n  /**\n   * @static\n   * @public\n   * @param {*} element UI5 Web Component or DOM Element to be unobserved\n   * @param {*} callback Callback to be removed\n   */\n\n\n  static deregister(element, callback) {\n    if (element.isUI5Element) {\n      element = element.getDomRef();\n    }\n\n    if (element instanceof HTMLElement) {\n      unobserve(element, callback);\n    } else {\n      console.warn(\"Cannot deregister ResizeHandler for element\", element); // eslint-disable-line\n    }\n  }\n\n}\n/**\n * Set a function to be executed whenever a DOM node needs to be observed for size change.\n * @public\n * @param fn\n */\n\n\nconst setResizeHandlerObserveFn = fn => {\n  observe = fn;\n};\n/**\n * Set a function to be executed whenever a DOM node needs to no longer be observed for size changes\n * @public\n * @param fn\n */\n\n\nconst setResizeHandlerUnobserveFn = fn => {\n  unobserve = fn;\n};\n\nexport default ResizeHandler;\nexport { setResizeHandlerObserveFn, setResizeHandlerUnobserveFn };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/delegate/ResizeHandler.js"],"names":["resizeObserver","observedElements","Map","getResizeObserver","window","ResizeObserver","entries","forEach","entry","callbacks","get","target","callback","observe","element","length","set","unobserve","filteredCallbacks","filter","fn","delete","ResizeHandler","register","isUI5Element","getDomRef","HTMLElement","console","warn","deregister","setResizeHandlerObserveFn","setResizeHandlerUnobserveFn"],"mappings":"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","sourcesContent":["let resizeObserver;\nconst observedElements = new Map();\n\nconst getResizeObserver = () => {\n\tif (!resizeObserver) {\n\t\tresizeObserver = new window.ResizeObserver(entries => {\n\t\t\tentries.forEach(entry => {\n\t\t\t\tconst callbacks = observedElements.get(entry.target);\n\t\t\t\tcallbacks.forEach(callback => callback());\n\t\t\t});\n\t\t});\n\t}\n\treturn resizeObserver;\n};\n\nlet observe = (element, callback) => {\n\tconst callbacks = observedElements.get(element) || [];\n\n\t// if no callbacks have been added for this element - start observing it\n\tif (!callbacks.length) {\n\t\tgetResizeObserver().observe(element);\n\t}\n\n\t// save the callbacks in an array\n\tobservedElements.set(element, [...callbacks, callback]);\n};\n\nlet unobserve = (element, callback) => {\n\tconst callbacks = observedElements.get(element) || [];\n\tif (callbacks.length === 0) {\n\t\treturn;\n\t}\n\n\tconst filteredCallbacks = callbacks.filter(fn => fn !== callback);\n\tif (filteredCallbacks.length === 0) {\n\t\tgetResizeObserver().unobserve(element);\n\t\tobservedElements.delete(element);\n\t} else {\n\t\tobservedElements.set(element, filteredCallbacks);\n\t}\n};\n\n/**\n * Allows to register/deregister resize observers for a DOM element\n *\n * @public\n * @class\n  */\nclass ResizeHandler {\n\t/**\n\t * @static\n\t * @public\n\t * @param {*} element UI5 Web Component or DOM Element to be observed\n\t * @param {*} callback Callback to be executed\n\t */\n\tstatic register(element, callback) {\n\t\tif (element.isUI5Element) {\n\t\t\telement = element.getDomRef();\n\t\t}\n\n\t\tif (element instanceof HTMLElement) {\n\t\t\tobserve(element, callback);\n\t\t} else {\n\t\t\tconsole.warn(\"Cannot register ResizeHandler for element\", element); // eslint-disable-line\n\t\t}\n\t}\n\n\t/**\n\t * @static\n\t * @public\n\t * @param {*} element UI5 Web Component or DOM Element to be unobserved\n\t * @param {*} callback Callback to be removed\n\t */\n\tstatic deregister(element, callback) {\n\t\tif (element.isUI5Element) {\n\t\t\telement = element.getDomRef();\n\t\t}\n\n\t\tif (element instanceof HTMLElement) {\n\t\t\tunobserve(element, callback);\n\t\t} else {\n\t\t\tconsole.warn(\"Cannot deregister ResizeHandler for element\", element); // eslint-disable-line\n\t\t}\n\t}\n}\n\n/**\n * Set a function to be executed whenever a DOM node needs to be observed for size change.\n * @public\n * @param fn\n */\nconst setResizeHandlerObserveFn = fn => {\n\tobserve = fn;\n};\n\n/**\n * Set a function to be executed whenever a DOM node needs to no longer be observed for size changes\n * @public\n * @param fn\n */\nconst setResizeHandlerUnobserveFn = fn => {\n\tunobserve = fn;\n};\n\nexport default ResizeHandler;\nexport { setResizeHandlerObserveFn, setResizeHandlerUnobserveFn };\n"]},"metadata":{},"sourceType":"module"}