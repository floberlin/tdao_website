{"ast":null,"code":"/**\n * Determines the slot to which a node should be assigned\n * @param node Text node or HTML element\n * @returns {string}\n */\nconst getSlotName = node => {\n  // Text nodes can only go to the default slot\n  if (!(node instanceof HTMLElement)) {\n    return \"default\";\n  } // Discover the slot based on the real slot name (f.e. footer => footer, or content-32 => content)\n\n\n  const slot = node.getAttribute(\"slot\");\n\n  if (slot) {\n    const match = slot.match(/^(.+?)-\\d+$/);\n    return match ? match[1] : slot;\n  } // Use default slot as a fallback\n\n\n  return \"default\";\n};\n\nconst isSlot = el => el && el instanceof HTMLElement && el.localName === \"slot\";\n\nconst getSlottedElements = el => {\n  if (isSlot(el)) {\n    return el.assignedNodes({\n      flatten: true\n    }).filter(item => item instanceof HTMLElement);\n  }\n\n  return [el];\n};\n\nconst getSlottedElementsList = elList => {\n  const reducer = (acc, curr) => acc.concat(getSlottedElements(curr));\n\n  return elList.reduce(reducer, []);\n};\n\nexport { getSlotName, isSlot, getSlottedElements, getSlottedElementsList };","map":{"version":3,"sources":["/Users/flo/Desktop/mdao.fioriapp/node_modules/@ui5/webcomponents-base/dist/util/SlotsHelper.js"],"names":["getSlotName","node","HTMLElement","slot","getAttribute","match","isSlot","el","localName","getSlottedElements","assignedNodes","flatten","filter","item","getSlottedElementsList","elList","reducer","acc","curr","concat","reduce"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,WAAW,GAAGC,IAAI,IAAI;AAC3B;AACA,MAAI,EAAEA,IAAI,YAAYC,WAAlB,CAAJ,EAAoC;AACnC,WAAO,SAAP;AACA,GAJ0B,CAM3B;;;AACA,QAAMC,IAAI,GAAGF,IAAI,CAACG,YAAL,CAAkB,MAAlB,CAAb;;AACA,MAAID,IAAJ,EAAU;AACT,UAAME,KAAK,GAAGF,IAAI,CAACE,KAAL,CAAW,aAAX,CAAd;AACA,WAAOA,KAAK,GAAGA,KAAK,CAAC,CAAD,CAAR,GAAcF,IAA1B;AACA,GAX0B,CAa3B;;;AACA,SAAO,SAAP;AACA,CAfD;;AAiBA,MAAMG,MAAM,GAAGC,EAAE,IAAIA,EAAE,IAAIA,EAAE,YAAYL,WAApB,IAAmCK,EAAE,CAACC,SAAH,KAAiB,MAAzE;;AAEA,MAAMC,kBAAkB,GAAGF,EAAE,IAAI;AAChC,MAAID,MAAM,CAACC,EAAD,CAAV,EAAgB;AACf,WAAOA,EAAE,CAACG,aAAH,CAAiB;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAAjB,EAAoCC,MAApC,CAA2CC,IAAI,IAAIA,IAAI,YAAYX,WAAnE,CAAP;AACA;;AAED,SAAO,CAACK,EAAD,CAAP;AACA,CAND;;AAQA,MAAMO,sBAAsB,GAAGC,MAAM,IAAI;AACxC,QAAMC,OAAO,GAAG,CAACC,GAAD,EAAMC,IAAN,KAAeD,GAAG,CAACE,MAAJ,CAAWV,kBAAkB,CAACS,IAAD,CAA7B,CAA/B;;AACA,SAAOH,MAAM,CAACK,MAAP,CAAcJ,OAAd,EAAuB,EAAvB,CAAP;AACA,CAHD;;AAKA,SACChB,WADD,EAECM,MAFD,EAGCG,kBAHD,EAICK,sBAJD","sourcesContent":["/**\n * Determines the slot to which a node should be assigned\n * @param node Text node or HTML element\n * @returns {string}\n */\nconst getSlotName = node => {\n\t// Text nodes can only go to the default slot\n\tif (!(node instanceof HTMLElement)) {\n\t\treturn \"default\";\n\t}\n\n\t// Discover the slot based on the real slot name (f.e. footer => footer, or content-32 => content)\n\tconst slot = node.getAttribute(\"slot\");\n\tif (slot) {\n\t\tconst match = slot.match(/^(.+?)-\\d+$/);\n\t\treturn match ? match[1] : slot;\n\t}\n\n\t// Use default slot as a fallback\n\treturn \"default\";\n};\n\nconst isSlot = el => el && el instanceof HTMLElement && el.localName === \"slot\";\n\nconst getSlottedElements = el => {\n\tif (isSlot(el)) {\n\t\treturn el.assignedNodes({ flatten: true }).filter(item => item instanceof HTMLElement);\n\t}\n\n\treturn [el];\n};\n\nconst getSlottedElementsList = elList => {\n\tconst reducer = (acc, curr) => acc.concat(getSlottedElements(curr));\n\treturn elList.reduce(reducer, []);\n};\n\nexport {\n\tgetSlotName,\n\tisSlot,\n\tgetSlottedElements,\n\tgetSlottedElementsList,\n};\n"]},"metadata":{},"sourceType":"module"}